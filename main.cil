.TYPES
type Main {
	attribute number

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method main: function_main_at_Main
	method __init__: function___init___at_Main
}

.DATA


.CODE
function function___init___at_Main {
	PARAM self

	

	SETATTR self number 0
	
	RETURN self
}
function function_main_at_Main {
	PARAM self

	LOCAL internal_0 # Count of ancestors of the switch expression
	LOCAL internal_1 # Switch expression type
	LOCAL internal_2 # Ancestor type
	LOCAL internal_3 # Step 1 comparison result
	LOCAL internal_4 # Step 1 Array of ancestors
	LOCAL internal_5 # Step 2 iteration index
	LOCAL internal_6 # Step 2 comparison result
	LOCAL internal_7 # Array to store the branch types
	LOCAL internal_8 # Array to store the nearest ancestor index of the expression type of the i-th branch type 
	LOCAL internal_9 # Address of the type Int
	LOCAL internal_10 # Address of the type Bool
	LOCAL internal_11 # Address of the type String
	LOCAL internal_12 # Step 3 - Iteration index of the branch types array
	LOCAL internal_13 # Step 3 - Comparison for the index of the branch types array
	LOCAL internal_14 # Step 3 - Type of the i-th branch
	LOCAL internal_15 # Step 3 - Index of the ancestor
	LOCAL internal_16 # Step 3 - Comparison for the index of the ancestor
	LOCAL internal_17 # Step 3 - Type of the j-th ancestor
	LOCAL internal_18 # Step 3 - Comparison for the branch type nad the ancestor type
	LOCAL internal_19 # Step 4 - Iteration index
	LOCAL internal_20 # Step 4 - Index of the minimum counter in the counter array
	LOCAL internal_21 # Step 4 - Temporary variable
	LOCAL internal_22 # Step 4 - Current minimum of the counter array
	LOCAL internal_23 # Step 4 - Comparison for the minimum of the counter array
	LOCAL internal_24 # Step 5 - Bool array
	LOCAL internal_25 # Step 5 - Exists an error
	LOCAL internal_26 # Step 5 - Comparison for the correct branch result
	LOCAL internal_27 # Result of the switch expression address
	LOCAL a # Specialiced variable for the branch Int
	LOCAL b # Specialiced variable for the branch Bool
	LOCAL c # Specialiced variable for the branch String

	# Steps:
	#  1 - Count how many ancestors has the dynamic type of the expression
	#  2 - Create an array of the same size where to store the ancestors
	#  3 - For each branch type, store the ancestor index that match with it, if no one match, store `count of ancestors`
	#  4 - Find the minimum of the ancestors indexes
	#  5 - With the minimum index, get the correct branch type
	
	# ######################################################################## #
	# Step 1 - Count how many ancestors has the dynamic type of the expression #
	# ######################################################################## #
	internal_1 = TYPEOF 1 # Get the switch expression type
	internal_2 = internal_1 # The first ancestor will be the type itself
	internal_0 = 0 # Initialize the counter
	while_start:
	internal_3 = internal_2 == 0
	IF internal_3 GOTO while_end
	internal_0 = internal_0 + 1 # Increment the counter
	internal_2 = ANCESTOR internal_2
	GOTO while_start
	while_end:
	
	# ###################################################################### #
	# Step 2 - Create an array of the same size where to store the ancestors #
	# ###################################################################### #
	internal_2 = internal_1 # The first ancestor will be the type itself
	internal_4 = ARRAY internal_0 # Create an array of ancestors
	internal_5 = 0 # Initialize the index with the value 0
	foreach_start:
	internal_6 = internal_5 < internal_0 # Check if the index is less than the counter
	IF internal_6 GOTO foreach_body
	GOTO foreach_end
	foreach_body:
	SETINDEX internal_4 internal_5 internal_2 # Set the index of the array with the ancestor type
	internal_2 = ANCESTOR internal_2 # Get the next ancestor
	internal_5 = internal_5 + 1 # Increment index
	GOTO foreach_start
	foreach_end:
	
	internal_7 = ARRAY 3
	internal_8 = ARRAY 3
	internal_9 = TYPEDIR Int
	SETINDEX internal_7 0 internal_9
	SETINDEX internal_8 0 internal_0
	internal_10 = TYPEDIR Bool
	SETINDEX internal_7 1 internal_10
	SETINDEX internal_8 1 internal_0
	internal_11 = TYPEDIR String
	SETINDEX internal_7 2 internal_11
	SETINDEX internal_8 2 internal_0
	
	# #################################################################################################### #
	# Step 3 - For each branch type, store the ancestor index that match with it (Simulating a double for) #
	# #################################################################################################### #
	# ############# #
	# Outer Foreach #
	# ############# #
	internal_12 = 0 # Initialize the index i of the case to 0
	foreach_type_start:
	internal_13 = internal_12 < 3 # Check if the type index is less than the count of branches
	IF internal_13 GOTO foreach_type_body
	GOTO foreach_type_end
	foreach_type_body:
	internal_14 = GETINDEX internal_7 internal_12 # Get the type of the i-th branch
	
	# ############# #
	# Inner Foreach #
	# ############# #
	internal_15 = 0 # Initialize the index j of the case to 0
	foreach_ancestor_start:
	internal_16 = internal_15 < internal_0 # Check if the case index is less than the count of ancestors
	IF internal_16 GOTO foreach_ancestor_body
	GOTO foreach_ancestor_end
	foreach_ancestor_body:
	internal_17 = GETINDEX internal_4 internal_15 # Get the j-th ancestor type
	internal_18 = internal_14 == internal_17 # Compare if the type of the i-th branch is equal to the j-th ancestor
	IF internal_18 GOTO foreach_ancestor_end # If the types are equal, we have a match, then we can exit
	internal_15 = internal_15 + 1 # Increment the ancestor index
	GOTO foreach_ancestor_start
	foreach_ancestor_end:
	SETINDEX internal_8 internal_12 internal_15 # Set the counter of the i-th branch equals to j
	# #################### #
	# End of Inner Foreach #
	# #################### #
	
	internal_12 = internal_12 + 1 # Increment type index
	GOTO foreach_type_start
	foreach_type_end:
	# ################# #
	# End Outer Foreach #
	# ################# #
	
	# ######################################## #
	# Step 4 - Find the minimum ancestor index #
	# ######################################## #
	internal_19 = 0 # Initialize the index of the counter array to 0
	internal_20 = 0 # Initialize the index of the lower counter to 0
	internal_22 = internal_0 # Initialize the current minimum to `count of ancestors`
	foreach_min_start:
	internal_23 = internal_19 < 3 # Check if the index of the lower counter is less than the count of branches
	IF internal_23 GOTO foreach_min_body
	GOTO foreach_min_end
	foreach_min_body:
	internal_21 = GETINDEX internal_8 internal_19 # Get the nearest ancestor index of the i-th branch type
	internal_23 = internal_21 < internal_22 # Compare if the nearest ancestor index is less than the current minimum
	IF internal_23 GOTO update_min
	GOTO foreach_min_end
	update_min:
	internal_22 = internal_21 # Update the current minimum
	internal_20 = internal_19 # Update the index of the lower counter
	update_min_end:
	internal_19 = internal_19 + 1 # Increment the index of the counter array
	GOTO foreach_min_start
	foreach_min_end:
	
	# ################################################################# #
	# Step 5 - Using the minimun ancestor index find the correct branch #
	# ################################################################# #
	internal_24 = ARRAY 3 # Create the bool array
	SETINDEX internal_24 0 0 # Initialize the bool array
	SETINDEX internal_24 1 0 # Initialize the bool array
	SETINDEX internal_24 2 0 # Initialize the bool array
	
	internal_25 = internal_20 == internal_0 # Check if the minimum index is equal to the count of ancestors
	IF internal_25 GOTO error_branch
	SETINDEX internal_24 internal_20 1 # Set the bool array in the correct index to 1
	
	internal_26 = GETINDEX internal_24 0 # Get the bool value of the branch Int
	IF internal_26 GOTO branch_Int # If the bool value is 1, then we have a match
	
	internal_26 = GETINDEX internal_24 1 # Get the bool value of the branch Bool
	IF internal_26 GOTO branch_Bool # If the bool value is 1, then we have a match
	
	internal_26 = GETINDEX internal_24 2 # Get the bool value of the branch String
	IF internal_26 GOTO branch_String # If the bool value is 1, then we have a match
	
	branch_Int:
	internal_27 = 0 # Assign the result
	GOTO branch_end
	
	branch_Bool:
	internal_27 = 1 # Assign the result
	GOTO branch_end
	
	branch_String:
	internal_27 = 2 # Assign the result
	GOTO branch_end
	
	error_branch:
	# Insert an error call
	branch_end:
	
	RETURN internal_27
}
