.TYPES
type Object {
	inherits from null

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method __init__: function___init___at_Object
}
type IO {
	inherits from Object

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_string: function_out_string_at_IO
	method out_int: function_out_int_at_IO
	method in_string: function_in_string_at_IO
	method in_int: function_in_int_at_IO
	method __init__: function___init___at_IO
}
type Int {
	inherits from Object

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method __init__: function___init___at_Int
}
type String {
	inherits from Object

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method length: function_length_at_String
	method concat: function_concat_at_String
	method substr: function_substr_at_String
	method __init__: function___init___at_String
}
type Bool {
	inherits from Object

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method __init__: function___init___at_Bool
}
type Main {
	inherits from IO

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_string: function_out_string_at_IO
	method out_int: function_out_int_at_IO
	method in_string: function_in_string_at_IO
	method in_int: function_in_int_at_IO
	method main: function_main_at_Main
	method fib: function_fib_at_Main
	method __init__: function___init___at_Main
}

.DATA


.CODE
function function_add{
	PARAM a
	PARAM b

	LOCAL internal_0 # Adding result

	internal_0 = ALLOCINT 0
	internal_0 = a + b
	
	RETURN internal_0
}
function function_sub{
	PARAM a
	PARAM b

	LOCAL internal_0 # Substracting result

	internal_0 = ALLOCINT 0
	internal_0 = a - b
	
	RETURN internal_0
}
function function_mult{
	PARAM a
	PARAM b

	LOCAL internal_0 # Multiting result

	internal_0 = ALLOCINT 0
	internal_0 = a * b
	
	RETURN internal_0
}
function function_div{
	PARAM a
	PARAM b

	LOCAL internal_0 # Dividing result

	internal_0 = ALLOCINT 0
	internal_0 = a / b
	
	RETURN internal_0
}
function function_xor{
	PARAM a
	PARAM b

	LOCAL internal_0 # Xor result

	internal_0 = ALLOCINT 0
	internal_0 = XOR a b
	
	RETURN internal_0
}
function function_less_than{
	PARAM a
	PARAM b

	LOCAL internal_0 # Less than result

	internal_0 = ALLOCBOOL 0
	internal_0 = a < b
	
	RETURN internal_0
}
function function_less_than_or_equal{
	PARAM a
	PARAM b

	LOCAL internal_0 # Less than or equal result

	internal_0 = ALLOCBOOL 0
	internal_0 = a <= b
	
	RETURN internal_0
}
function function_equal{
	PARAM a
	PARAM b

	LOCAL internal_0 # Equal result
	LOCAL internal_1 # Type of a
	LOCAL internal_2 # Type Int
	LOCAL internal_3 # Type Bool
	LOCAL internal_4 # Type String
	LOCAL internal_5 # Type of a equals int
	LOCAL internal_6 # Type of a equals bool
	LOCAL internal_7 # Type of a equals string

	internal_0 = ALLOCBOOL 0
	internal_1 = TYPEOF a
	internal_2 = TYPEADDR Int
	internal_3 = TYPEADDR Bool
	internal_4 = TYPEADDR String
	internal_5 = ALLOCBOOL 0
	internal_6 = ALLOCBOOL 0
	internal_7 = ALLOCBOOL 0
	internal_5 = EQUALADDR internal_1 internal_2
	internal_6 = EQUALADDR internal_1 internal_3
	internal_7 = EQUALADDR internal_1 internal_4
	
	IF internal_5 GOTO a_is_type_int_or_bool
	IF internal_6 GOTO a_is_type_int_or_bool
	IF internal_7 GOTO a_is_type_string
	GOTO a_is_type_object
	
	a_is_type_int_or_bool:
	internal_0 = EQUALINT a b
	GOTO end_of_equal
	
	a_is_type_string:
	internal_0 = EQUALSTR a b
	GOTO end_of_equal
	
	a_is_type_object:
	internal_0 = a == b
	GOTO end_of_equal
	
	end_of_equal:
	
	RETURN internal_0
}
function function_assign{
	PARAM dest
	PARAM source

	LOCAL internal_0 # Type of source
	LOCAL internal_1 # Type Int
	LOCAL internal_2 # Type Bool
	LOCAL internal_3 # Type of source equals int
	LOCAL internal_4 # Type of source equals bool

	internal_0 = TYPEOF source
	internal_1 = TYPEADDR Int
	internal_2 = TYPEADDR Bool
	internal_3 = ALLOCBOOL 0
	internal_4 = ALLOCBOOL 0
	internal_3 = EQUALADDR internal_1 internal_1
	internal_4 = EQUALADDR internal_1 internal_2
	
	IF internal_3 GOTO source_is_type_int_or_bool
	IF internal_4 GOTO source_is_type_int_or_bool
	GOTO source_is_type_object
	
	source_is_type_int_or_bool:
	dest = INT source
	GOTO source_end_of_equal
	
	source_is_type_object:
	dest = source
	GOTO source_end_of_equal
	
	source_end_of_equal:
	
	RETURN dest
}
function function___init___at_Object{
	PARAM self
	
	RETURN self
}
function function_abort_at_Object{
	PARAM self

	HALT
	
	RETURN self
}
function function_type_name_at_Object{
	PARAM self

	LOCAL internal_0 # type_name

	internal_0 = TYPENAME self
	
	RETURN internal_0
}
function function_copy_at_Object{
	PARAM self

	LOCAL internal_0

	internal_0 = COPY self
	
	RETURN internal_0
}
function function___init___at_IO{
	PARAM self
	
	RETURN self
}
function function_out_string_at_IO{
	PARAM self
	PARAM x

	PRINTSTR x
	
	RETURN self
}
function function_out_int_at_IO{
	PARAM self
	PARAM x

	PRINTINT x
	
	RETURN self
}
function function_in_string_at_IO{
	PARAM self

	LOCAL internal_0

	READSTR internal_0
	
	RETURN internal_0
}
function function_in_int_at_IO{
	PARAM self

	LOCAL internal_0

	internal_0 = ALLOCINT 0
	READINT internal_0
	
	RETURN internal_0
}
function function___init___at_String{
	PARAM self
	
	RETURN self
}
function function_length_at_String{
	PARAM self

	LOCAL internal_0

	internal_0 = LENGTH self
	
	RETURN internal_0
}
function function_concat_at_String{
	PARAM self
	PARAM s

	LOCAL internal_0

	internal_0 = CONCAT self s
	
	RETURN internal_0
}
function function_substr_at_String{
	PARAM self
	PARAM i
	PARAM l

	LOCAL internal_0

	internal_0 = SUBSTRING self i l
	
	RETURN internal_0
}
function function___init___at_Main{
	PARAM self
	
	RETURN self
}
function function_main_at_Main{
	PARAM self

	LOCAL internal_0 # String "Enter n to find nth fibonacci number!\n"
	LOCAL internal_1
	LOCAL internal_2
	LOCAL internal_3
	LOCAL internal_4
	LOCAL internal_5 # String "\n"
	LOCAL internal_6

	internal_0 = ALLOCSTR "Enter n to find nth fibonacci number!\n"
	ARG self
	ARG internal_0
	internal_1 = VCALL Main function_out_string_at_IO
	ARG self
	internal_2 = VCALL Main function_in_int_at_IO
	ARG self
	ARG internal_2
	internal_3 = VCALL Main function_fib_at_Main
	ARG self
	ARG internal_3
	internal_4 = VCALL Main function_out_int_at_IO
	internal_5 = ALLOCSTR "\n"
	ARG self
	ARG internal_5
	internal_6 = VCALL Main function_out_string_at_IO
	
	RETURN internal_6
}
function function_fib_at_Main{
	PARAM self
	PARAM i

	LOCAL a
	LOCAL internal_1 # Integer 1
	LOCAL b
	LOCAL internal_3 # Integer 0
	LOCAL c
	LOCAL internal_5 # Integer 0
	LOCAL internal_6 # Integer 0
	LOCAL internal_7 # Store the result of the operation function_equal
	LOCAL internal_8 # Integer 1
	LOCAL internal_9 # Store the negation of internal_7
	LOCAL internal_10 # Store the result of the operation function_add
	LOCAL internal_11 # Integer 1
	LOCAL internal_12 # Store the result of the operation function_sub

	# Let a: Int b: Int c: Int
	
	internal_1 = ALLOCINT 1
	ARG a
	ARG internal_1
	a = CALL function_assign
	
	internal_3 = ALLOCINT 0
	ARG b
	ARG internal_3
	b = CALL function_assign
	
	internal_5 = ALLOCINT 0
	ARG c
	ARG internal_5
	c = CALL function_assign
	
	# While loop
	while_start_8738608219667:
	internal_6 = ALLOCINT 0
	
	ARG i
	ARG internal_6
	internal_7 = CALL function_equal
	internal_8 = ALLOCINT 1
	ARG internal_7
	ARG internal_8
	internal_9 = CALL function_xor
	IF internal_9 GOTO while_body_8738608219667
	GOTO while_end_8738608219667
	
	while_body_8738608219667:
	
	ARG a
	ARG b
	internal_10 = CALL function_add
	
	ARG c
	ARG internal_10
	c = CALL function_assign
	internal_11 = ALLOCINT 1
	
	ARG i
	ARG internal_11
	internal_12 = CALL function_sub
	
	ARG i
	ARG internal_12
	i = CALL function_assign
	
	ARG b
	ARG a
	b = CALL function_assign
	
	ARG a
	ARG c
	a = CALL function_assign
	GOTO while_start_8738608219667
	
	while_end_8738608219667:
	
	RETURN c
}
function main{
	

	LOCAL internal_0
	LOCAL internal_1

	internal_0 = ALLOCATE Main
	ARG internal_0
	internal_0 = VCALL Main function___init___at_Main
	
	ARG internal_0
	internal_1 = VCALL Main function_main_at_Main
	
	HALT
}