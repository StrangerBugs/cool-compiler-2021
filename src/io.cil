.TYPES
type Object {
	inherits from null

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method __init__: function___init___at_Object
}
type IO {
	inherits from Object

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_string: function_out_string_at_IO
	method out_int: function_out_int_at_IO
	method in_string: function_in_string_at_IO
	method in_int: function_in_int_at_IO
	method __init__: function___init___at_IO
}
type Int {
	inherits from Object

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method __init__: function___init___at_Int
}
type String {
	inherits from Object

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method length: function_length_at_String
	method concat: function_concat_at_String
	method substr: function_substr_at_String
	method __init__: function___init___at_String
}
type Bool {
	inherits from Object

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method __init__: function___init___at_Bool
}
type A {
	inherits from Object

	attribute io

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_a: function_out_a_at_A
	method __init__: function___init___at_A
}
type B {
	inherits from A

	attribute io

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_a: function_out_a_at_A
	method __init__: function___init___at_B
	method out_b: function_out_b_at_B
}
type C {
	inherits from IO

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_string: function_out_string_at_IO
	method out_int: function_out_int_at_IO
	method in_string: function_in_string_at_IO
	method in_int: function_in_int_at_IO
	method out_c: function_out_c_at_C
	method __init__: function___init___at_C
}
type D {
	inherits from C

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_string: function_out_string_at_IO
	method out_int: function_out_int_at_IO
	method in_string: function_in_string_at_IO
	method in_int: function_in_int_at_IO
	method out_c: function_out_c_at_C
	method __init__: function___init___at_D
	method out_d: function_out_d_at_D
}
type Main {
	inherits from IO

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_string: function_out_string_at_IO
	method out_int: function_out_int_at_IO
	method in_string: function_in_string_at_IO
	method in_int: function_in_int_at_IO
	method main: function_main_at_Main
	method __init__: function___init___at_Main
}

.DATA


.CODE
function function___init___at_Object{
	PARAM self
	
	RETURN self
}
function function_abort_at_Object{
	PARAM self

	HALT
	
	RETURN self
}
function function_type_name_at_Object{
	PARAM self

	LOCAL internal_0 # type_name

	internal_0 = TYPENAME self
	
	RETURN internal_0
}
function function_copy_at_Object{
	PARAM self

	LOCAL internal_0

	internal_0 = COPY self
	
	RETURN internal_0
}
function function___init___at_IO{
	PARAM self
	
	RETURN self
}
function function_out_string_at_IO{
	PARAM self
	PARAM x

	PRINTSTR x
	
	RETURN self
}
function function_out_int_at_IO{
	PARAM self
	PARAM x

	PRINTINT x
	
	RETURN self
}
function function_in_string_at_IO{
	PARAM self

	LOCAL internal_0

	READSTR internal_0
	
	RETURN internal_0
}
function function_in_int_at_IO{
	PARAM self

	LOCAL internal_0

	READINT internal_0
	
	RETURN internal_0
}
function function___init___at_String{
	PARAM self
	
	RETURN self
}
function function_length_at_String{
	PARAM self

	LOCAL internal_0

	internal_0 = LENGTH self
	
	RETURN internal_0
}
function function_concat_at_String{
	PARAM self
	PARAM s

	LOCAL internal_0

	internal_0 = CONCAT self s
	
	RETURN internal_0
}
function function_substr_at_String{
	PARAM self
	PARAM i
	PARAM l

	LOCAL internal_0

	internal_0 = SUBSTRING self i l
	
	RETURN internal_0
}
function function___init___at_A{
	PARAM self

	LOCAL internal_0 # Store an instance of the class IO

	internal_0 = ALLOCATE IO # Allocate the object IO
	ARG internal_0 # Pass the instance to the constructor
	internal_0 = VCALL IO function___init___at_IO # Call the constructor
	SETATTR self io internal_0
	
	RETURN self
}
function function_out_a_at_A{
	PARAM self

	LOCAL internal_0
	LOCAL internal_1 # String "A: Hello world\n"
	LOCAL internal_2

	internal_0 = GETATTR self io
	internal_1 = ALLOCSTR "A: Hello world\n"
	ARG internal_0
	ARG internal_1
	internal_2 = VCALL IO function_out_string_at_IO
	
	RETURN internal_2
}
function function___init___at_B{
	PARAM self

	LOCAL internal_0 # Store an instance of the class IO

	internal_0 = ALLOCATE IO # Allocate the object IO
	ARG internal_0 # Pass the instance to the constructor
	internal_0 = VCALL IO function___init___at_IO # Call the constructor
	SETATTR self io internal_0
	
	RETURN self
}
function function_out_b_at_B{
	PARAM self

	LOCAL internal_0
	LOCAL internal_1 # String "B: Hello world\n"
	LOCAL internal_2

	internal_0 = GETATTR self io
	internal_1 = ALLOCSTR "B: Hello world\n"
	ARG internal_0
	ARG internal_1
	internal_2 = VCALL IO function_out_string_at_IO
	
	RETURN internal_2
}
function function___init___at_C{
	PARAM self
	
	RETURN self
}
function function_out_c_at_C{
	PARAM self

	LOCAL internal_0 # String "C: Hello world\n"
	LOCAL internal_1

	internal_0 = ALLOCSTR "C: Hello world\n"
	ARG self
	ARG internal_0
	internal_1 = VCALL C function_out_string_at_IO
	
	RETURN internal_1
}
function function___init___at_D{
	PARAM self
	
	RETURN self
}
function function_out_d_at_D{
	PARAM self

	LOCAL internal_0 # String "D: Hello world\n"
	LOCAL internal_1

	internal_0 = ALLOCSTR "D: Hello world\n"
	ARG self
	ARG internal_0
	internal_1 = VCALL D function_out_string_at_IO
	
	RETURN internal_1
}
function function___init___at_Main{
	PARAM self
	
	RETURN self
}
function function_main_at_Main{
	PARAM self

	LOCAL internal_0 # Store an instance of the class A
	LOCAL internal_1
	LOCAL internal_2 # Store an instance of the class B
	LOCAL internal_3
	LOCAL internal_4 # Store an instance of the class C
	LOCAL internal_5
	LOCAL internal_6 # Store an instance of the class D
	LOCAL internal_7
	LOCAL internal_8 # String "Done.\n"
	LOCAL internal_9

	internal_0 = ALLOCATE A # Allocate the object A
	ARG internal_0 # Pass the instance to the constructor
	internal_0 = VCALL A function___init___at_A # Call the constructor
	ARG internal_0
	internal_1 = VCALL A function_out_a_at_A
	internal_2 = ALLOCATE B # Allocate the object B
	ARG internal_2 # Pass the instance to the constructor
	internal_2 = VCALL B function___init___at_B # Call the constructor
	ARG internal_2
	internal_3 = VCALL B function_out_b_at_B
	internal_4 = ALLOCATE C # Allocate the object C
	ARG internal_4 # Pass the instance to the constructor
	internal_4 = VCALL C function___init___at_C # Call the constructor
	ARG internal_4
	internal_5 = VCALL C function_out_c_at_C
	internal_6 = ALLOCATE D # Allocate the object D
	ARG internal_6 # Pass the instance to the constructor
	internal_6 = VCALL D function___init___at_D # Call the constructor
	ARG internal_6
	internal_7 = VCALL D function_out_d_at_D
	internal_8 = ALLOCSTR "Done.\n"
	ARG self
	ARG internal_8
	internal_9 = VCALL Main function_out_string_at_IO
	
	RETURN internal_9
}
function main{
	

	LOCAL internal_0
	LOCAL internal_1

	internal_0 = ALLOCATE Main
	ARG internal_0
	internal_0 = VCALL Main function___init___at_Main
	
	ARG internal_0
	internal_1 = VCALL Main function_main_at_Main
	
	HALT
}