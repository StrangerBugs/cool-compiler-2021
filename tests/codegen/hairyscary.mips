.data
	type_Object: .word 8
	type_Object_inherits_from: .word 0
	type_Object_attributes: .word 0
	type_Object_name_size: .word 6
	type_Object_name: .asciiz "Object"
	type_Object_abort_message: .asciiz "Abort called from class Object\n"
	
	type_IO: .word 8
	type_IO_inherits_from: .word type_Object
	type_IO_attributes: .word 0
	type_IO_name_size: .word 2
	type_IO_name: .asciiz "IO"
	type_IO_abort_message: .asciiz "Abort called from class IO\n"
	
	type_Int: .word 8
	type_Int_inherits_from: .word type_Object
	type_Int_attributes: .word 0
	type_Int_name_size: .word 3
	type_Int_name: .asciiz "Int"
	type_Int_abort_message: .asciiz "Abort called from class Int\n"
	
	type_String: .word 8
	type_String_inherits_from: .word type_Object
	type_String_attributes: .word 0
	type_String_name_size: .word 6
	type_String_name: .asciiz "String"
	type_String_abort_message: .asciiz "Abort called from class String\n"
	
	type_Bool: .word 8
	type_Bool_inherits_from: .word type_Object
	type_Bool_attributes: .word 0
	type_Bool_name_size: .word 4
	type_Bool_name: .asciiz "Bool"
	type_Bool_abort_message: .asciiz "Abort called from class Bool\n"
	
	type_Foo: .word 28
	type_Foo_inherits_from: .word type_Bazz
	type_Foo_attributes: .word 5
	type_Foo_name_size: .word 3
	type_Foo_name: .asciiz "Foo"
	type_Foo_abort_message: .asciiz "Abort called from class Foo\n"
	
	type_Bar: .word 44
	type_Bar_inherits_from: .word type_Razz
	type_Bar_attributes: .word 9
	type_Bar_name_size: .word 3
	type_Bar_name: .asciiz "Bar"
	type_Bar_abort_message: .asciiz "Abort called from class Bar\n"
	
	type_Razz: .word 36
	type_Razz_inherits_from: .word type_Foo
	type_Razz_attributes: .word 7
	type_Razz_name_size: .word 4
	type_Razz_name: .asciiz "Razz"
	type_Razz_abort_message: .asciiz "Abort called from class Razz\n"
	
	type_Bazz: .word 20
	type_Bazz_inherits_from: .word type_IO
	type_Bazz_attributes: .word 3
	type_Bazz_name_size: .word 4
	type_Bazz_name: .asciiz "Bazz"
	type_Bazz_abort_message: .asciiz "Abort called from class Bazz\n"
	
	type_Main: .word 24
	type_Main_inherits_from: .word type_Object
	type_Main_attributes: .word 4
	type_Main_name_size: .word 4
	type_Main_name: .asciiz "Main"
	type_Main_abort_message: .asciiz "Abort called from class Main\n"
	
	buffer_input: .space 1024
	debug_log: .asciiz "debug_log\n"

.text
	function_add:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Addition operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		add $t2, $t0, $t1 # $t2 = $t0 + $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_sub:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Subtraction operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		sub $t2, $t0, $t1 # $t2 = $t0 - $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_mult:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Multiplication operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		mult $t0, $t1 # $t2 = $t0 * $t1
		mflo $t2
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_div:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Division operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		div $t0, $t1 # $t2 = $t0 / $t1
		mflo $t2
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_xor:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Xor operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		xor $t2, $t0, $t1 # $t0 = $t0 ^ $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Less than operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		slt $t2, $t0, $t1 # $t2 = $t0 < $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than_or_equal:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Less than operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		sle $t2, $t0, $t1 # $t2 = $t0 <= $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_equal:
		# Function parameters
		#   $ra = 48($sp)
		#   a = 44($sp)
		#   b = 40($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -40
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_0 = address of allocated object Int
		
		# Allocating NUll to internal_1
		sw $zero, 32($sp) # internal_1 = 0
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_2 = address of allocated object Int
		
		# internal_2 = EqualAddress(a, internal_1)
		lw $t0, 44($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# internal_2 = EqualAddress(b, internal_1)
		lw $t0, 40($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# If internal_2 then goto a_is_type_object
		lw $t0, 28($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_object
		
		# internal_3 = typeof a that is the first word of the object
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# internal_4 = direction of Int
		la $t0, type_Int
		sw $t0, 20($sp)
		
		# internal_5 = direction of Bool
		la $t0, type_Bool
		sw $t0, 16($sp)
		
		# internal_6 = direction of String
		la $t0, type_String
		sw $t0, 12($sp)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_7 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_8 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_9 = address of allocated object Int
		
		# internal_7 = EqualAddress(internal_3, internal_4)
		lw $t0, 24($sp)
		lw $t1, 20($sp)
		seq $t2, $t0, $t1
		lw $t0, 8($sp)
		sw $t2, 8($t0)
		
		# internal_8 = EqualAddress(internal_3, internal_5)
		lw $t0, 24($sp)
		lw $t1, 16($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_9 = EqualAddress(internal_3, internal_6)
		lw $t0, 24($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# If internal_7 then goto a_is_type_int_or_bool
		lw $t0, 8($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_int_or_bool
		
		# If internal_8 then goto a_is_type_int_or_bool
		lw $t0, 4($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_int_or_bool
		
		# If internal_9 then goto a_is_type_string
		lw $t0, 0($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_string
		
		# Jumping to a_is_type_object
		j a_is_type_object
		
		a_is_type_int_or_bool:
		
		# internal_0 = EqualInt(a, b)
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		seq $t2, $t0, $t1
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# Jumping to end_of_equal
		j end_of_equal
		
		a_is_type_string:
		
		# internal_0 = EqualStr(a, b)
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		addi $t0, $t0, 8
		addi $t1, $t1, 8
		
		# By default we assume the strings are equals
		addi $t4, $zero, 1
		lw $t5, 36($sp)
		sw $t4, 8($t5)
		
		while_compare_strings_start:
		lb $t2, 0($t0)
		lb $t3, 0($t1)
		beq $t2, $t3, while_compare_strings_update
		
		# The strings are no equals
		lw $t5, 36($sp)
		sw $zero, 8($t5)
		j while_compare_strings_end
		
		while_compare_strings_update:
		addi $t0, $t0, 1
		addi $t1, $t1, 1
		beq $t2, $zero, while_compare_strings_end
		beq $t3, $zero, while_compare_strings_end
		j while_compare_strings_start
		while_compare_strings_end:
		
		# Jumping to end_of_equal
		j end_of_equal
		
		a_is_type_object:
		
		# Equal operation
		lw $t0, 44($sp) # Save in $t0 the left operand address
		lw $t1, 40($sp) # Save in $t1 the right operand address
		seq $t2, $t0, $t1 # $t2 = $t0 == $t1
		
		lw $t0, 36($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Jumping to end_of_equal
		j end_of_equal
		
		end_of_equal:
		
		# Loading return value in $v1
		lw $v1, 36($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 40
		
		jr $ra
		
	function_assign:
		# Function parameters
		#   $ra = 36($sp)
		#   dest = 32($sp)
		#   source = 28($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -28
		
		# Allocating NUll to internal_0
		sw $zero, 24($sp) # internal_0 = 0
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_1 = address of allocated object Int
		
		# internal_1 = EqualAddress(source, internal_0)
		lw $t0, 28($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# internal_1 = EqualAddress(dest, internal_0)
		lw $t0, 32($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# If internal_1 then goto source_is_type_object
		lw $t0, 20($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_object
		
		# internal_2 = typeof source that is the first word of the object
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# internal_3 = direction of Int
		la $t0, type_Int
		sw $t0, 12($sp)
		
		# internal_4 = direction of Bool
		la $t0, type_Bool
		sw $t0, 8($sp)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_5 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_6 = address of allocated object Int
		
		# internal_5 = EqualAddress(internal_2, internal_3)
		lw $t0, 16($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_6 = EqualAddress(internal_2, internal_4)
		lw $t0, 16($sp)
		lw $t1, 8($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# If internal_5 then goto source_is_type_int_or_bool
		lw $t0, 4($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_int_or_bool
		
		# If internal_6 then goto source_is_type_int_or_bool
		lw $t0, 0($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_int_or_bool
		
		# Jumping to source_is_type_object
		j source_is_type_object
		
		source_is_type_int_or_bool:
		
		# dest = source where source is an integer
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		lw $t0, 28($sp) # Pointer to source
		lw $t1, 0($t0) # $t1 = type of source
		lw $t2, 8($t0) # $t2 = value of source
		sw $t1, 0($v0) # Save type of dest
		sw $a0, 4($v0) # Save size of dest
		sw $t2, 8($v0) # Save value of dest
		sw $v0, 32($sp)
		
		# Jumping to source_end_of_equal
		j source_end_of_equal
		
		source_is_type_object:
		
		# dest = source
		lw $t0, 28($sp)
		sw $t0, 32($sp)
		
		# Jumping to source_end_of_equal
		j source_end_of_equal
		
		source_end_of_equal:
		
		# Loading return value in $v1
		lw $v1, 32($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_Object:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_abort_at_Object:
		# Function parameters
		#   $ra = 20($sp)
		#   self = 16($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -16
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 33 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 33
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 65
		sb $t0, 8($v0) # internal_0[0] = 'A'
		
		addi $t0, $zero, 98
		sb $t0, 9($v0) # internal_0[1] = 'b'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_0[2] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 11($v0) # internal_0[3] = 'r'
		
		addi $t0, $zero, 116
		sb $t0, 12($v0) # internal_0[4] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_0[5] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 14($v0) # internal_0[6] = 'c'
		
		addi $t0, $zero, 97
		sb $t0, 15($v0) # internal_0[7] = 'a'
		
		addi $t0, $zero, 108
		sb $t0, 16($v0) # internal_0[8] = 'l'
		
		addi $t0, $zero, 108
		sb $t0, 17($v0) # internal_0[9] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 18($v0) # internal_0[10] = 'e'
		
		addi $t0, $zero, 100
		sb $t0, 19($v0) # internal_0[11] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_0[12] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 21($v0) # internal_0[13] = 'f'
		
		addi $t0, $zero, 114
		sb $t0, 22($v0) # internal_0[14] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_0[15] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 24($v0) # internal_0[16] = 'm'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_0[17] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 26($v0) # internal_0[18] = 'c'
		
		addi $t0, $zero, 108
		sb $t0, 27($v0) # internal_0[19] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 28($v0) # internal_0[20] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 29($v0) # internal_0[21] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 30($v0) # internal_0[22] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_0[23] = ' '
		
		sb $zero, 32($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_0 = "Abort called from class "
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_2[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 4($sp) # internal_2 = "\n"
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_type_name_at_Object
		jal function_type_name_at_Object
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_1 = result of function_type_name_at_Object
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_0
		
		# Argument internal_1
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_concat_at_String
		jal function_concat_at_String
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_3 = result of function_concat_at_String
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 12($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument internal_2
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_concat_at_String
		jal function_concat_at_String
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_3 = result of function_concat_at_String
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 0($sp) # $t0 = internal_3
		addi $t0, $t0, 8 # Pointer to the first character of the string
		
		# Printing the string internal_3
		li $v0, 4
		move $a0, $t0
		syscall
		
		# Exit program
		li $v0, 10
		syscall
		
		# Loading return value in $v1
		lw $v1, 16($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 16
		
		jr $ra
		
	function_type_name_at_Object:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = name of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($t0) # $t1 = type of self
		lw $t2, 12($t1) # $t1 = length of the name of self
		la $t3, 16($t1) # $t1 = name of self
		
		addi $t2, $t2, 9 # Setting space for the type, the size and the null byte
		li $v0, 9
		move $a0, $t2
		syscall
		addi $t2, $t2, -9 # Restoring space for the type, the size and the null byte
		
		la $t4, type_String
		sw $t4, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t4, $v0, 0 # $t4 = direction of the new string
		addi $t4, $t4, 8 # Pointer to the first character of the string
		xor $t5, $t5, $t5 # Initializing counter
		while_copy_name_start:
		beq $t5, $t2, while_copy_name_end
		lb $t6, 0($t3) # Loading the character
		sb $t6, 0($t4)
		addi $t4, $t4, 1 # Incrementing the pointer to the new string
		addi $t3, $t3, 1 # Incrementing the pointer to the string in self
		addi $t5, $t5, 1 # Incrementing counter
		j while_copy_name_start
		while_copy_name_end:
		
		sb $zero, 0($t4) # Setting the null byte
		
		sw $v0, 0($sp) # Storing the new string in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_copy_at_Object:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = copy of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($t0) # $t1 = type of self
		lw $t2, 4($t0) # $t2 = length of self in bytes
		
		# Allocating space for the new object
		li $v0, 9
		move $a0, $t2
		syscall
		move $t3, $v0 # $t3 = direction of the new object
		sw $t1, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		# Initializing the variable of the loop
		addi $t0, $t0, 8 # Pointer to the first character of the object
		addi $t3, $t3, 8 # Pointer to the first character of the object
		addi $t2, $2, -8 # Decrementing in 8 the length of the object
		xor $t4, $t4, $t4 # Initializing counter
		
		# Loop copying the object
		while_copy_start:
		beq $t4, $t2, while_copy_end
		lb $t5, 0($t0) # Loading the byte
		sb $t5, 0($t3) # Storing the byte
		addi $t0, $t0, 1 # Incrementing the pointer to the object
		addi $t3, $t3, 1 # Incrementing the pointer to the new object
		addi $t4, $t4, 1 # Incrementing counter
		j while_copy_start
		while_copy_end:
		sw $v0, 0($sp) # Storing the new object in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_IO:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_out_string_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   x = 0($sp)
		
		lw $t0, 0($sp) # $t0 = x
		addi $t0, $t0, 8 # Pointer to the first character of the string
		
		# Printing the string x
		li $v0, 4
		move $a0, $t0
		syscall
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_out_int_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   x = 0($sp)
		
		# Printing the string x
		li $v0, 1
		lw $a0, 0($sp)
		lw $a0, 8($a0)
		syscall
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_in_string_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		li $v0, 8
		la $a0, buffer_input
		li $a1, 1024
		syscall
		
		xor $t0, $t0, $t0 # Initializing counter
		while_read_start:
		lb $t1, buffer_input($t0) # Loading the byte
		beq $t1, $zero, while_read_end
		addi $t0, $t0, 1 # Incrementing counter
		j while_read_start
		while_read_end:
		addi $t0, $t0, -1 # Decrementing counter to eliminate the '\n'
		
		addi $t0, $t0, 9 # Adding space for the type, the size and the null byte
		li $v0, 9
		move $a0, $t0
		syscall
		addi $t0, $t0, -9 # Adding space for the type, the size and the null byte
		la $t2, type_String
		sw $t2, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t3, $v0, 8 # Pointer to the first character of the string
		xor $t4, $t4, $t4 # Initializing counter
		
		while_copy_from_buffer_start:
		beq $t4, $t0, while_copy_from_buffer_end
		lb $t5, buffer_input($t4) # Loading the byte
		sb $t5, 0($t3) # Storing the byte
		addi $t3, $t3, 1 # Imcremeenting pointer
		addi $t4, $t4, 1 # Incrementing counter
		j while_copy_from_buffer_start
		while_copy_from_buffer_end:
		
		sb $zero, 0($t3) # Storing the null byte
		
		sw $v0, 0($sp) # Storing the new object in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_in_int_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		li $v0, 5
		syscall
		lw $t0, 0($sp)
		sw $v0, 8($t0)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_String:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_length_at_String:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# internal_0 = length of self
		lw $t0, 4($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9 # Subtracting 9 for the type, length, and null-terminator
		lw $t0, 0($sp)
		sw $t1, 8($t0)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_concat_at_String:
		# Function parameters
		#   $ra = 12($sp)
		#   self = 8($sp)
		#   s = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = self + s
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		lw $t2, 4($t0) # $t2 = length of str1
		lw $t3, 4($t1) # $t3 = length of str2
		addi $t2, $t2, -9
		addi $t3, $t3, -9
		add $t4, $t2, $t3 # $t4 = length of str1 + str2
		addi $t4, $t4, 9 # Adding the space for the type (4bytes), the length(4bytes) and the null-terminator(1byte)
		
		li $v0, 9
		move $a0, $t4
		syscall
		addi $t4, $t4, -9 # Restoring $t4 = length of str1 + str2
		add $t5, $zero, $v0 # $t5 = address of the new string object
		addi $t5, $t5, 8 # $t5 = address of the first byte of the new string
		
		la $t8, type_String
		sw $t8, 0($v0) # Setting type in the first word of th object
		
		sw $a0, 4($v0) # Setting length of the string in the second word of the object
		
		# Copying str1 to the new string
		xor $t6, $t6, $t6 # $t6 = 0 Initializing counter
		while_copy_str1_start:
		beq $t6, $t2, while_copy_str1_end
		lb $t7, 8($t0)
		sb $t7, 0($t5)
		add $t0, $t0, 1 # $t0 = $t0 + 1 Incrementing the address of str1
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_str1_start
		while_copy_str1_end:
		
		# Copying str2 to the new string
		while_copy_str2_start:
		beq $t6, $t4, while_copy_str2_end
		lb $t7, 8($t1)
		sb $t7, 0($t5)
		add $t1, $t1, 1 # $t0 = $t0 + 1 Incrementing the address of str1
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_str2_start
		while_copy_str2_end:
		
		sb $zero, 0($t5) # Setting the null-terminator
		
		sw $v0, 0($sp) # internal_0 = self + s
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_substr_at_String:
		# Function parameters
		#   $ra = 16($sp)
		#   self = 12($sp)
		#   i = 8($sp)
		#   l = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = self[i:i + l]
		lw $t0, 12($sp) # $t0 = address of the string
		lw $t1, 4($t0) # $t1 = length of the string
		addi $t1, $t1, -9 # $t1 = length of the string + 9
		lw $t2, 8($sp) # $t2 = start of the substring
		lw $t2, 8($t2)
		lw $t3, 4($sp) # $t3 = length of the substring
		lw $t3, 8($t3)
		add $t4, $t2, $t3 # $t4 = start of the substring + length of the substring
		
		bgt $t4, $t1, substring_out_of_bounds
		
		addi $t3, $t3, 9
		li $v0, 9
		move $a0, $t3
		syscall
		addi $t3, $t3, -9
		
		la $t5, type_String
		sw $t5, 0($v0) # Setting type in the first word of the object
		
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t0, $t0, 8 # pointing to the first byte of the string
		add $t0, $t0, $t2 # pointing to the first byte of the substring
		move $t5, $v0 # $t5 = address of the new string
		add $t5, $t5, 8 # pointing to the first byte of the string
		xor $t6, $t6, $t6 # $t6 = 0 Initializing counter
		while_copy_substr_start:
		beq $t6, $t3, while_copy_substr_end
		lb $t7, 0($t0)
		sb $t7, 0($t5)
		addi $t0, $t0, 1 # $t0 = $t0 + 1 Incrementing the address of the string
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_substr_start
		while_copy_substr_end:
		
		sb $zero, 0($t5) # Setting the null-terminator
		
		sw $v0, 0($sp) # internal_0 = self[i:i + l]
		j substring_not_out_of_bounds
		
		substring_out_of_bounds:
		li $v0, 17
		addi $a0, $zero, 1
		syscall
		
		substring_not_out_of_bounds:
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_Foo:
		# Function parameters
		#   $ra = 456($sp)
		#   self = 452($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -452
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 448($sp) # internal_0 = address of allocated object Int
		
		# Set attribute h of self
		lw $t0, 452($sp) # $t0 = self
		lw $t1, 448($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8744937288307
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937288307
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937288307
		j object_set_attribute_8744937288307
		int_set_attribute_8744937288307:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8744937288307
		bool_set_attribute_8744937288307:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8744937288307
		object_set_attribute_8744937288307:
		sw $t1, 8($t0) # self.h = internal_0
		end_set_attribute_8744937288307:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 444($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 440($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 436($sp) # internal_3 = address of allocated object Int
		
		# Allocating NUll to internal_4
		sw $zero, 432($sp) # internal_4 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 428($sp) # internal_5 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 416($sp) # internal_8 = address of allocated object Int
		
		# internal_6 = typeof self that is the first word of the object
		lw $t0, 452($sp)
		lw $t0, 0($t0)
		sw $t0, 424($sp)
		
		# internal_7 = internal_6
		lw $t0, 424($sp)
		sw $t0, 420($sp)
		
		while_start_8744937301489:
		
		# internal_8 = EqualAddress(internal_7, internal_4)
		lw $t0, 420($sp)
		lw $t1, 432($sp)
		seq $t2, $t0, $t1
		lw $t0, 416($sp)
		sw $t2, 8($t0)
		
		# If internal_8 then goto while_end_8744937301489
		lw $t0, 416($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8744937301489
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_5
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing internal_5
		
		# Argument internal_2
		lw $t0, 452($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 440($sp) # internal_5 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_7 = ancestor of internal_7
		lw $t0, 420($sp)
		lw $t0, 4($t0)
		sw $t0, 420($sp)
		
		# Jumping to while_start_8744937301489
		j while_start_8744937301489
		
		while_end_8744937301489:
		
		# internal_7 = internal_6
		lw $t0, 424($sp)
		sw $t0, 420($sp)
		
		# initialize Array [internal_5]
		lw $t0, 428($sp) # $t0 = internal_5
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 412($sp) # internal_9 = new Array[internal_5]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 408($sp) # internal_10 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 404($sp) # internal_11 = address of allocated object Int
		
		foreach_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 420($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_5
		lw $t0, 440($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 416($sp) # internal_11 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_11 then goto foreach_body_8744937301489
		lw $t0, 404($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8744937301489
		
		# Jumping to foreach_end_8744937301489
		j foreach_end_8744937301489
		
		foreach_body_8744937301489:
		
		# array internal_9[4 * internal_10] = internal_7
		lw $t0, 408($sp) # $t0 = internal_10
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 412($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 420($sp)
		sw $t0, 0($t1)
		
		# internal_7 = ancestor of internal_7
		lw $t0, 420($sp)
		lw $t0, 4($t0)
		sw $t0, 420($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 420($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_2
		lw $t0, 452($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 420($sp) # internal_10 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8744937301489
		j foreach_start_8744937301489
		
		foreach_end_8744937301489:
		
		# initialize Array [internal_3]
		lw $t0, 436($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 400($sp) # internal_12 = new Array[internal_3]
		
		# initialize Array [internal_3]
		lw $t0, 436($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 396($sp) # internal_13 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 388($sp) # internal_15 = address of allocated object Int
		
		# internal_14 = direction of Bazz
		la $t0, type_Bazz
		sw $t0, 392($sp)
		
		# array internal_12[4 * internal_15] = internal_14
		lw $t0, 388($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 400($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 392($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_15] = internal_5
		lw $t0, 388($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 428($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 380($sp) # internal_17 = address of allocated object Int
		
		# internal_16 = direction of Razz
		la $t0, type_Razz
		sw $t0, 384($sp)
		
		# array internal_12[4 * internal_17] = internal_16
		lw $t0, 380($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 400($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 384($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_17] = internal_5
		lw $t0, 380($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 428($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 372($sp) # internal_19 = address of allocated object Int
		
		# internal_18 = direction of Foo
		la $t0, type_Foo
		sw $t0, 376($sp)
		
		# array internal_12[4 * internal_19] = internal_18
		lw $t0, 372($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 400($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 376($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_19] = internal_5
		lw $t0, 372($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 428($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 364($sp) # internal_21 = address of allocated object Int
		
		# internal_20 = direction of Bar
		la $t0, type_Bar
		sw $t0, 368($sp)
		
		# array internal_12[4 * internal_21] = internal_20
		lw $t0, 364($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 400($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 368($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_21] = internal_5
		lw $t0, 364($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 428($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 360($sp) # internal_22 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 356($sp) # internal_23 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 348($sp) # internal_25 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 344($sp) # internal_26 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 336($sp) # internal_28 = address of allocated object Int
		
		foreach_type_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 372($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_3
		lw $t0, 448($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 368($sp) # internal_23 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_23 then goto foreach_type_body_8744937301489
		lw $t0, 356($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8744937301489
		
		# Jumping to foreach_type_end_8744937301489
		j foreach_type_end_8744937301489
		
		foreach_type_body_8744937301489:
		
		# internal_24 = array internal_12[4 * internal_22]
		lw $t0, 360($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 400($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 352($sp) # internal_24 = array internal_12[4 * internal_22]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 360($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_1
		lw $t0, 456($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 360($sp) # internal_25 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 360($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_5
		lw $t0, 440($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 356($sp) # internal_26 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_26 then goto foreach_ancestor_body_8744937301489
		lw $t0, 344($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8744937301489
		
		# Jumping to foreach_ancestor_end_8744937301489
		j foreach_ancestor_end_8744937301489
		
		foreach_ancestor_body_8744937301489:
		
		# internal_27 = array internal_9[4 * internal_25]
		lw $t0, 348($sp) # $t0 = internal_25
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 412($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 340($sp) # internal_27 = array internal_9[4 * internal_25]
		
		# internal_28 = EqualAddress(internal_24, internal_27)
		lw $t0, 352($sp)
		lw $t1, 340($sp)
		seq $t2, $t0, $t1
		lw $t0, 336($sp)
		sw $t2, 8($t0)
		
		# If internal_28 then goto foreach_ancestor_end_8744937301489
		lw $t0, 336($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8744937301489
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 360($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_2
		lw $t0, 452($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 360($sp) # internal_25 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8744937301489
		j foreach_ancestor_start_8744937301489
		
		foreach_ancestor_end_8744937301489:
		
		# array internal_13[4 * internal_22] = internal_25
		lw $t0, 360($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 348($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 372($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_2
		lw $t0, 452($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 372($sp) # internal_22 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8744937301489
		j foreach_type_start_8744937301489
		
		foreach_type_end_8744937301489:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_34[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 312($sp) # internal_34 = "\n"
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_35[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 308($sp) # internal_35 = " "
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 332($sp) # internal_29 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 328($sp) # internal_30 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 324($sp) # internal_31 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 320($sp) # internal_32 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 316($sp) # internal_33 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 332($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 440($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 332($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 344($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_3
		lw $t0, 448($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 328($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto foreach_min_body_8744937301489
		lw $t0, 316($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8744937301489
		
		# Jumping to foreach_min_end_8744937301489
		j foreach_min_end_8744937301489
		
		foreach_min_body_8744937301489:
		
		# internal_31 = array internal_13[4 * internal_29]
		lw $t0, 332($sp) # $t0 = internal_29
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 324($sp) # internal_31 = array internal_13[4 * internal_29]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_31
		lw $t0, 336($sp)
		sw $t0, 4($sp) # Storing internal_31
		
		# Argument internal_32
		lw $t0, 332($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 328($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto update_min_8744937301489
		lw $t0, 316($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8744937301489
		
		# Jumping to update_min_end_8744937301489
		j update_min_end_8744937301489
		
		update_min_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 332($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_31
		lw $t0, 336($sp)
		sw $t0, 0($sp) # Storing internal_31
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 332($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_30
		lw $t0, 340($sp)
		sw $t0, 4($sp) # Storing internal_30
		
		# Argument internal_29
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing internal_29
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 340($sp) # internal_30 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 344($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_2
		lw $t0, 452($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 344($sp) # internal_29 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8744937301489
		j foreach_min_start_8744937301489
		
		foreach_min_end_8744937301489:
		
		# initialize Array [internal_3]
		lw $t0, 436($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 304($sp) # internal_36 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 300($sp) # internal_37 = address of allocated object Int
		
		# array internal_36[4 * internal_37] = internal_1
		lw $t0, 300($sp) # $t0 = internal_37
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 304($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 444($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 296($sp) # internal_38 = address of allocated object Int
		
		# array internal_36[4 * internal_38] = internal_1
		lw $t0, 296($sp) # $t0 = internal_38
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 304($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 444($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 292($sp) # internal_39 = address of allocated object Int
		
		# array internal_36[4 * internal_39] = internal_1
		lw $t0, 292($sp) # $t0 = internal_39
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 304($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 444($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 288($sp) # internal_40 = address of allocated object Int
		
		# array internal_36[4 * internal_40] = internal_1
		lw $t0, 288($sp) # $t0 = internal_40
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 304($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 444($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 284($sp) # internal_41 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 332($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 440($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 296($sp) # internal_41 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_41 then goto error_branch_8744937301489
		lw $t0, 284($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8744937301489
		
		# array internal_36[4 * internal_30] = internal_2
		lw $t0, 328($sp) # $t0 = internal_30
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 304($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 440($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 280($sp) # internal_42 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 276($sp) # internal_43 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_43]
		lw $t0, 276($sp) # $t0 = internal_43
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 304($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 280($sp) # internal_42 = array internal_36[4 * internal_43]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Bazz_8744937301489
		lw $t0, 280($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bazz_8744937301489
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 272($sp) # internal_44 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_44]
		lw $t0, 272($sp) # $t0 = internal_44
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 304($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 280($sp) # internal_42 = array internal_36[4 * internal_44]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Razz_8744937301489
		lw $t0, 280($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8744937301489
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 268($sp) # internal_45 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_45]
		lw $t0, 268($sp) # $t0 = internal_45
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 304($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 280($sp) # internal_42 = array internal_36[4 * internal_45]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Foo_8744937301489
		lw $t0, 280($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Foo_8744937301489
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 264($sp) # internal_46 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_46]
		lw $t0, 264($sp) # $t0 = internal_46
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 304($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 280($sp) # internal_42 = array internal_36[4 * internal_46]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Bar_8744937301489
		lw $t0, 280($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8744937301489
		
		branch_Bazz_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 464($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 268($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 252($sp) # internal_49 = address of allocated object Foo
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_49
		lw $t0, 260($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 260($sp) # internal_49 = result of function___init___at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 272($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument internal_49
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 272($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = internal_49
		lw $t0, 252($sp)
		sw $t0, 260($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		branch_Razz_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 464($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 268($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 244($sp) # internal_51 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_51
		lw $t0, 252($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 252($sp) # internal_51 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 272($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument internal_51
		lw $t0, 256($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 272($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = internal_51
		lw $t0, 244($sp)
		sw $t0, 260($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		branch_Foo_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 464($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 268($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 236($sp) # internal_53 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_53
		lw $t0, 244($sp)
		sw $t0, 0($sp) # Storing internal_53
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 244($sp) # internal_53 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 272($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument internal_53
		lw $t0, 248($sp)
		sw $t0, 0($sp) # Storing internal_53
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 272($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = internal_53
		lw $t0, 236($sp)
		sw $t0, 260($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		branch_Bar_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 464($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 268($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 272($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument n
		lw $t0, 268($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 272($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = n
		lw $t0, 256($sp)
		sw $t0, 260($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		error_branch_8744937301489:
		
		branch_end_8744937301489:
		
		# Set attribute g of self
		lw $t0, 452($sp) # $t0 = self
		lw $t1, 260($sp) # $t1 = internal_47
		beq $t1, $zero, object_set_attribute_8744937288328
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937288328
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937288328
		j object_set_attribute_8744937288328
		int_set_attribute_8744937288328:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_47
		j end_set_attribute_8744937288328
		bool_set_attribute_8744937288328:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_47
		j end_set_attribute_8744937288328
		object_set_attribute_8744937288328:
		sw $t1, 12($t0) # self.g = internal_47
		end_set_attribute_8744937288328:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 460($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_printh_at_Bazz
		jal function_printh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 236($sp) # internal_55 = result of function_printh_at_Bazz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute i of self
		lw $t0, 452($sp) # $t0 = self
		lw $t1, 228($sp) # $t1 = internal_55
		beq $t1, $zero, object_set_attribute_8744937288325
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937288325
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937288325
		j object_set_attribute_8744937288325
		int_set_attribute_8744937288325:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_55
		j end_set_attribute_8744937288325
		bool_set_attribute_8744937288325:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_55
		j end_set_attribute_8744937288325
		object_set_attribute_8744937288325:
		sw $t1, 16($t0) # self.i = internal_55
		end_set_attribute_8744937288325:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 224($sp) # internal_56 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 220($sp) # internal_57 = address of allocated object Int
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 216($sp) # internal_58 = address of allocated object Int
		
		# Allocating NUll to internal_59
		sw $zero, 212($sp) # internal_59 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_60 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 196($sp) # internal_63 = address of allocated object Int
		
		# internal_61 = typeof self that is the first word of the object
		lw $t0, 452($sp)
		lw $t0, 0($t0)
		sw $t0, 204($sp)
		
		# internal_62 = internal_61
		lw $t0, 204($sp)
		sw $t0, 200($sp)
		
		while_start_8744937325815:
		
		# internal_63 = EqualAddress(internal_62, internal_59)
		lw $t0, 200($sp)
		lw $t1, 212($sp)
		seq $t2, $t0, $t1
		lw $t0, 196($sp)
		sw $t2, 8($t0)
		
		# If internal_63 then goto while_end_8744937325815
		lw $t0, 196($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8744937325815
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_60
		lw $t0, 220($sp)
		sw $t0, 4($sp) # Storing internal_60
		
		# Argument internal_57
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 220($sp) # internal_60 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_62 = ancestor of internal_62
		lw $t0, 200($sp)
		lw $t0, 4($t0)
		sw $t0, 200($sp)
		
		# Jumping to while_start_8744937325815
		j while_start_8744937325815
		
		while_end_8744937325815:
		
		# internal_62 = internal_61
		lw $t0, 204($sp)
		sw $t0, 200($sp)
		
		# initialize Array [internal_60]
		lw $t0, 208($sp) # $t0 = internal_60
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 192($sp) # internal_64 = new Array[internal_60]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 188($sp) # internal_65 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 184($sp) # internal_66 = address of allocated object Int
		
		foreach_start_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_65
		lw $t0, 200($sp)
		sw $t0, 4($sp) # Storing internal_65
		
		# Argument internal_60
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 196($sp) # internal_66 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_66 then goto foreach_body_8744937325815
		lw $t0, 184($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8744937325815
		
		# Jumping to foreach_end_8744937325815
		j foreach_end_8744937325815
		
		foreach_body_8744937325815:
		
		# array internal_64[4 * internal_65] = internal_62
		lw $t0, 188($sp) # $t0 = internal_65
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 192($sp) # $t1 = internal_64
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 200($sp)
		sw $t0, 0($t1)
		
		# internal_62 = ancestor of internal_62
		lw $t0, 200($sp)
		lw $t0, 4($t0)
		sw $t0, 200($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_65
		lw $t0, 200($sp)
		sw $t0, 4($sp) # Storing internal_65
		
		# Argument internal_57
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 200($sp) # internal_65 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8744937325815
		j foreach_start_8744937325815
		
		foreach_end_8744937325815:
		
		# initialize Array [internal_58]
		lw $t0, 216($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 180($sp) # internal_67 = new Array[internal_58]
		
		# initialize Array [internal_58]
		lw $t0, 216($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 176($sp) # internal_68 = new Array[internal_58]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 168($sp) # internal_70 = address of allocated object Int
		
		# internal_69 = direction of Razz
		la $t0, type_Razz
		sw $t0, 172($sp)
		
		# array internal_67[4 * internal_70] = internal_69
		lw $t0, 168($sp) # $t0 = internal_70
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 172($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_70] = internal_60
		lw $t0, 168($sp) # $t0 = internal_70
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 176($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 160($sp) # internal_72 = address of allocated object Int
		
		# internal_71 = direction of Foo
		la $t0, type_Foo
		sw $t0, 164($sp)
		
		# array internal_67[4 * internal_72] = internal_71
		lw $t0, 160($sp) # $t0 = internal_72
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 164($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_72] = internal_60
		lw $t0, 160($sp) # $t0 = internal_72
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 176($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 152($sp) # internal_74 = address of allocated object Int
		
		# internal_73 = direction of Bar
		la $t0, type_Bar
		sw $t0, 156($sp)
		
		# array internal_67[4 * internal_74] = internal_73
		lw $t0, 152($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 156($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_74] = internal_60
		lw $t0, 152($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 176($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 148($sp) # internal_75 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_76 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_78 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_79 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 124($sp) # internal_81 = address of allocated object Int
		
		foreach_type_start_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_75
		lw $t0, 160($sp)
		sw $t0, 4($sp) # Storing internal_75
		
		# Argument internal_58
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 156($sp) # internal_76 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_76 then goto foreach_type_body_8744937325815
		lw $t0, 144($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8744937325815
		
		# Jumping to foreach_type_end_8744937325815
		j foreach_type_end_8744937325815
		
		foreach_type_body_8744937325815:
		
		# internal_77 = array internal_67[4 * internal_75]
		lw $t0, 148($sp) # $t0 = internal_75
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 140($sp) # internal_77 = array internal_67[4 * internal_75]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 148($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_56
		lw $t0, 236($sp)
		sw $t0, 0($sp) # Storing internal_56
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 148($sp) # internal_78 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 148($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_60
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 144($sp) # internal_79 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_79 then goto foreach_ancestor_body_8744937325815
		lw $t0, 132($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8744937325815
		
		# Jumping to foreach_ancestor_end_8744937325815
		j foreach_ancestor_end_8744937325815
		
		foreach_ancestor_body_8744937325815:
		
		# internal_80 = array internal_64[4 * internal_78]
		lw $t0, 136($sp) # $t0 = internal_78
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 192($sp) # $t1 = internal_64
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 128($sp) # internal_80 = array internal_64[4 * internal_78]
		
		# internal_81 = EqualAddress(internal_77, internal_80)
		lw $t0, 140($sp)
		lw $t1, 128($sp)
		seq $t2, $t0, $t1
		lw $t0, 124($sp)
		sw $t2, 8($t0)
		
		# If internal_81 then goto foreach_ancestor_end_8744937325815
		lw $t0, 124($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8744937325815
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 148($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_57
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 148($sp) # internal_78 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8744937325815
		j foreach_ancestor_start_8744937325815
		
		foreach_ancestor_end_8744937325815:
		
		# array internal_68[4 * internal_75] = internal_78
		lw $t0, 148($sp) # $t0 = internal_75
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 176($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 136($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_75
		lw $t0, 160($sp)
		sw $t0, 4($sp) # Storing internal_75
		
		# Argument internal_57
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 160($sp) # internal_75 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8744937325815
		j foreach_type_start_8744937325815
		
		foreach_type_end_8744937325815:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_87[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 100($sp) # internal_87 = "\n"
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_88[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 96($sp) # internal_88 = " "
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 120($sp) # internal_82 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 116($sp) # internal_83 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_84 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_85 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_86 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 120($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_60
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 120($sp) # internal_85 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_82
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_82
		
		# Argument internal_58
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 116($sp) # internal_86 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_86 then goto foreach_min_body_8744937325815
		lw $t0, 104($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8744937325815
		
		# Jumping to foreach_min_end_8744937325815
		j foreach_min_end_8744937325815
		
		foreach_min_body_8744937325815:
		
		# internal_84 = array internal_68[4 * internal_82]
		lw $t0, 120($sp) # $t0 = internal_82
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 176($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 112($sp) # internal_84 = array internal_68[4 * internal_82]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_84
		lw $t0, 124($sp)
		sw $t0, 4($sp) # Storing internal_84
		
		# Argument internal_85
		lw $t0, 120($sp)
		sw $t0, 0($sp) # Storing internal_85
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 116($sp) # internal_86 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_86 then goto update_min_8744937325815
		lw $t0, 104($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8744937325815
		
		# Jumping to update_min_end_8744937325815
		j update_min_end_8744937325815
		
		update_min_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 120($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_84
		lw $t0, 124($sp)
		sw $t0, 0($sp) # Storing internal_84
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 120($sp) # internal_85 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_83
		lw $t0, 128($sp)
		sw $t0, 4($sp) # Storing internal_83
		
		# Argument internal_82
		lw $t0, 132($sp)
		sw $t0, 0($sp) # Storing internal_82
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 128($sp) # internal_83 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_82
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_82
		
		# Argument internal_57
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_82 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8744937325815
		j foreach_min_start_8744937325815
		
		foreach_min_end_8744937325815:
		
		# initialize Array [internal_58]
		lw $t0, 216($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 92($sp) # internal_89 = new Array[internal_58]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_90 = address of allocated object Int
		
		# array internal_89[4 * internal_90] = internal_56
		lw $t0, 88($sp) # $t0 = internal_90
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 92($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 224($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_91 = address of allocated object Int
		
		# array internal_89[4 * internal_91] = internal_56
		lw $t0, 84($sp) # $t0 = internal_91
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 92($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 224($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_92 = address of allocated object Int
		
		# array internal_89[4 * internal_92] = internal_56
		lw $t0, 80($sp) # $t0 = internal_92
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 92($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 224($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 76($sp) # internal_93 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 120($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_60
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 88($sp) # internal_93 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_93 then goto error_branch_8744937325815
		lw $t0, 76($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8744937325815
		
		# array internal_89[4 * internal_83] = internal_57
		lw $t0, 116($sp) # $t0 = internal_83
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 92($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 220($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_94 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_95 = address of allocated object Int
		
		# internal_94 = array internal_89[4 * internal_95]
		lw $t0, 68($sp) # $t0 = internal_95
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 92($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 72($sp) # internal_94 = array internal_89[4 * internal_95]
		sw $t0, 8($t2)
		
		# If internal_94 then goto branch_Razz_8744937325815
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8744937325815
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_96 = address of allocated object Int
		
		# internal_94 = array internal_89[4 * internal_96]
		lw $t0, 64($sp) # $t0 = internal_96
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 92($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 72($sp) # internal_94 = array internal_89[4 * internal_96]
		sw $t0, 8($t2)
		
		# If internal_94 then goto branch_Foo_8744937325815
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Foo_8744937325815
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_97 = address of allocated object Int
		
		# internal_94 = array internal_89[4 * internal_97]
		lw $t0, 60($sp) # $t0 = internal_97
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 92($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 72($sp) # internal_94 = array internal_89[4 * internal_97]
		sw $t0, 8($t2)
		
		# If internal_94 then goto branch_Bar_8744937325815
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8744937325815
		
		branch_Razz_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 464($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 268($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 48($sp) # internal_100 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_100
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_100
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 56($sp) # internal_100 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_98
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing internal_98
		
		# Argument internal_100
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_100
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp) # internal_98 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_98 = internal_100
		lw $t0, 48($sp)
		sw $t0, 56($sp)
		
		# Jumping to branch_end_8744937325815
		j branch_end_8744937325815
		
		branch_Foo_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 464($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 268($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 40($sp) # internal_102 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_102
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_102
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 48($sp) # internal_102 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_98
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing internal_98
		
		# Argument internal_102
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_102
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp) # internal_98 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_98 = internal_102
		lw $t0, 40($sp)
		sw $t0, 56($sp)
		
		# Jumping to branch_end_8744937325815
		j branch_end_8744937325815
		
		branch_Bar_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 464($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 268($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_98
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing internal_98
		
		# Argument n
		lw $t0, 268($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp) # internal_98 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_98 = n
		lw $t0, 256($sp)
		sw $t0, 56($sp)
		
		# Jumping to branch_end_8744937325815
		j branch_end_8744937325815
		
		error_branch_8744937325815:
		
		branch_end_8744937325815:
		
		# Set attribute a of self
		lw $t0, 452($sp) # $t0 = self
		lw $t1, 56($sp) # $t1 = internal_98
		beq $t1, $zero, object_set_attribute_8744937293460
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937293460
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937293460
		j object_set_attribute_8744937293460
		int_set_attribute_8744937293460:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.a = internal_98
		j end_set_attribute_8744937293460
		bool_set_attribute_8744937293460:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.a = internal_98
		j end_set_attribute_8744937293460
		object_set_attribute_8744937293460:
		sw $t1, 20($t0) # self.a = internal_98
		end_set_attribute_8744937293460:
		
		# Get attribute a of self
		lw $t0, 452($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'a' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937293593
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937293593
		j object_get_attribute_8744937293593
		int_get_attribute_8744937293593:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp) # internal_104 = self.a
		j end_get_attribute_8744937293593
		bool_get_attribute_8744937293593:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp) # internal_104 = self.a
		j end_get_attribute_8744937293593
		object_get_attribute_8744937293593:
		sw $t1, 32($sp) # internal_104 = a
		end_get_attribute_8744937293593:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_104
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_104
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 36($sp) # internal_105 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute g of self
		lw $t0, 452($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'g' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937293623
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937293623
		j object_get_attribute_8744937293623
		int_get_attribute_8744937293623:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($sp) # internal_106 = self.g
		j end_get_attribute_8744937293623
		bool_get_attribute_8744937293623:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($sp) # internal_106 = self.g
		j end_get_attribute_8744937293623
		object_get_attribute_8744937293623:
		sw $t1, 24($sp) # internal_106 = g
		end_get_attribute_8744937293623:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_106
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_106
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 28($sp) # internal_107 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_105
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_105
		
		# Argument internal_107
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_107
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_108 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 460($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_109 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_108
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing internal_108
		
		# Argument internal_109
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_109
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_110 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 460($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_printh_at_Bazz
		jal function_printh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 12($sp) # internal_111 = result of function_printh_at_Bazz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_110
		lw $t0, 20($sp)
		sw $t0, 4($sp) # Storing internal_110
		
		# Argument internal_111
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_111
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_112 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute b of self
		lw $t0, 452($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_112
		beq $t1, $zero, object_set_attribute_8744937263321
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937263321
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937263321
		j object_set_attribute_8744937263321
		int_set_attribute_8744937263321:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.b = internal_112
		j end_set_attribute_8744937263321
		bool_set_attribute_8744937263321:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.b = internal_112
		j end_set_attribute_8744937263321
		object_set_attribute_8744937263321:
		sw $t1, 24($t0) # self.b = internal_112
		end_set_attribute_8744937263321:
		
		# Loading return value in $v1
		lw $v1, 452($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 452
		
		jr $ra
		
	function_doh_at_Foo:
		# Function parameters
		#   $ra = 24($sp)
		#   self = 20($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -20
		
		# Get attribute h of self
		lw $t0, 20($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'h' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937293752
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937293752
		j object_get_attribute_8744937293752
		int_get_attribute_8744937293752:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp) # internal_1 = self.h
		j end_get_attribute_8744937293752
		bool_get_attribute_8744937293752:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp) # internal_1 = self.h
		j end_get_attribute_8744937293752
		object_get_attribute_8744937293752:
		sw $t1, 12($sp) # internal_1 = h
		end_get_attribute_8744937293752:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_1
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 28($sp) # i = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute h of self
		lw $t0, 20($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'h' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937293818
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937293818
		j object_get_attribute_8744937293818
		int_get_attribute_8744937293818:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($sp) # internal_2 = self.h
		j end_get_attribute_8744937293818
		bool_get_attribute_8744937293818:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($sp) # internal_2 = self.h
		j end_get_attribute_8744937293818
		object_get_attribute_8744937293818:
		sw $t1, 8($sp) # internal_2 = h
		end_get_attribute_8744937293818:
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 20($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_3
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_4 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute h of self
		lw $t0, 20($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_4
		beq $t1, $zero, object_set_attribute_8744937293794
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937293794
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937293794
		j object_set_attribute_8744937293794
		int_set_attribute_8744937293794:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_4
		j end_set_attribute_8744937293794
		bool_set_attribute_8744937293794:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_4
		j end_set_attribute_8744937293794
		object_set_attribute_8744937293794:
		sw $t1, 8($t0) # self.h = internal_4
		end_set_attribute_8744937293794:
		
		# Loading return value in $v1
		lw $v1, 16($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 20
		
		jr $ra
		
	function___init___at_Bar:
		# Function parameters
		#   $ra = 680($sp)
		#   self = 676($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -676
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 672($sp) # internal_0 = address of allocated object Int
		
		# Set attribute h of self
		lw $t0, 676($sp) # $t0 = self
		lw $t1, 672($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8744937263918
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937263918
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937263918
		j object_set_attribute_8744937263918
		int_set_attribute_8744937263918:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8744937263918
		bool_set_attribute_8744937263918:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8744937263918
		object_set_attribute_8744937263918:
		sw $t1, 8($t0) # self.h = internal_0
		end_set_attribute_8744937263918:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 668($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 664($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 660($sp) # internal_3 = address of allocated object Int
		
		# Allocating NUll to internal_4
		sw $zero, 656($sp) # internal_4 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 652($sp) # internal_5 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 640($sp) # internal_8 = address of allocated object Int
		
		# internal_6 = typeof self that is the first word of the object
		lw $t0, 676($sp)
		lw $t0, 0($t0)
		sw $t0, 648($sp)
		
		# internal_7 = internal_6
		lw $t0, 648($sp)
		sw $t0, 644($sp)
		
		while_start_8744937301489:
		
		# internal_8 = EqualAddress(internal_7, internal_4)
		lw $t0, 644($sp)
		lw $t1, 656($sp)
		seq $t2, $t0, $t1
		lw $t0, 640($sp)
		sw $t2, 8($t0)
		
		# If internal_8 then goto while_end_8744937301489
		lw $t0, 640($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8744937301489
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_5
		lw $t0, 664($sp)
		sw $t0, 4($sp) # Storing internal_5
		
		# Argument internal_2
		lw $t0, 676($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 664($sp) # internal_5 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_7 = ancestor of internal_7
		lw $t0, 644($sp)
		lw $t0, 4($t0)
		sw $t0, 644($sp)
		
		# Jumping to while_start_8744937301489
		j while_start_8744937301489
		
		while_end_8744937301489:
		
		# internal_7 = internal_6
		lw $t0, 648($sp)
		sw $t0, 644($sp)
		
		# initialize Array [internal_5]
		lw $t0, 652($sp) # $t0 = internal_5
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 636($sp) # internal_9 = new Array[internal_5]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 632($sp) # internal_10 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 628($sp) # internal_11 = address of allocated object Int
		
		foreach_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 644($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_5
		lw $t0, 664($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 640($sp) # internal_11 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_11 then goto foreach_body_8744937301489
		lw $t0, 628($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8744937301489
		
		# Jumping to foreach_end_8744937301489
		j foreach_end_8744937301489
		
		foreach_body_8744937301489:
		
		# array internal_9[4 * internal_10] = internal_7
		lw $t0, 632($sp) # $t0 = internal_10
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 636($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 644($sp)
		sw $t0, 0($t1)
		
		# internal_7 = ancestor of internal_7
		lw $t0, 644($sp)
		lw $t0, 4($t0)
		sw $t0, 644($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 644($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_2
		lw $t0, 676($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 644($sp) # internal_10 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8744937301489
		j foreach_start_8744937301489
		
		foreach_end_8744937301489:
		
		# initialize Array [internal_3]
		lw $t0, 660($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 624($sp) # internal_12 = new Array[internal_3]
		
		# initialize Array [internal_3]
		lw $t0, 660($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 620($sp) # internal_13 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 612($sp) # internal_15 = address of allocated object Int
		
		# internal_14 = direction of Bazz
		la $t0, type_Bazz
		sw $t0, 616($sp)
		
		# array internal_12[4 * internal_15] = internal_14
		lw $t0, 612($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 624($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 616($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_15] = internal_5
		lw $t0, 612($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 620($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 652($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 604($sp) # internal_17 = address of allocated object Int
		
		# internal_16 = direction of Razz
		la $t0, type_Razz
		sw $t0, 608($sp)
		
		# array internal_12[4 * internal_17] = internal_16
		lw $t0, 604($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 624($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 608($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_17] = internal_5
		lw $t0, 604($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 620($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 652($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 596($sp) # internal_19 = address of allocated object Int
		
		# internal_18 = direction of Foo
		la $t0, type_Foo
		sw $t0, 600($sp)
		
		# array internal_12[4 * internal_19] = internal_18
		lw $t0, 596($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 624($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 600($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_19] = internal_5
		lw $t0, 596($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 620($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 652($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 588($sp) # internal_21 = address of allocated object Int
		
		# internal_20 = direction of Bar
		la $t0, type_Bar
		sw $t0, 592($sp)
		
		# array internal_12[4 * internal_21] = internal_20
		lw $t0, 588($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 624($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 592($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_21] = internal_5
		lw $t0, 588($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 620($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 652($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 584($sp) # internal_22 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 580($sp) # internal_23 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 572($sp) # internal_25 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 568($sp) # internal_26 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 560($sp) # internal_28 = address of allocated object Int
		
		foreach_type_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 596($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_3
		lw $t0, 672($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 592($sp) # internal_23 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_23 then goto foreach_type_body_8744937301489
		lw $t0, 580($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8744937301489
		
		# Jumping to foreach_type_end_8744937301489
		j foreach_type_end_8744937301489
		
		foreach_type_body_8744937301489:
		
		# internal_24 = array internal_12[4 * internal_22]
		lw $t0, 584($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 624($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 576($sp) # internal_24 = array internal_12[4 * internal_22]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 584($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_1
		lw $t0, 680($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 584($sp) # internal_25 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 584($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_5
		lw $t0, 664($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 580($sp) # internal_26 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_26 then goto foreach_ancestor_body_8744937301489
		lw $t0, 568($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8744937301489
		
		# Jumping to foreach_ancestor_end_8744937301489
		j foreach_ancestor_end_8744937301489
		
		foreach_ancestor_body_8744937301489:
		
		# internal_27 = array internal_9[4 * internal_25]
		lw $t0, 572($sp) # $t0 = internal_25
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 636($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 564($sp) # internal_27 = array internal_9[4 * internal_25]
		
		# internal_28 = EqualAddress(internal_24, internal_27)
		lw $t0, 576($sp)
		lw $t1, 564($sp)
		seq $t2, $t0, $t1
		lw $t0, 560($sp)
		sw $t2, 8($t0)
		
		# If internal_28 then goto foreach_ancestor_end_8744937301489
		lw $t0, 560($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8744937301489
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 584($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_2
		lw $t0, 676($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 584($sp) # internal_25 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8744937301489
		j foreach_ancestor_start_8744937301489
		
		foreach_ancestor_end_8744937301489:
		
		# array internal_13[4 * internal_22] = internal_25
		lw $t0, 584($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 620($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 572($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 596($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_2
		lw $t0, 676($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 596($sp) # internal_22 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8744937301489
		j foreach_type_start_8744937301489
		
		foreach_type_end_8744937301489:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_34[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 536($sp) # internal_34 = "\n"
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_35[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 532($sp) # internal_35 = " "
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 556($sp) # internal_29 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 552($sp) # internal_30 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 548($sp) # internal_31 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 544($sp) # internal_32 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 540($sp) # internal_33 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 556($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 664($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 556($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 568($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_3
		lw $t0, 672($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 552($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto foreach_min_body_8744937301489
		lw $t0, 540($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8744937301489
		
		# Jumping to foreach_min_end_8744937301489
		j foreach_min_end_8744937301489
		
		foreach_min_body_8744937301489:
		
		# internal_31 = array internal_13[4 * internal_29]
		lw $t0, 556($sp) # $t0 = internal_29
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 620($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 548($sp) # internal_31 = array internal_13[4 * internal_29]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_31
		lw $t0, 560($sp)
		sw $t0, 4($sp) # Storing internal_31
		
		# Argument internal_32
		lw $t0, 556($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 552($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto update_min_8744937301489
		lw $t0, 540($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8744937301489
		
		# Jumping to update_min_end_8744937301489
		j update_min_end_8744937301489
		
		update_min_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 556($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_31
		lw $t0, 560($sp)
		sw $t0, 0($sp) # Storing internal_31
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 556($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_30
		lw $t0, 564($sp)
		sw $t0, 4($sp) # Storing internal_30
		
		# Argument internal_29
		lw $t0, 568($sp)
		sw $t0, 0($sp) # Storing internal_29
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 564($sp) # internal_30 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 568($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_2
		lw $t0, 676($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 568($sp) # internal_29 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8744937301489
		j foreach_min_start_8744937301489
		
		foreach_min_end_8744937301489:
		
		# initialize Array [internal_3]
		lw $t0, 660($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 528($sp) # internal_36 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 524($sp) # internal_37 = address of allocated object Int
		
		# array internal_36[4 * internal_37] = internal_1
		lw $t0, 524($sp) # $t0 = internal_37
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 528($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 668($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 520($sp) # internal_38 = address of allocated object Int
		
		# array internal_36[4 * internal_38] = internal_1
		lw $t0, 520($sp) # $t0 = internal_38
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 528($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 668($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 516($sp) # internal_39 = address of allocated object Int
		
		# array internal_36[4 * internal_39] = internal_1
		lw $t0, 516($sp) # $t0 = internal_39
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 528($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 668($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 512($sp) # internal_40 = address of allocated object Int
		
		# array internal_36[4 * internal_40] = internal_1
		lw $t0, 512($sp) # $t0 = internal_40
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 528($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 668($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 508($sp) # internal_41 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 556($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 664($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 520($sp) # internal_41 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_41 then goto error_branch_8744937301489
		lw $t0, 508($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8744937301489
		
		# array internal_36[4 * internal_30] = internal_2
		lw $t0, 552($sp) # $t0 = internal_30
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 528($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 664($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 504($sp) # internal_42 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 500($sp) # internal_43 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_43]
		lw $t0, 500($sp) # $t0 = internal_43
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 528($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 504($sp) # internal_42 = array internal_36[4 * internal_43]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Bazz_8744937301489
		lw $t0, 504($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bazz_8744937301489
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 496($sp) # internal_44 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_44]
		lw $t0, 496($sp) # $t0 = internal_44
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 528($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 504($sp) # internal_42 = array internal_36[4 * internal_44]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Razz_8744937301489
		lw $t0, 504($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8744937301489
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 492($sp) # internal_45 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_45]
		lw $t0, 492($sp) # $t0 = internal_45
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 528($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 504($sp) # internal_42 = array internal_36[4 * internal_45]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Foo_8744937301489
		lw $t0, 504($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Foo_8744937301489
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 488($sp) # internal_46 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_46]
		lw $t0, 488($sp) # $t0 = internal_46
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 528($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 504($sp) # internal_42 = array internal_36[4 * internal_46]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Bar_8744937301489
		lw $t0, 504($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8744937301489
		
		branch_Bazz_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 492($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 688($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 492($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 476($sp) # internal_49 = address of allocated object Foo
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_49
		lw $t0, 484($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 484($sp) # internal_49 = result of function___init___at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 496($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument internal_49
		lw $t0, 488($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 496($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = internal_49
		lw $t0, 476($sp)
		sw $t0, 484($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		branch_Razz_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 492($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 688($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 492($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 468($sp) # internal_51 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_51
		lw $t0, 476($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 476($sp) # internal_51 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 496($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument internal_51
		lw $t0, 480($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 496($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = internal_51
		lw $t0, 468($sp)
		sw $t0, 484($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		branch_Foo_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 492($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 688($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 492($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 460($sp) # internal_53 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_53
		lw $t0, 468($sp)
		sw $t0, 0($sp) # Storing internal_53
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 468($sp) # internal_53 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 496($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument internal_53
		lw $t0, 472($sp)
		sw $t0, 0($sp) # Storing internal_53
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 496($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = internal_53
		lw $t0, 460($sp)
		sw $t0, 484($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		branch_Bar_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 492($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 688($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 492($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 496($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument n
		lw $t0, 492($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 496($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = n
		lw $t0, 480($sp)
		sw $t0, 484($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		error_branch_8744937301489:
		
		branch_end_8744937301489:
		
		# Set attribute g of self
		lw $t0, 676($sp) # $t0 = self
		lw $t1, 484($sp) # $t1 = internal_47
		beq $t1, $zero, object_set_attribute_8744937263936
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937263936
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937263936
		j object_set_attribute_8744937263936
		int_set_attribute_8744937263936:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_47
		j end_set_attribute_8744937263936
		bool_set_attribute_8744937263936:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_47
		j end_set_attribute_8744937263936
		object_set_attribute_8744937263936:
		sw $t1, 12($t0) # self.g = internal_47
		end_set_attribute_8744937263936:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 684($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_printh_at_Bazz
		jal function_printh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 460($sp) # internal_55 = result of function_printh_at_Bazz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute i of self
		lw $t0, 676($sp) # $t0 = self
		lw $t1, 452($sp) # $t1 = internal_55
		beq $t1, $zero, object_set_attribute_8744937263939
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937263939
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937263939
		j object_set_attribute_8744937263939
		int_set_attribute_8744937263939:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_55
		j end_set_attribute_8744937263939
		bool_set_attribute_8744937263939:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_55
		j end_set_attribute_8744937263939
		object_set_attribute_8744937263939:
		sw $t1, 16($t0) # self.i = internal_55
		end_set_attribute_8744937263939:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 448($sp) # internal_56 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 444($sp) # internal_57 = address of allocated object Int
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 440($sp) # internal_58 = address of allocated object Int
		
		# Allocating NUll to internal_59
		sw $zero, 436($sp) # internal_59 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 432($sp) # internal_60 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 420($sp) # internal_63 = address of allocated object Int
		
		# internal_61 = typeof self that is the first word of the object
		lw $t0, 676($sp)
		lw $t0, 0($t0)
		sw $t0, 428($sp)
		
		# internal_62 = internal_61
		lw $t0, 428($sp)
		sw $t0, 424($sp)
		
		while_start_8744937325815:
		
		# internal_63 = EqualAddress(internal_62, internal_59)
		lw $t0, 424($sp)
		lw $t1, 436($sp)
		seq $t2, $t0, $t1
		lw $t0, 420($sp)
		sw $t2, 8($t0)
		
		# If internal_63 then goto while_end_8744937325815
		lw $t0, 420($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8744937325815
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_60
		lw $t0, 444($sp)
		sw $t0, 4($sp) # Storing internal_60
		
		# Argument internal_57
		lw $t0, 456($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 444($sp) # internal_60 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_62 = ancestor of internal_62
		lw $t0, 424($sp)
		lw $t0, 4($t0)
		sw $t0, 424($sp)
		
		# Jumping to while_start_8744937325815
		j while_start_8744937325815
		
		while_end_8744937325815:
		
		# internal_62 = internal_61
		lw $t0, 428($sp)
		sw $t0, 424($sp)
		
		# initialize Array [internal_60]
		lw $t0, 432($sp) # $t0 = internal_60
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 416($sp) # internal_64 = new Array[internal_60]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 412($sp) # internal_65 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 408($sp) # internal_66 = address of allocated object Int
		
		foreach_start_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_65
		lw $t0, 424($sp)
		sw $t0, 4($sp) # Storing internal_65
		
		# Argument internal_60
		lw $t0, 444($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 420($sp) # internal_66 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_66 then goto foreach_body_8744937325815
		lw $t0, 408($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8744937325815
		
		# Jumping to foreach_end_8744937325815
		j foreach_end_8744937325815
		
		foreach_body_8744937325815:
		
		# array internal_64[4 * internal_65] = internal_62
		lw $t0, 412($sp) # $t0 = internal_65
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 416($sp) # $t1 = internal_64
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 424($sp)
		sw $t0, 0($t1)
		
		# internal_62 = ancestor of internal_62
		lw $t0, 424($sp)
		lw $t0, 4($t0)
		sw $t0, 424($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_65
		lw $t0, 424($sp)
		sw $t0, 4($sp) # Storing internal_65
		
		# Argument internal_57
		lw $t0, 456($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 424($sp) # internal_65 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8744937325815
		j foreach_start_8744937325815
		
		foreach_end_8744937325815:
		
		# initialize Array [internal_58]
		lw $t0, 440($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 404($sp) # internal_67 = new Array[internal_58]
		
		# initialize Array [internal_58]
		lw $t0, 440($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 400($sp) # internal_68 = new Array[internal_58]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 392($sp) # internal_70 = address of allocated object Int
		
		# internal_69 = direction of Razz
		la $t0, type_Razz
		sw $t0, 396($sp)
		
		# array internal_67[4 * internal_70] = internal_69
		lw $t0, 392($sp) # $t0 = internal_70
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 404($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 396($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_70] = internal_60
		lw $t0, 392($sp) # $t0 = internal_70
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 400($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 432($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 384($sp) # internal_72 = address of allocated object Int
		
		# internal_71 = direction of Foo
		la $t0, type_Foo
		sw $t0, 388($sp)
		
		# array internal_67[4 * internal_72] = internal_71
		lw $t0, 384($sp) # $t0 = internal_72
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 404($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 388($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_72] = internal_60
		lw $t0, 384($sp) # $t0 = internal_72
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 400($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 432($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 376($sp) # internal_74 = address of allocated object Int
		
		# internal_73 = direction of Bar
		la $t0, type_Bar
		sw $t0, 380($sp)
		
		# array internal_67[4 * internal_74] = internal_73
		lw $t0, 376($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 404($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 380($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_74] = internal_60
		lw $t0, 376($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 400($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 432($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 372($sp) # internal_75 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 368($sp) # internal_76 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 360($sp) # internal_78 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 356($sp) # internal_79 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 348($sp) # internal_81 = address of allocated object Int
		
		foreach_type_start_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_75
		lw $t0, 384($sp)
		sw $t0, 4($sp) # Storing internal_75
		
		# Argument internal_58
		lw $t0, 452($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 380($sp) # internal_76 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_76 then goto foreach_type_body_8744937325815
		lw $t0, 368($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8744937325815
		
		# Jumping to foreach_type_end_8744937325815
		j foreach_type_end_8744937325815
		
		foreach_type_body_8744937325815:
		
		# internal_77 = array internal_67[4 * internal_75]
		lw $t0, 372($sp) # $t0 = internal_75
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 404($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 364($sp) # internal_77 = array internal_67[4 * internal_75]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 372($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_56
		lw $t0, 460($sp)
		sw $t0, 0($sp) # Storing internal_56
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 372($sp) # internal_78 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 372($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_60
		lw $t0, 444($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 368($sp) # internal_79 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_79 then goto foreach_ancestor_body_8744937325815
		lw $t0, 356($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8744937325815
		
		# Jumping to foreach_ancestor_end_8744937325815
		j foreach_ancestor_end_8744937325815
		
		foreach_ancestor_body_8744937325815:
		
		# internal_80 = array internal_64[4 * internal_78]
		lw $t0, 360($sp) # $t0 = internal_78
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 416($sp) # $t1 = internal_64
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 352($sp) # internal_80 = array internal_64[4 * internal_78]
		
		# internal_81 = EqualAddress(internal_77, internal_80)
		lw $t0, 364($sp)
		lw $t1, 352($sp)
		seq $t2, $t0, $t1
		lw $t0, 348($sp)
		sw $t2, 8($t0)
		
		# If internal_81 then goto foreach_ancestor_end_8744937325815
		lw $t0, 348($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8744937325815
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 372($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_57
		lw $t0, 456($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 372($sp) # internal_78 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8744937325815
		j foreach_ancestor_start_8744937325815
		
		foreach_ancestor_end_8744937325815:
		
		# array internal_68[4 * internal_75] = internal_78
		lw $t0, 372($sp) # $t0 = internal_75
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 400($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 360($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_75
		lw $t0, 384($sp)
		sw $t0, 4($sp) # Storing internal_75
		
		# Argument internal_57
		lw $t0, 456($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 384($sp) # internal_75 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8744937325815
		j foreach_type_start_8744937325815
		
		foreach_type_end_8744937325815:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_87[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 324($sp) # internal_87 = "\n"
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_88[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 320($sp) # internal_88 = " "
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 344($sp) # internal_82 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 340($sp) # internal_83 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 336($sp) # internal_84 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 332($sp) # internal_85 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 328($sp) # internal_86 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 344($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_60
		lw $t0, 444($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 344($sp) # internal_85 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_82
		lw $t0, 356($sp)
		sw $t0, 4($sp) # Storing internal_82
		
		# Argument internal_58
		lw $t0, 452($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 340($sp) # internal_86 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_86 then goto foreach_min_body_8744937325815
		lw $t0, 328($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8744937325815
		
		# Jumping to foreach_min_end_8744937325815
		j foreach_min_end_8744937325815
		
		foreach_min_body_8744937325815:
		
		# internal_84 = array internal_68[4 * internal_82]
		lw $t0, 344($sp) # $t0 = internal_82
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 400($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 336($sp) # internal_84 = array internal_68[4 * internal_82]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_84
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing internal_84
		
		# Argument internal_85
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing internal_85
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 340($sp) # internal_86 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_86 then goto update_min_8744937325815
		lw $t0, 328($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8744937325815
		
		# Jumping to update_min_end_8744937325815
		j update_min_end_8744937325815
		
		update_min_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 344($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_84
		lw $t0, 348($sp)
		sw $t0, 0($sp) # Storing internal_84
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 344($sp) # internal_85 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_83
		lw $t0, 352($sp)
		sw $t0, 4($sp) # Storing internal_83
		
		# Argument internal_82
		lw $t0, 356($sp)
		sw $t0, 0($sp) # Storing internal_82
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 352($sp) # internal_83 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_82
		lw $t0, 356($sp)
		sw $t0, 4($sp) # Storing internal_82
		
		# Argument internal_57
		lw $t0, 456($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 356($sp) # internal_82 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8744937325815
		j foreach_min_start_8744937325815
		
		foreach_min_end_8744937325815:
		
		# initialize Array [internal_58]
		lw $t0, 440($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 316($sp) # internal_89 = new Array[internal_58]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 312($sp) # internal_90 = address of allocated object Int
		
		# array internal_89[4 * internal_90] = internal_56
		lw $t0, 312($sp) # $t0 = internal_90
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 316($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 448($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 308($sp) # internal_91 = address of allocated object Int
		
		# array internal_89[4 * internal_91] = internal_56
		lw $t0, 308($sp) # $t0 = internal_91
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 316($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 448($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 304($sp) # internal_92 = address of allocated object Int
		
		# array internal_89[4 * internal_92] = internal_56
		lw $t0, 304($sp) # $t0 = internal_92
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 316($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 448($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 300($sp) # internal_93 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 344($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_60
		lw $t0, 444($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 312($sp) # internal_93 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_93 then goto error_branch_8744937325815
		lw $t0, 300($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8744937325815
		
		# array internal_89[4 * internal_83] = internal_57
		lw $t0, 340($sp) # $t0 = internal_83
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 316($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 444($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 296($sp) # internal_94 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 292($sp) # internal_95 = address of allocated object Int
		
		# internal_94 = array internal_89[4 * internal_95]
		lw $t0, 292($sp) # $t0 = internal_95
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 316($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 296($sp) # internal_94 = array internal_89[4 * internal_95]
		sw $t0, 8($t2)
		
		# If internal_94 then goto branch_Razz_8744937325815
		lw $t0, 296($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8744937325815
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 288($sp) # internal_96 = address of allocated object Int
		
		# internal_94 = array internal_89[4 * internal_96]
		lw $t0, 288($sp) # $t0 = internal_96
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 316($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 296($sp) # internal_94 = array internal_89[4 * internal_96]
		sw $t0, 8($t2)
		
		# If internal_94 then goto branch_Foo_8744937325815
		lw $t0, 296($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Foo_8744937325815
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 284($sp) # internal_97 = address of allocated object Int
		
		# internal_94 = array internal_89[4 * internal_97]
		lw $t0, 284($sp) # $t0 = internal_97
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 316($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 296($sp) # internal_94 = array internal_89[4 * internal_97]
		sw $t0, 8($t2)
		
		# If internal_94 then goto branch_Bar_8744937325815
		lw $t0, 296($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8744937325815
		
		branch_Razz_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 492($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 688($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 492($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 272($sp) # internal_100 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_100
		lw $t0, 280($sp)
		sw $t0, 0($sp) # Storing internal_100
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 280($sp) # internal_100 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_98
		lw $t0, 292($sp)
		sw $t0, 4($sp) # Storing internal_98
		
		# Argument internal_100
		lw $t0, 284($sp)
		sw $t0, 0($sp) # Storing internal_100
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 292($sp) # internal_98 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_98 = internal_100
		lw $t0, 272($sp)
		sw $t0, 280($sp)
		
		# Jumping to branch_end_8744937325815
		j branch_end_8744937325815
		
		branch_Foo_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 492($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 688($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 492($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 264($sp) # internal_102 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_102
		lw $t0, 272($sp)
		sw $t0, 0($sp) # Storing internal_102
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 272($sp) # internal_102 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_98
		lw $t0, 292($sp)
		sw $t0, 4($sp) # Storing internal_98
		
		# Argument internal_102
		lw $t0, 276($sp)
		sw $t0, 0($sp) # Storing internal_102
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 292($sp) # internal_98 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_98 = internal_102
		lw $t0, 264($sp)
		sw $t0, 280($sp)
		
		# Jumping to branch_end_8744937325815
		j branch_end_8744937325815
		
		branch_Bar_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 492($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 688($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 492($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_98
		lw $t0, 292($sp)
		sw $t0, 4($sp) # Storing internal_98
		
		# Argument n
		lw $t0, 492($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 292($sp) # internal_98 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_98 = n
		lw $t0, 480($sp)
		sw $t0, 280($sp)
		
		# Jumping to branch_end_8744937325815
		j branch_end_8744937325815
		
		error_branch_8744937325815:
		
		branch_end_8744937325815:
		
		# Set attribute a of self
		lw $t0, 676($sp) # $t0 = self
		lw $t1, 280($sp) # $t1 = internal_98
		beq $t1, $zero, object_set_attribute_8744937268044
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937268044
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937268044
		j object_set_attribute_8744937268044
		int_set_attribute_8744937268044:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.a = internal_98
		j end_set_attribute_8744937268044
		bool_set_attribute_8744937268044:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.a = internal_98
		j end_set_attribute_8744937268044
		object_set_attribute_8744937268044:
		sw $t1, 20($t0) # self.a = internal_98
		end_set_attribute_8744937268044:
		
		# Get attribute a of self
		lw $t0, 676($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'a' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937271248
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937271248
		j object_get_attribute_8744937271248
		int_get_attribute_8744937271248:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 256($sp) # internal_104 = self.a
		j end_get_attribute_8744937271248
		bool_get_attribute_8744937271248:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 256($sp) # internal_104 = self.a
		j end_get_attribute_8744937271248
		object_get_attribute_8744937271248:
		sw $t1, 256($sp) # internal_104 = a
		end_get_attribute_8744937271248:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_104
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing internal_104
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 260($sp) # internal_105 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute g of self
		lw $t0, 676($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'g' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937271278
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937271278
		j object_get_attribute_8744937271278
		int_get_attribute_8744937271278:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 248($sp) # internal_106 = self.g
		j end_get_attribute_8744937271278
		bool_get_attribute_8744937271278:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 248($sp) # internal_106 = self.g
		j end_get_attribute_8744937271278
		object_get_attribute_8744937271278:
		sw $t1, 248($sp) # internal_106 = g
		end_get_attribute_8744937271278:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_106
		lw $t0, 256($sp)
		sw $t0, 0($sp) # Storing internal_106
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 252($sp) # internal_107 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_105
		lw $t0, 264($sp)
		sw $t0, 4($sp) # Storing internal_105
		
		# Argument internal_107
		lw $t0, 256($sp)
		sw $t0, 0($sp) # Storing internal_107
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 252($sp) # internal_108 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 684($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 244($sp) # internal_109 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_108
		lw $t0, 252($sp)
		sw $t0, 4($sp) # Storing internal_108
		
		# Argument internal_109
		lw $t0, 248($sp)
		sw $t0, 0($sp) # Storing internal_109
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 244($sp) # internal_110 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 684($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_printh_at_Bazz
		jal function_printh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 236($sp) # internal_111 = result of function_printh_at_Bazz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_110
		lw $t0, 244($sp)
		sw $t0, 4($sp) # Storing internal_110
		
		# Argument internal_111
		lw $t0, 240($sp)
		sw $t0, 0($sp) # Storing internal_111
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 236($sp) # internal_112 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute b of self
		lw $t0, 676($sp) # $t0 = self
		lw $t1, 224($sp) # $t1 = internal_112
		beq $t1, $zero, object_set_attribute_8744937271188
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937271188
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937271188
		j object_set_attribute_8744937271188
		int_set_attribute_8744937271188:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.b = internal_112
		j end_set_attribute_8744937271188
		bool_set_attribute_8744937271188:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.b = internal_112
		j end_set_attribute_8744937271188
		object_set_attribute_8744937271188:
		sw $t1, 24($t0) # self.b = internal_112
		end_set_attribute_8744937271188:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 220($sp) # internal_113 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 216($sp) # internal_114 = address of allocated object Int
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 212($sp) # internal_115 = address of allocated object Int
		
		# Allocating NUll to internal_116
		sw $zero, 208($sp) # internal_116 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 204($sp) # internal_117 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 192($sp) # internal_120 = address of allocated object Int
		
		# internal_118 = typeof self that is the first word of the object
		lw $t0, 676($sp)
		lw $t0, 0($t0)
		sw $t0, 200($sp)
		
		# internal_119 = internal_118
		lw $t0, 200($sp)
		sw $t0, 196($sp)
		
		while_start_8744937301390:
		
		# internal_120 = EqualAddress(internal_119, internal_116)
		lw $t0, 196($sp)
		lw $t1, 208($sp)
		seq $t2, $t0, $t1
		lw $t0, 192($sp)
		sw $t2, 8($t0)
		
		# If internal_120 then goto while_end_8744937301390
		lw $t0, 192($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8744937301390
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_117
		lw $t0, 216($sp)
		sw $t0, 4($sp) # Storing internal_117
		
		# Argument internal_114
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing internal_114
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 216($sp) # internal_117 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_119 = ancestor of internal_119
		lw $t0, 196($sp)
		lw $t0, 4($t0)
		sw $t0, 196($sp)
		
		# Jumping to while_start_8744937301390
		j while_start_8744937301390
		
		while_end_8744937301390:
		
		# internal_119 = internal_118
		lw $t0, 200($sp)
		sw $t0, 196($sp)
		
		# initialize Array [internal_117]
		lw $t0, 204($sp) # $t0 = internal_117
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 188($sp) # internal_121 = new Array[internal_117]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 184($sp) # internal_122 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 180($sp) # internal_123 = address of allocated object Int
		
		foreach_start_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_122
		lw $t0, 196($sp)
		sw $t0, 4($sp) # Storing internal_122
		
		# Argument internal_117
		lw $t0, 216($sp)
		sw $t0, 0($sp) # Storing internal_117
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 192($sp) # internal_123 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_123 then goto foreach_body_8744937301390
		lw $t0, 180($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8744937301390
		
		# Jumping to foreach_end_8744937301390
		j foreach_end_8744937301390
		
		foreach_body_8744937301390:
		
		# array internal_121[4 * internal_122] = internal_119
		lw $t0, 184($sp) # $t0 = internal_122
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 188($sp) # $t1 = internal_121
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 196($sp)
		sw $t0, 0($t1)
		
		# internal_119 = ancestor of internal_119
		lw $t0, 196($sp)
		lw $t0, 4($t0)
		sw $t0, 196($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_122
		lw $t0, 196($sp)
		sw $t0, 4($sp) # Storing internal_122
		
		# Argument internal_114
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing internal_114
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 196($sp) # internal_122 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8744937301390
		j foreach_start_8744937301390
		
		foreach_end_8744937301390:
		
		# initialize Array [internal_115]
		lw $t0, 212($sp) # $t0 = internal_115
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 176($sp) # internal_124 = new Array[internal_115]
		
		# initialize Array [internal_115]
		lw $t0, 212($sp) # $t0 = internal_115
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 172($sp) # internal_125 = new Array[internal_115]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 164($sp) # internal_127 = address of allocated object Int
		
		# internal_126 = direction of Razz
		la $t0, type_Razz
		sw $t0, 168($sp)
		
		# array internal_124[4 * internal_127] = internal_126
		lw $t0, 164($sp) # $t0 = internal_127
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 176($sp) # $t1 = internal_124
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 168($sp)
		sw $t0, 0($t1)
		
		# array internal_125[4 * internal_127] = internal_117
		lw $t0, 164($sp) # $t0 = internal_127
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 172($sp) # $t1 = internal_125
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 204($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 156($sp) # internal_129 = address of allocated object Int
		
		# internal_128 = direction of Bar
		la $t0, type_Bar
		sw $t0, 160($sp)
		
		# array internal_124[4 * internal_129] = internal_128
		lw $t0, 156($sp) # $t0 = internal_129
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 176($sp) # $t1 = internal_124
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 160($sp)
		sw $t0, 0($t1)
		
		# array internal_125[4 * internal_129] = internal_117
		lw $t0, 156($sp) # $t0 = internal_129
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 172($sp) # $t1 = internal_125
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 204($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 152($sp) # internal_130 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 148($sp) # internal_131 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 140($sp) # internal_133 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_134 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_136 = address of allocated object Int
		
		foreach_type_start_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_130
		lw $t0, 164($sp)
		sw $t0, 4($sp) # Storing internal_130
		
		# Argument internal_115
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_115
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 160($sp) # internal_131 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_131 then goto foreach_type_body_8744937301390
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8744937301390
		
		# Jumping to foreach_type_end_8744937301390
		j foreach_type_end_8744937301390
		
		foreach_type_body_8744937301390:
		
		# internal_132 = array internal_124[4 * internal_130]
		lw $t0, 152($sp) # $t0 = internal_130
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 176($sp) # $t1 = internal_124
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 144($sp) # internal_132 = array internal_124[4 * internal_130]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_133
		lw $t0, 152($sp)
		sw $t0, 4($sp) # Storing internal_133
		
		# Argument internal_113
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing internal_113
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 152($sp) # internal_133 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_133
		lw $t0, 152($sp)
		sw $t0, 4($sp) # Storing internal_133
		
		# Argument internal_117
		lw $t0, 216($sp)
		sw $t0, 0($sp) # Storing internal_117
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 148($sp) # internal_134 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_134 then goto foreach_ancestor_body_8744937301390
		lw $t0, 136($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8744937301390
		
		# Jumping to foreach_ancestor_end_8744937301390
		j foreach_ancestor_end_8744937301390
		
		foreach_ancestor_body_8744937301390:
		
		# internal_135 = array internal_121[4 * internal_133]
		lw $t0, 140($sp) # $t0 = internal_133
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 188($sp) # $t1 = internal_121
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 132($sp) # internal_135 = array internal_121[4 * internal_133]
		
		# internal_136 = EqualAddress(internal_132, internal_135)
		lw $t0, 144($sp)
		lw $t1, 132($sp)
		seq $t2, $t0, $t1
		lw $t0, 128($sp)
		sw $t2, 8($t0)
		
		# If internal_136 then goto foreach_ancestor_end_8744937301390
		lw $t0, 128($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8744937301390
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_133
		lw $t0, 152($sp)
		sw $t0, 4($sp) # Storing internal_133
		
		# Argument internal_114
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing internal_114
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 152($sp) # internal_133 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8744937301390
		j foreach_ancestor_start_8744937301390
		
		foreach_ancestor_end_8744937301390:
		
		# array internal_125[4 * internal_130] = internal_133
		lw $t0, 152($sp) # $t0 = internal_130
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 172($sp) # $t1 = internal_125
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 140($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_130
		lw $t0, 164($sp)
		sw $t0, 4($sp) # Storing internal_130
		
		# Argument internal_114
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing internal_114
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 164($sp) # internal_130 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8744937301390
		j foreach_type_start_8744937301390
		
		foreach_type_end_8744937301390:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_142[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 104($sp) # internal_142 = "\n"
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_143[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 100($sp) # internal_143 = " "
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 124($sp) # internal_137 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 120($sp) # internal_138 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 116($sp) # internal_139 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_140 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_141 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_140
		lw $t0, 124($sp)
		sw $t0, 4($sp) # Storing internal_140
		
		# Argument internal_117
		lw $t0, 216($sp)
		sw $t0, 0($sp) # Storing internal_117
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 124($sp) # internal_140 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_137
		lw $t0, 136($sp)
		sw $t0, 4($sp) # Storing internal_137
		
		# Argument internal_115
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_115
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 120($sp) # internal_141 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_141 then goto foreach_min_body_8744937301390
		lw $t0, 108($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8744937301390
		
		# Jumping to foreach_min_end_8744937301390
		j foreach_min_end_8744937301390
		
		foreach_min_body_8744937301390:
		
		# internal_139 = array internal_125[4 * internal_137]
		lw $t0, 124($sp) # $t0 = internal_137
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 172($sp) # $t1 = internal_125
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 116($sp) # internal_139 = array internal_125[4 * internal_137]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_139
		lw $t0, 128($sp)
		sw $t0, 4($sp) # Storing internal_139
		
		# Argument internal_140
		lw $t0, 124($sp)
		sw $t0, 0($sp) # Storing internal_140
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 120($sp) # internal_141 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_141 then goto update_min_8744937301390
		lw $t0, 108($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8744937301390
		
		# Jumping to update_min_end_8744937301390
		j update_min_end_8744937301390
		
		update_min_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_140
		lw $t0, 124($sp)
		sw $t0, 4($sp) # Storing internal_140
		
		# Argument internal_139
		lw $t0, 128($sp)
		sw $t0, 0($sp) # Storing internal_139
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 124($sp) # internal_140 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_138
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_138
		
		# Argument internal_137
		lw $t0, 136($sp)
		sw $t0, 0($sp) # Storing internal_137
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_138 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_137
		lw $t0, 136($sp)
		sw $t0, 4($sp) # Storing internal_137
		
		# Argument internal_114
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing internal_114
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 136($sp) # internal_137 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8744937301390
		j foreach_min_start_8744937301390
		
		foreach_min_end_8744937301390:
		
		# initialize Array [internal_115]
		lw $t0, 212($sp) # $t0 = internal_115
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 96($sp) # internal_144 = new Array[internal_115]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 92($sp) # internal_145 = address of allocated object Int
		
		# array internal_144[4 * internal_145] = internal_113
		lw $t0, 92($sp) # $t0 = internal_145
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 96($sp) # $t1 = internal_144
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 220($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_146 = address of allocated object Int
		
		# array internal_144[4 * internal_146] = internal_113
		lw $t0, 88($sp) # $t0 = internal_146
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 96($sp) # $t1 = internal_144
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 220($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_147 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_140
		lw $t0, 124($sp)
		sw $t0, 4($sp) # Storing internal_140
		
		# Argument internal_117
		lw $t0, 216($sp)
		sw $t0, 0($sp) # Storing internal_117
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 96($sp) # internal_147 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_147 then goto error_branch_8744937301390
		lw $t0, 84($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8744937301390
		
		# array internal_144[4 * internal_138] = internal_114
		lw $t0, 120($sp) # $t0 = internal_138
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 96($sp) # $t1 = internal_144
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_148 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 76($sp) # internal_149 = address of allocated object Int
		
		# internal_148 = array internal_144[4 * internal_149]
		lw $t0, 76($sp) # $t0 = internal_149
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 96($sp) # $t1 = internal_144
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 80($sp) # internal_148 = array internal_144[4 * internal_149]
		sw $t0, 8($t2)
		
		# If internal_148 then goto branch_Razz_8744937301390
		lw $t0, 80($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8744937301390
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_150 = address of allocated object Int
		
		# internal_148 = array internal_144[4 * internal_150]
		lw $t0, 72($sp) # $t0 = internal_150
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 96($sp) # $t1 = internal_144
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 80($sp) # internal_148 = array internal_144[4 * internal_150]
		sw $t0, 8($t2)
		
		# If internal_148 then goto branch_Bar_8744937301390
		lw $t0, 80($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8744937301390
		
		branch_Razz_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 492($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 688($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 492($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 60($sp) # internal_153 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_153
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing internal_153
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 68($sp) # internal_153 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_151
		lw $t0, 80($sp)
		sw $t0, 4($sp) # Storing internal_151
		
		# Argument internal_153
		lw $t0, 72($sp)
		sw $t0, 0($sp) # Storing internal_153
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 80($sp) # internal_151 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_151 = internal_153
		lw $t0, 60($sp)
		sw $t0, 68($sp)
		
		# Jumping to branch_end_8744937301390
		j branch_end_8744937301390
		
		branch_Bar_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 492($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 688($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 492($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_151
		lw $t0, 80($sp)
		sw $t0, 4($sp) # Storing internal_151
		
		# Argument n
		lw $t0, 492($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 80($sp) # internal_151 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_151 = n
		lw $t0, 480($sp)
		sw $t0, 68($sp)
		
		# Jumping to branch_end_8744937301390
		j branch_end_8744937301390
		
		error_branch_8744937301390:
		
		branch_end_8744937301390:
		
		# Set attribute e of self
		lw $t0, 676($sp) # $t0 = self
		lw $t1, 68($sp) # $t1 = internal_151
		beq $t1, $zero, object_set_attribute_8744937271893
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937271893
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937271893
		j object_set_attribute_8744937271893
		int_set_attribute_8744937271893:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($t0) # self.e = internal_151
		j end_set_attribute_8744937271893
		bool_set_attribute_8744937271893:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($t0) # self.e = internal_151
		j end_set_attribute_8744937271893
		object_set_attribute_8744937271893:
		sw $t1, 28($t0) # self.e = internal_151
		end_set_attribute_8744937271893:
		
		# Get attribute a of self
		lw $t0, 676($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'a' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937274935
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937274935
		j object_get_attribute_8744937274935
		int_get_attribute_8744937274935:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 52($sp) # internal_155 = self.a
		j end_get_attribute_8744937274935
		bool_get_attribute_8744937274935:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 52($sp) # internal_155 = self.a
		j end_get_attribute_8744937274935
		object_get_attribute_8744937274935:
		sw $t1, 52($sp) # internal_155 = a
		end_get_attribute_8744937274935:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_155
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_155
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 56($sp) # internal_156 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute g of self
		lw $t0, 676($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'g' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937274965
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937274965
		j object_get_attribute_8744937274965
		int_get_attribute_8744937274965:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 44($sp) # internal_157 = self.g
		j end_get_attribute_8744937274965
		bool_get_attribute_8744937274965:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 44($sp) # internal_157 = self.g
		j end_get_attribute_8744937274965
		object_get_attribute_8744937274965:
		sw $t1, 44($sp) # internal_157 = g
		end_get_attribute_8744937274965:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_157
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_157
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 48($sp) # internal_158 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_156
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing internal_156
		
		# Argument internal_158
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_158
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_159 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute e of self
		lw $t0, 676($sp) # Get the address of self
		lw $t1, 28($t0) # Get the attribute 'e' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937275010
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937275010
		j object_get_attribute_8744937275010
		int_get_attribute_8744937275010:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp) # internal_160 = self.e
		j end_get_attribute_8744937275010
		bool_get_attribute_8744937275010:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp) # internal_160 = self.e
		j end_get_attribute_8744937275010
		object_get_attribute_8744937275010:
		sw $t1, 32($sp) # internal_160 = e
		end_get_attribute_8744937275010:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_160
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_160
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 36($sp) # internal_161 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_159
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing internal_159
		
		# Argument internal_161
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_161
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_162 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 684($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 28($sp) # internal_163 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_162
		lw $t0, 36($sp)
		sw $t0, 4($sp) # Storing internal_162
		
		# Argument internal_163
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_163
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_164 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 684($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_printh_at_Bazz
		jal function_printh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_165 = result of function_printh_at_Bazz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_164
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing internal_164
		
		# Argument internal_165
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_165
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_166 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute f of self
		lw $t0, 676($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_166
		beq $t1, $zero, object_set_attribute_8744937274603
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937274603
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937274603
		j object_set_attribute_8744937274603
		int_set_attribute_8744937274603:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($t0) # self.f = internal_166
		j end_set_attribute_8744937274603
		bool_set_attribute_8744937274603:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($t0) # self.f = internal_166
		j end_set_attribute_8744937274603
		object_set_attribute_8744937274603:
		sw $t1, 32($t0) # self.f = internal_166
		end_set_attribute_8744937274603:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 684($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 12($sp) # internal_167 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute c of self
		lw $t0, 676($sp) # $t0 = self
		lw $t1, 4($sp) # $t1 = internal_167
		beq $t1, $zero, object_set_attribute_8744937275109
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937275109
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937275109
		j object_set_attribute_8744937275109
		int_set_attribute_8744937275109:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($t0) # self.c = internal_167
		j end_set_attribute_8744937275109
		bool_set_attribute_8744937275109:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($t0) # self.c = internal_167
		j end_set_attribute_8744937275109
		object_set_attribute_8744937275109:
		sw $t1, 36($t0) # self.c = internal_167
		end_set_attribute_8744937275109:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 684($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_printh_at_Bazz
		jal function_printh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 8($sp) # internal_168 = result of function_printh_at_Bazz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute d of self
		lw $t0, 676($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_168
		beq $t1, $zero, object_set_attribute_8744937275106
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937275106
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937275106
		j object_set_attribute_8744937275106
		int_set_attribute_8744937275106:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($t0) # self.d = internal_168
		j end_set_attribute_8744937275106
		bool_set_attribute_8744937275106:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($t0) # self.d = internal_168
		j end_set_attribute_8744937275106
		object_set_attribute_8744937275106:
		sw $t1, 40($t0) # self.d = internal_168
		end_set_attribute_8744937275106:
		
		# Loading return value in $v1
		lw $v1, 676($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 676
		
		jr $ra
		
	function___init___at_Razz:
		# Function parameters
		#   $ra = 672($sp)
		#   self = 668($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -668
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 664($sp) # internal_0 = address of allocated object Int
		
		# Set attribute h of self
		lw $t0, 668($sp) # $t0 = self
		lw $t1, 664($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8744937275700
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937275700
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937275700
		j object_set_attribute_8744937275700
		int_set_attribute_8744937275700:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8744937275700
		bool_set_attribute_8744937275700:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8744937275700
		object_set_attribute_8744937275700:
		sw $t1, 8($t0) # self.h = internal_0
		end_set_attribute_8744937275700:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 660($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 656($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 652($sp) # internal_3 = address of allocated object Int
		
		# Allocating NUll to internal_4
		sw $zero, 648($sp) # internal_4 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 644($sp) # internal_5 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 632($sp) # internal_8 = address of allocated object Int
		
		# internal_6 = typeof self that is the first word of the object
		lw $t0, 668($sp)
		lw $t0, 0($t0)
		sw $t0, 640($sp)
		
		# internal_7 = internal_6
		lw $t0, 640($sp)
		sw $t0, 636($sp)
		
		while_start_8744937301489:
		
		# internal_8 = EqualAddress(internal_7, internal_4)
		lw $t0, 636($sp)
		lw $t1, 648($sp)
		seq $t2, $t0, $t1
		lw $t0, 632($sp)
		sw $t2, 8($t0)
		
		# If internal_8 then goto while_end_8744937301489
		lw $t0, 632($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8744937301489
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_5
		lw $t0, 656($sp)
		sw $t0, 4($sp) # Storing internal_5
		
		# Argument internal_2
		lw $t0, 668($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 656($sp) # internal_5 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_7 = ancestor of internal_7
		lw $t0, 636($sp)
		lw $t0, 4($t0)
		sw $t0, 636($sp)
		
		# Jumping to while_start_8744937301489
		j while_start_8744937301489
		
		while_end_8744937301489:
		
		# internal_7 = internal_6
		lw $t0, 640($sp)
		sw $t0, 636($sp)
		
		# initialize Array [internal_5]
		lw $t0, 644($sp) # $t0 = internal_5
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 628($sp) # internal_9 = new Array[internal_5]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 624($sp) # internal_10 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 620($sp) # internal_11 = address of allocated object Int
		
		foreach_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_5
		lw $t0, 656($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 632($sp) # internal_11 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_11 then goto foreach_body_8744937301489
		lw $t0, 620($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8744937301489
		
		# Jumping to foreach_end_8744937301489
		j foreach_end_8744937301489
		
		foreach_body_8744937301489:
		
		# array internal_9[4 * internal_10] = internal_7
		lw $t0, 624($sp) # $t0 = internal_10
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 628($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 636($sp)
		sw $t0, 0($t1)
		
		# internal_7 = ancestor of internal_7
		lw $t0, 636($sp)
		lw $t0, 4($t0)
		sw $t0, 636($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_2
		lw $t0, 668($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 636($sp) # internal_10 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8744937301489
		j foreach_start_8744937301489
		
		foreach_end_8744937301489:
		
		# initialize Array [internal_3]
		lw $t0, 652($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 616($sp) # internal_12 = new Array[internal_3]
		
		# initialize Array [internal_3]
		lw $t0, 652($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 612($sp) # internal_13 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 604($sp) # internal_15 = address of allocated object Int
		
		# internal_14 = direction of Bazz
		la $t0, type_Bazz
		sw $t0, 608($sp)
		
		# array internal_12[4 * internal_15] = internal_14
		lw $t0, 604($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 616($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 608($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_15] = internal_5
		lw $t0, 604($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 612($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 644($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 596($sp) # internal_17 = address of allocated object Int
		
		# internal_16 = direction of Razz
		la $t0, type_Razz
		sw $t0, 600($sp)
		
		# array internal_12[4 * internal_17] = internal_16
		lw $t0, 596($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 616($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 600($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_17] = internal_5
		lw $t0, 596($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 612($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 644($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 588($sp) # internal_19 = address of allocated object Int
		
		# internal_18 = direction of Foo
		la $t0, type_Foo
		sw $t0, 592($sp)
		
		# array internal_12[4 * internal_19] = internal_18
		lw $t0, 588($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 616($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 592($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_19] = internal_5
		lw $t0, 588($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 612($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 644($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 580($sp) # internal_21 = address of allocated object Int
		
		# internal_20 = direction of Bar
		la $t0, type_Bar
		sw $t0, 584($sp)
		
		# array internal_12[4 * internal_21] = internal_20
		lw $t0, 580($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 616($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 584($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_21] = internal_5
		lw $t0, 580($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 612($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 644($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 576($sp) # internal_22 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 572($sp) # internal_23 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 564($sp) # internal_25 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 560($sp) # internal_26 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 552($sp) # internal_28 = address of allocated object Int
		
		foreach_type_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 588($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_3
		lw $t0, 664($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 584($sp) # internal_23 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_23 then goto foreach_type_body_8744937301489
		lw $t0, 572($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8744937301489
		
		# Jumping to foreach_type_end_8744937301489
		j foreach_type_end_8744937301489
		
		foreach_type_body_8744937301489:
		
		# internal_24 = array internal_12[4 * internal_22]
		lw $t0, 576($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 616($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 568($sp) # internal_24 = array internal_12[4 * internal_22]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 576($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_1
		lw $t0, 672($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 576($sp) # internal_25 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 576($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_5
		lw $t0, 656($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 572($sp) # internal_26 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_26 then goto foreach_ancestor_body_8744937301489
		lw $t0, 560($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8744937301489
		
		# Jumping to foreach_ancestor_end_8744937301489
		j foreach_ancestor_end_8744937301489
		
		foreach_ancestor_body_8744937301489:
		
		# internal_27 = array internal_9[4 * internal_25]
		lw $t0, 564($sp) # $t0 = internal_25
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 628($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 556($sp) # internal_27 = array internal_9[4 * internal_25]
		
		# internal_28 = EqualAddress(internal_24, internal_27)
		lw $t0, 568($sp)
		lw $t1, 556($sp)
		seq $t2, $t0, $t1
		lw $t0, 552($sp)
		sw $t2, 8($t0)
		
		# If internal_28 then goto foreach_ancestor_end_8744937301489
		lw $t0, 552($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8744937301489
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 576($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_2
		lw $t0, 668($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 576($sp) # internal_25 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8744937301489
		j foreach_ancestor_start_8744937301489
		
		foreach_ancestor_end_8744937301489:
		
		# array internal_13[4 * internal_22] = internal_25
		lw $t0, 576($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 612($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 564($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 588($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_2
		lw $t0, 668($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 588($sp) # internal_22 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8744937301489
		j foreach_type_start_8744937301489
		
		foreach_type_end_8744937301489:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_34[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 528($sp) # internal_34 = "\n"
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_35[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 524($sp) # internal_35 = " "
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 548($sp) # internal_29 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 544($sp) # internal_30 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 540($sp) # internal_31 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 536($sp) # internal_32 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 532($sp) # internal_33 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 548($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 656($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 560($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_3
		lw $t0, 664($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 544($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto foreach_min_body_8744937301489
		lw $t0, 532($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8744937301489
		
		# Jumping to foreach_min_end_8744937301489
		j foreach_min_end_8744937301489
		
		foreach_min_body_8744937301489:
		
		# internal_31 = array internal_13[4 * internal_29]
		lw $t0, 548($sp) # $t0 = internal_29
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 612($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 540($sp) # internal_31 = array internal_13[4 * internal_29]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_31
		lw $t0, 552($sp)
		sw $t0, 4($sp) # Storing internal_31
		
		# Argument internal_32
		lw $t0, 548($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 544($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto update_min_8744937301489
		lw $t0, 532($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8744937301489
		
		# Jumping to update_min_end_8744937301489
		j update_min_end_8744937301489
		
		update_min_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 548($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_31
		lw $t0, 552($sp)
		sw $t0, 0($sp) # Storing internal_31
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_30
		lw $t0, 556($sp)
		sw $t0, 4($sp) # Storing internal_30
		
		# Argument internal_29
		lw $t0, 560($sp)
		sw $t0, 0($sp) # Storing internal_29
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 556($sp) # internal_30 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 560($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_2
		lw $t0, 668($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 560($sp) # internal_29 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8744937301489
		j foreach_min_start_8744937301489
		
		foreach_min_end_8744937301489:
		
		# initialize Array [internal_3]
		lw $t0, 652($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 520($sp) # internal_36 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 516($sp) # internal_37 = address of allocated object Int
		
		# array internal_36[4 * internal_37] = internal_1
		lw $t0, 516($sp) # $t0 = internal_37
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 520($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 660($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 512($sp) # internal_38 = address of allocated object Int
		
		# array internal_36[4 * internal_38] = internal_1
		lw $t0, 512($sp) # $t0 = internal_38
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 520($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 660($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 508($sp) # internal_39 = address of allocated object Int
		
		# array internal_36[4 * internal_39] = internal_1
		lw $t0, 508($sp) # $t0 = internal_39
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 520($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 660($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 504($sp) # internal_40 = address of allocated object Int
		
		# array internal_36[4 * internal_40] = internal_1
		lw $t0, 504($sp) # $t0 = internal_40
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 520($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 660($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 500($sp) # internal_41 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 548($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 656($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 512($sp) # internal_41 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_41 then goto error_branch_8744937301489
		lw $t0, 500($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8744937301489
		
		# array internal_36[4 * internal_30] = internal_2
		lw $t0, 544($sp) # $t0 = internal_30
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 520($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 656($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 496($sp) # internal_42 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 492($sp) # internal_43 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_43]
		lw $t0, 492($sp) # $t0 = internal_43
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 520($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 496($sp) # internal_42 = array internal_36[4 * internal_43]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Bazz_8744937301489
		lw $t0, 496($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bazz_8744937301489
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 488($sp) # internal_44 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_44]
		lw $t0, 488($sp) # $t0 = internal_44
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 520($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 496($sp) # internal_42 = array internal_36[4 * internal_44]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Razz_8744937301489
		lw $t0, 496($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8744937301489
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 484($sp) # internal_45 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_45]
		lw $t0, 484($sp) # $t0 = internal_45
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 520($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 496($sp) # internal_42 = array internal_36[4 * internal_45]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Foo_8744937301489
		lw $t0, 496($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Foo_8744937301489
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 480($sp) # internal_46 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_46]
		lw $t0, 480($sp) # $t0 = internal_46
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 520($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 496($sp) # internal_42 = array internal_36[4 * internal_46]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Bar_8744937301489
		lw $t0, 496($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8744937301489
		
		branch_Bazz_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 484($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 680($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 484($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 468($sp) # internal_49 = address of allocated object Foo
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_49
		lw $t0, 476($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 476($sp) # internal_49 = result of function___init___at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 488($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument internal_49
		lw $t0, 480($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 488($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = internal_49
		lw $t0, 468($sp)
		sw $t0, 476($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		branch_Razz_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 484($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 680($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 484($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 460($sp) # internal_51 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_51
		lw $t0, 468($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 468($sp) # internal_51 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 488($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument internal_51
		lw $t0, 472($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 488($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = internal_51
		lw $t0, 460($sp)
		sw $t0, 476($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		branch_Foo_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 484($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 680($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 484($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 452($sp) # internal_53 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_53
		lw $t0, 460($sp)
		sw $t0, 0($sp) # Storing internal_53
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 460($sp) # internal_53 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 488($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument internal_53
		lw $t0, 464($sp)
		sw $t0, 0($sp) # Storing internal_53
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 488($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = internal_53
		lw $t0, 452($sp)
		sw $t0, 476($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		branch_Bar_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 484($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 680($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 484($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 488($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument n
		lw $t0, 484($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 488($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = n
		lw $t0, 472($sp)
		sw $t0, 476($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		error_branch_8744937301489:
		
		branch_end_8744937301489:
		
		# Set attribute g of self
		lw $t0, 668($sp) # $t0 = self
		lw $t1, 476($sp) # $t1 = internal_47
		beq $t1, $zero, object_set_attribute_8744937275721
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937275721
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937275721
		j object_set_attribute_8744937275721
		int_set_attribute_8744937275721:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_47
		j end_set_attribute_8744937275721
		bool_set_attribute_8744937275721:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_47
		j end_set_attribute_8744937275721
		object_set_attribute_8744937275721:
		sw $t1, 12($t0) # self.g = internal_47
		end_set_attribute_8744937275721:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 676($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_printh_at_Bazz
		jal function_printh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 452($sp) # internal_55 = result of function_printh_at_Bazz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute i of self
		lw $t0, 668($sp) # $t0 = self
		lw $t1, 444($sp) # $t1 = internal_55
		beq $t1, $zero, object_set_attribute_8744937275694
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937275694
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937275694
		j object_set_attribute_8744937275694
		int_set_attribute_8744937275694:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_55
		j end_set_attribute_8744937275694
		bool_set_attribute_8744937275694:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_55
		j end_set_attribute_8744937275694
		object_set_attribute_8744937275694:
		sw $t1, 16($t0) # self.i = internal_55
		end_set_attribute_8744937275694:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 440($sp) # internal_56 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 436($sp) # internal_57 = address of allocated object Int
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 432($sp) # internal_58 = address of allocated object Int
		
		# Allocating NUll to internal_59
		sw $zero, 428($sp) # internal_59 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 424($sp) # internal_60 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 412($sp) # internal_63 = address of allocated object Int
		
		# internal_61 = typeof self that is the first word of the object
		lw $t0, 668($sp)
		lw $t0, 0($t0)
		sw $t0, 420($sp)
		
		# internal_62 = internal_61
		lw $t0, 420($sp)
		sw $t0, 416($sp)
		
		while_start_8744937325815:
		
		# internal_63 = EqualAddress(internal_62, internal_59)
		lw $t0, 416($sp)
		lw $t1, 428($sp)
		seq $t2, $t0, $t1
		lw $t0, 412($sp)
		sw $t2, 8($t0)
		
		# If internal_63 then goto while_end_8744937325815
		lw $t0, 412($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8744937325815
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_60
		lw $t0, 436($sp)
		sw $t0, 4($sp) # Storing internal_60
		
		# Argument internal_57
		lw $t0, 448($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 436($sp) # internal_60 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_62 = ancestor of internal_62
		lw $t0, 416($sp)
		lw $t0, 4($t0)
		sw $t0, 416($sp)
		
		# Jumping to while_start_8744937325815
		j while_start_8744937325815
		
		while_end_8744937325815:
		
		# internal_62 = internal_61
		lw $t0, 420($sp)
		sw $t0, 416($sp)
		
		# initialize Array [internal_60]
		lw $t0, 424($sp) # $t0 = internal_60
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 408($sp) # internal_64 = new Array[internal_60]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 404($sp) # internal_65 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 400($sp) # internal_66 = address of allocated object Int
		
		foreach_start_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_65
		lw $t0, 416($sp)
		sw $t0, 4($sp) # Storing internal_65
		
		# Argument internal_60
		lw $t0, 436($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 412($sp) # internal_66 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_66 then goto foreach_body_8744937325815
		lw $t0, 400($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8744937325815
		
		# Jumping to foreach_end_8744937325815
		j foreach_end_8744937325815
		
		foreach_body_8744937325815:
		
		# array internal_64[4 * internal_65] = internal_62
		lw $t0, 404($sp) # $t0 = internal_65
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 408($sp) # $t1 = internal_64
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 416($sp)
		sw $t0, 0($t1)
		
		# internal_62 = ancestor of internal_62
		lw $t0, 416($sp)
		lw $t0, 4($t0)
		sw $t0, 416($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_65
		lw $t0, 416($sp)
		sw $t0, 4($sp) # Storing internal_65
		
		# Argument internal_57
		lw $t0, 448($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 416($sp) # internal_65 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8744937325815
		j foreach_start_8744937325815
		
		foreach_end_8744937325815:
		
		# initialize Array [internal_58]
		lw $t0, 432($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 396($sp) # internal_67 = new Array[internal_58]
		
		# initialize Array [internal_58]
		lw $t0, 432($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 392($sp) # internal_68 = new Array[internal_58]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 384($sp) # internal_70 = address of allocated object Int
		
		# internal_69 = direction of Razz
		la $t0, type_Razz
		sw $t0, 388($sp)
		
		# array internal_67[4 * internal_70] = internal_69
		lw $t0, 384($sp) # $t0 = internal_70
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 388($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_70] = internal_60
		lw $t0, 384($sp) # $t0 = internal_70
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 392($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 424($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 376($sp) # internal_72 = address of allocated object Int
		
		# internal_71 = direction of Foo
		la $t0, type_Foo
		sw $t0, 380($sp)
		
		# array internal_67[4 * internal_72] = internal_71
		lw $t0, 376($sp) # $t0 = internal_72
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 380($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_72] = internal_60
		lw $t0, 376($sp) # $t0 = internal_72
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 392($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 424($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 368($sp) # internal_74 = address of allocated object Int
		
		# internal_73 = direction of Bar
		la $t0, type_Bar
		sw $t0, 372($sp)
		
		# array internal_67[4 * internal_74] = internal_73
		lw $t0, 368($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 372($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_74] = internal_60
		lw $t0, 368($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 392($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 424($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 364($sp) # internal_75 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 360($sp) # internal_76 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 352($sp) # internal_78 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 348($sp) # internal_79 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 340($sp) # internal_81 = address of allocated object Int
		
		foreach_type_start_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_75
		lw $t0, 376($sp)
		sw $t0, 4($sp) # Storing internal_75
		
		# Argument internal_58
		lw $t0, 444($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 372($sp) # internal_76 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_76 then goto foreach_type_body_8744937325815
		lw $t0, 360($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8744937325815
		
		# Jumping to foreach_type_end_8744937325815
		j foreach_type_end_8744937325815
		
		foreach_type_body_8744937325815:
		
		# internal_77 = array internal_67[4 * internal_75]
		lw $t0, 364($sp) # $t0 = internal_75
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 356($sp) # internal_77 = array internal_67[4 * internal_75]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 364($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_56
		lw $t0, 452($sp)
		sw $t0, 0($sp) # Storing internal_56
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 364($sp) # internal_78 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 364($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_60
		lw $t0, 436($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 360($sp) # internal_79 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_79 then goto foreach_ancestor_body_8744937325815
		lw $t0, 348($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8744937325815
		
		# Jumping to foreach_ancestor_end_8744937325815
		j foreach_ancestor_end_8744937325815
		
		foreach_ancestor_body_8744937325815:
		
		# internal_80 = array internal_64[4 * internal_78]
		lw $t0, 352($sp) # $t0 = internal_78
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 408($sp) # $t1 = internal_64
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 344($sp) # internal_80 = array internal_64[4 * internal_78]
		
		# internal_81 = EqualAddress(internal_77, internal_80)
		lw $t0, 356($sp)
		lw $t1, 344($sp)
		seq $t2, $t0, $t1
		lw $t0, 340($sp)
		sw $t2, 8($t0)
		
		# If internal_81 then goto foreach_ancestor_end_8744937325815
		lw $t0, 340($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8744937325815
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 364($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_57
		lw $t0, 448($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 364($sp) # internal_78 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8744937325815
		j foreach_ancestor_start_8744937325815
		
		foreach_ancestor_end_8744937325815:
		
		# array internal_68[4 * internal_75] = internal_78
		lw $t0, 364($sp) # $t0 = internal_75
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 392($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 352($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_75
		lw $t0, 376($sp)
		sw $t0, 4($sp) # Storing internal_75
		
		# Argument internal_57
		lw $t0, 448($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 376($sp) # internal_75 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8744937325815
		j foreach_type_start_8744937325815
		
		foreach_type_end_8744937325815:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_87[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 316($sp) # internal_87 = "\n"
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_88[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 312($sp) # internal_88 = " "
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 336($sp) # internal_82 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 332($sp) # internal_83 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 328($sp) # internal_84 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 324($sp) # internal_85 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 320($sp) # internal_86 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 336($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_60
		lw $t0, 436($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 336($sp) # internal_85 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_82
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing internal_82
		
		# Argument internal_58
		lw $t0, 444($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 332($sp) # internal_86 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_86 then goto foreach_min_body_8744937325815
		lw $t0, 320($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8744937325815
		
		# Jumping to foreach_min_end_8744937325815
		j foreach_min_end_8744937325815
		
		foreach_min_body_8744937325815:
		
		# internal_84 = array internal_68[4 * internal_82]
		lw $t0, 336($sp) # $t0 = internal_82
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 392($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 328($sp) # internal_84 = array internal_68[4 * internal_82]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_84
		lw $t0, 340($sp)
		sw $t0, 4($sp) # Storing internal_84
		
		# Argument internal_85
		lw $t0, 336($sp)
		sw $t0, 0($sp) # Storing internal_85
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 332($sp) # internal_86 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_86 then goto update_min_8744937325815
		lw $t0, 320($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8744937325815
		
		# Jumping to update_min_end_8744937325815
		j update_min_end_8744937325815
		
		update_min_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 336($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_84
		lw $t0, 340($sp)
		sw $t0, 0($sp) # Storing internal_84
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 336($sp) # internal_85 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_83
		lw $t0, 344($sp)
		sw $t0, 4($sp) # Storing internal_83
		
		# Argument internal_82
		lw $t0, 348($sp)
		sw $t0, 0($sp) # Storing internal_82
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 344($sp) # internal_83 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_82
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing internal_82
		
		# Argument internal_57
		lw $t0, 448($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 348($sp) # internal_82 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8744937325815
		j foreach_min_start_8744937325815
		
		foreach_min_end_8744937325815:
		
		# initialize Array [internal_58]
		lw $t0, 432($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 308($sp) # internal_89 = new Array[internal_58]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 304($sp) # internal_90 = address of allocated object Int
		
		# array internal_89[4 * internal_90] = internal_56
		lw $t0, 304($sp) # $t0 = internal_90
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 308($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 440($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 300($sp) # internal_91 = address of allocated object Int
		
		# array internal_89[4 * internal_91] = internal_56
		lw $t0, 300($sp) # $t0 = internal_91
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 308($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 440($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 296($sp) # internal_92 = address of allocated object Int
		
		# array internal_89[4 * internal_92] = internal_56
		lw $t0, 296($sp) # $t0 = internal_92
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 308($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 440($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 292($sp) # internal_93 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 336($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_60
		lw $t0, 436($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 304($sp) # internal_93 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_93 then goto error_branch_8744937325815
		lw $t0, 292($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8744937325815
		
		# array internal_89[4 * internal_83] = internal_57
		lw $t0, 332($sp) # $t0 = internal_83
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 308($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 436($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 288($sp) # internal_94 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 284($sp) # internal_95 = address of allocated object Int
		
		# internal_94 = array internal_89[4 * internal_95]
		lw $t0, 284($sp) # $t0 = internal_95
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 308($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 288($sp) # internal_94 = array internal_89[4 * internal_95]
		sw $t0, 8($t2)
		
		# If internal_94 then goto branch_Razz_8744937325815
		lw $t0, 288($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8744937325815
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 280($sp) # internal_96 = address of allocated object Int
		
		# internal_94 = array internal_89[4 * internal_96]
		lw $t0, 280($sp) # $t0 = internal_96
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 308($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 288($sp) # internal_94 = array internal_89[4 * internal_96]
		sw $t0, 8($t2)
		
		# If internal_94 then goto branch_Foo_8744937325815
		lw $t0, 288($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Foo_8744937325815
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 276($sp) # internal_97 = address of allocated object Int
		
		# internal_94 = array internal_89[4 * internal_97]
		lw $t0, 276($sp) # $t0 = internal_97
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 308($sp) # $t1 = internal_89
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 288($sp) # internal_94 = array internal_89[4 * internal_97]
		sw $t0, 8($t2)
		
		# If internal_94 then goto branch_Bar_8744937325815
		lw $t0, 288($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8744937325815
		
		branch_Razz_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 484($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 680($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 484($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 264($sp) # internal_100 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_100
		lw $t0, 272($sp)
		sw $t0, 0($sp) # Storing internal_100
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 272($sp) # internal_100 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_98
		lw $t0, 284($sp)
		sw $t0, 4($sp) # Storing internal_98
		
		# Argument internal_100
		lw $t0, 276($sp)
		sw $t0, 0($sp) # Storing internal_100
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 284($sp) # internal_98 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_98 = internal_100
		lw $t0, 264($sp)
		sw $t0, 272($sp)
		
		# Jumping to branch_end_8744937325815
		j branch_end_8744937325815
		
		branch_Foo_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 484($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 680($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 484($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 256($sp) # internal_102 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_102
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing internal_102
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 264($sp) # internal_102 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_98
		lw $t0, 284($sp)
		sw $t0, 4($sp) # Storing internal_98
		
		# Argument internal_102
		lw $t0, 268($sp)
		sw $t0, 0($sp) # Storing internal_102
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 284($sp) # internal_98 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_98 = internal_102
		lw $t0, 256($sp)
		sw $t0, 272($sp)
		
		# Jumping to branch_end_8744937325815
		j branch_end_8744937325815
		
		branch_Bar_8744937325815:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 484($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 680($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 484($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_98
		lw $t0, 284($sp)
		sw $t0, 4($sp) # Storing internal_98
		
		# Argument n
		lw $t0, 484($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 284($sp) # internal_98 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_98 = n
		lw $t0, 472($sp)
		sw $t0, 272($sp)
		
		# Jumping to branch_end_8744937325815
		j branch_end_8744937325815
		
		error_branch_8744937325815:
		
		branch_end_8744937325815:
		
		# Set attribute a of self
		lw $t0, 668($sp) # $t0 = self
		lw $t1, 272($sp) # $t1 = internal_98
		beq $t1, $zero, object_set_attribute_8744937246805
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937246805
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937246805
		j object_set_attribute_8744937246805
		int_set_attribute_8744937246805:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.a = internal_98
		j end_set_attribute_8744937246805
		bool_set_attribute_8744937246805:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.a = internal_98
		j end_set_attribute_8744937246805
		object_set_attribute_8744937246805:
		sw $t1, 20($t0) # self.a = internal_98
		end_set_attribute_8744937246805:
		
		# Get attribute a of self
		lw $t0, 668($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'a' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937250006
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937250006
		j object_get_attribute_8744937250006
		int_get_attribute_8744937250006:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 248($sp) # internal_104 = self.a
		j end_get_attribute_8744937250006
		bool_get_attribute_8744937250006:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 248($sp) # internal_104 = self.a
		j end_get_attribute_8744937250006
		object_get_attribute_8744937250006:
		sw $t1, 248($sp) # internal_104 = a
		end_get_attribute_8744937250006:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_104
		lw $t0, 256($sp)
		sw $t0, 0($sp) # Storing internal_104
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 252($sp) # internal_105 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute g of self
		lw $t0, 668($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'g' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937250036
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937250036
		j object_get_attribute_8744937250036
		int_get_attribute_8744937250036:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 240($sp) # internal_106 = self.g
		j end_get_attribute_8744937250036
		bool_get_attribute_8744937250036:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 240($sp) # internal_106 = self.g
		j end_get_attribute_8744937250036
		object_get_attribute_8744937250036:
		sw $t1, 240($sp) # internal_106 = g
		end_get_attribute_8744937250036:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_106
		lw $t0, 248($sp)
		sw $t0, 0($sp) # Storing internal_106
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 244($sp) # internal_107 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_105
		lw $t0, 256($sp)
		sw $t0, 4($sp) # Storing internal_105
		
		# Argument internal_107
		lw $t0, 248($sp)
		sw $t0, 0($sp) # Storing internal_107
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 244($sp) # internal_108 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 676($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 236($sp) # internal_109 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_108
		lw $t0, 244($sp)
		sw $t0, 4($sp) # Storing internal_108
		
		# Argument internal_109
		lw $t0, 240($sp)
		sw $t0, 0($sp) # Storing internal_109
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 236($sp) # internal_110 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 676($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_printh_at_Bazz
		jal function_printh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 228($sp) # internal_111 = result of function_printh_at_Bazz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_110
		lw $t0, 236($sp)
		sw $t0, 4($sp) # Storing internal_110
		
		# Argument internal_111
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing internal_111
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 228($sp) # internal_112 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute b of self
		lw $t0, 668($sp) # $t0 = self
		lw $t1, 216($sp) # $t1 = internal_112
		beq $t1, $zero, object_set_attribute_8744937249946
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937249946
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937249946
		j object_set_attribute_8744937249946
		int_set_attribute_8744937249946:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.b = internal_112
		j end_set_attribute_8744937249946
		bool_set_attribute_8744937249946:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.b = internal_112
		j end_set_attribute_8744937249946
		object_set_attribute_8744937249946:
		sw $t1, 24($t0) # self.b = internal_112
		end_set_attribute_8744937249946:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 212($sp) # internal_113 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_114 = address of allocated object Int
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 204($sp) # internal_115 = address of allocated object Int
		
		# Allocating NUll to internal_116
		sw $zero, 200($sp) # internal_116 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 196($sp) # internal_117 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 184($sp) # internal_120 = address of allocated object Int
		
		# internal_118 = typeof self that is the first word of the object
		lw $t0, 668($sp)
		lw $t0, 0($t0)
		sw $t0, 192($sp)
		
		# internal_119 = internal_118
		lw $t0, 192($sp)
		sw $t0, 188($sp)
		
		while_start_8744937301390:
		
		# internal_120 = EqualAddress(internal_119, internal_116)
		lw $t0, 188($sp)
		lw $t1, 200($sp)
		seq $t2, $t0, $t1
		lw $t0, 184($sp)
		sw $t2, 8($t0)
		
		# If internal_120 then goto while_end_8744937301390
		lw $t0, 184($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8744937301390
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_117
		lw $t0, 208($sp)
		sw $t0, 4($sp) # Storing internal_117
		
		# Argument internal_114
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_114
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 208($sp) # internal_117 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_119 = ancestor of internal_119
		lw $t0, 188($sp)
		lw $t0, 4($t0)
		sw $t0, 188($sp)
		
		# Jumping to while_start_8744937301390
		j while_start_8744937301390
		
		while_end_8744937301390:
		
		# internal_119 = internal_118
		lw $t0, 192($sp)
		sw $t0, 188($sp)
		
		# initialize Array [internal_117]
		lw $t0, 196($sp) # $t0 = internal_117
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 180($sp) # internal_121 = new Array[internal_117]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_122 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 172($sp) # internal_123 = address of allocated object Int
		
		foreach_start_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_122
		lw $t0, 188($sp)
		sw $t0, 4($sp) # Storing internal_122
		
		# Argument internal_117
		lw $t0, 208($sp)
		sw $t0, 0($sp) # Storing internal_117
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 184($sp) # internal_123 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_123 then goto foreach_body_8744937301390
		lw $t0, 172($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8744937301390
		
		# Jumping to foreach_end_8744937301390
		j foreach_end_8744937301390
		
		foreach_body_8744937301390:
		
		# array internal_121[4 * internal_122] = internal_119
		lw $t0, 176($sp) # $t0 = internal_122
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_121
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 188($sp)
		sw $t0, 0($t1)
		
		# internal_119 = ancestor of internal_119
		lw $t0, 188($sp)
		lw $t0, 4($t0)
		sw $t0, 188($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_122
		lw $t0, 188($sp)
		sw $t0, 4($sp) # Storing internal_122
		
		# Argument internal_114
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_114
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 188($sp) # internal_122 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8744937301390
		j foreach_start_8744937301390
		
		foreach_end_8744937301390:
		
		# initialize Array [internal_115]
		lw $t0, 204($sp) # $t0 = internal_115
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 168($sp) # internal_124 = new Array[internal_115]
		
		# initialize Array [internal_115]
		lw $t0, 204($sp) # $t0 = internal_115
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 164($sp) # internal_125 = new Array[internal_115]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 156($sp) # internal_127 = address of allocated object Int
		
		# internal_126 = direction of Razz
		la $t0, type_Razz
		sw $t0, 160($sp)
		
		# array internal_124[4 * internal_127] = internal_126
		lw $t0, 156($sp) # $t0 = internal_127
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_124
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 160($sp)
		sw $t0, 0($t1)
		
		# array internal_125[4 * internal_127] = internal_117
		lw $t0, 156($sp) # $t0 = internal_127
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 164($sp) # $t1 = internal_125
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 196($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 148($sp) # internal_129 = address of allocated object Int
		
		# internal_128 = direction of Bar
		la $t0, type_Bar
		sw $t0, 152($sp)
		
		# array internal_124[4 * internal_129] = internal_128
		lw $t0, 148($sp) # $t0 = internal_129
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_124
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 152($sp)
		sw $t0, 0($t1)
		
		# array internal_125[4 * internal_129] = internal_117
		lw $t0, 148($sp) # $t0 = internal_129
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 164($sp) # $t1 = internal_125
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 196($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_130 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 140($sp) # internal_131 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_133 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_134 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 120($sp) # internal_136 = address of allocated object Int
		
		foreach_type_start_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_130
		lw $t0, 156($sp)
		sw $t0, 4($sp) # Storing internal_130
		
		# Argument internal_115
		lw $t0, 216($sp)
		sw $t0, 0($sp) # Storing internal_115
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 152($sp) # internal_131 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_131 then goto foreach_type_body_8744937301390
		lw $t0, 140($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8744937301390
		
		# Jumping to foreach_type_end_8744937301390
		j foreach_type_end_8744937301390
		
		foreach_type_body_8744937301390:
		
		# internal_132 = array internal_124[4 * internal_130]
		lw $t0, 144($sp) # $t0 = internal_130
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_124
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 136($sp) # internal_132 = array internal_124[4 * internal_130]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_133
		lw $t0, 144($sp)
		sw $t0, 4($sp) # Storing internal_133
		
		# Argument internal_113
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_113
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 144($sp) # internal_133 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_133
		lw $t0, 144($sp)
		sw $t0, 4($sp) # Storing internal_133
		
		# Argument internal_117
		lw $t0, 208($sp)
		sw $t0, 0($sp) # Storing internal_117
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 140($sp) # internal_134 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_134 then goto foreach_ancestor_body_8744937301390
		lw $t0, 128($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8744937301390
		
		# Jumping to foreach_ancestor_end_8744937301390
		j foreach_ancestor_end_8744937301390
		
		foreach_ancestor_body_8744937301390:
		
		# internal_135 = array internal_121[4 * internal_133]
		lw $t0, 132($sp) # $t0 = internal_133
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_121
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 124($sp) # internal_135 = array internal_121[4 * internal_133]
		
		# internal_136 = EqualAddress(internal_132, internal_135)
		lw $t0, 136($sp)
		lw $t1, 124($sp)
		seq $t2, $t0, $t1
		lw $t0, 120($sp)
		sw $t2, 8($t0)
		
		# If internal_136 then goto foreach_ancestor_end_8744937301390
		lw $t0, 120($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8744937301390
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_133
		lw $t0, 144($sp)
		sw $t0, 4($sp) # Storing internal_133
		
		# Argument internal_114
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_114
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 144($sp) # internal_133 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8744937301390
		j foreach_ancestor_start_8744937301390
		
		foreach_ancestor_end_8744937301390:
		
		# array internal_125[4 * internal_130] = internal_133
		lw $t0, 144($sp) # $t0 = internal_130
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 164($sp) # $t1 = internal_125
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 132($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_130
		lw $t0, 156($sp)
		sw $t0, 4($sp) # Storing internal_130
		
		# Argument internal_114
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_114
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 156($sp) # internal_130 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8744937301390
		j foreach_type_start_8744937301390
		
		foreach_type_end_8744937301390:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_142[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 96($sp) # internal_142 = "\n"
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_143[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 92($sp) # internal_143 = " "
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 116($sp) # internal_137 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_138 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_139 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_140 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 100($sp) # internal_141 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_140
		lw $t0, 116($sp)
		sw $t0, 4($sp) # Storing internal_140
		
		# Argument internal_117
		lw $t0, 208($sp)
		sw $t0, 0($sp) # Storing internal_117
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 116($sp) # internal_140 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_137
		lw $t0, 128($sp)
		sw $t0, 4($sp) # Storing internal_137
		
		# Argument internal_115
		lw $t0, 216($sp)
		sw $t0, 0($sp) # Storing internal_115
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 112($sp) # internal_141 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_141 then goto foreach_min_body_8744937301390
		lw $t0, 100($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8744937301390
		
		# Jumping to foreach_min_end_8744937301390
		j foreach_min_end_8744937301390
		
		foreach_min_body_8744937301390:
		
		# internal_139 = array internal_125[4 * internal_137]
		lw $t0, 116($sp) # $t0 = internal_137
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 164($sp) # $t1 = internal_125
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 108($sp) # internal_139 = array internal_125[4 * internal_137]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_139
		lw $t0, 120($sp)
		sw $t0, 4($sp) # Storing internal_139
		
		# Argument internal_140
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_140
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 112($sp) # internal_141 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_141 then goto update_min_8744937301390
		lw $t0, 100($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8744937301390
		
		# Jumping to update_min_end_8744937301390
		j update_min_end_8744937301390
		
		update_min_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_140
		lw $t0, 116($sp)
		sw $t0, 4($sp) # Storing internal_140
		
		# Argument internal_139
		lw $t0, 120($sp)
		sw $t0, 0($sp) # Storing internal_139
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 116($sp) # internal_140 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_138
		lw $t0, 124($sp)
		sw $t0, 4($sp) # Storing internal_138
		
		# Argument internal_137
		lw $t0, 128($sp)
		sw $t0, 0($sp) # Storing internal_137
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 124($sp) # internal_138 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_137
		lw $t0, 128($sp)
		sw $t0, 4($sp) # Storing internal_137
		
		# Argument internal_114
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_114
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 128($sp) # internal_137 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8744937301390
		j foreach_min_start_8744937301390
		
		foreach_min_end_8744937301390:
		
		# initialize Array [internal_115]
		lw $t0, 204($sp) # $t0 = internal_115
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 88($sp) # internal_144 = new Array[internal_115]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_145 = address of allocated object Int
		
		# array internal_144[4 * internal_145] = internal_113
		lw $t0, 84($sp) # $t0 = internal_145
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 88($sp) # $t1 = internal_144
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 212($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_146 = address of allocated object Int
		
		# array internal_144[4 * internal_146] = internal_113
		lw $t0, 80($sp) # $t0 = internal_146
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 88($sp) # $t1 = internal_144
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 212($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 76($sp) # internal_147 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_140
		lw $t0, 116($sp)
		sw $t0, 4($sp) # Storing internal_140
		
		# Argument internal_117
		lw $t0, 208($sp)
		sw $t0, 0($sp) # Storing internal_117
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 88($sp) # internal_147 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_147 then goto error_branch_8744937301390
		lw $t0, 76($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8744937301390
		
		# array internal_144[4 * internal_138] = internal_114
		lw $t0, 112($sp) # $t0 = internal_138
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 88($sp) # $t1 = internal_144
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_148 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_149 = address of allocated object Int
		
		# internal_148 = array internal_144[4 * internal_149]
		lw $t0, 68($sp) # $t0 = internal_149
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 88($sp) # $t1 = internal_144
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 72($sp) # internal_148 = array internal_144[4 * internal_149]
		sw $t0, 8($t2)
		
		# If internal_148 then goto branch_Razz_8744937301390
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8744937301390
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_150 = address of allocated object Int
		
		# internal_148 = array internal_144[4 * internal_150]
		lw $t0, 64($sp) # $t0 = internal_150
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 88($sp) # $t1 = internal_144
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 72($sp) # internal_148 = array internal_144[4 * internal_150]
		sw $t0, 8($t2)
		
		# If internal_148 then goto branch_Bar_8744937301390
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8744937301390
		
		branch_Razz_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 484($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 680($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 484($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 52($sp) # internal_153 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_153
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_153
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 60($sp) # internal_153 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_151
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing internal_151
		
		# Argument internal_153
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_153
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 72($sp) # internal_151 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_151 = internal_153
		lw $t0, 52($sp)
		sw $t0, 60($sp)
		
		# Jumping to branch_end_8744937301390
		j branch_end_8744937301390
		
		branch_Bar_8744937301390:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 484($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 680($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 484($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_151
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing internal_151
		
		# Argument n
		lw $t0, 484($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 72($sp) # internal_151 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_151 = n
		lw $t0, 472($sp)
		sw $t0, 60($sp)
		
		# Jumping to branch_end_8744937301390
		j branch_end_8744937301390
		
		error_branch_8744937301390:
		
		branch_end_8744937301390:
		
		# Set attribute e of self
		lw $t0, 668($sp) # $t0 = self
		lw $t1, 60($sp) # $t1 = internal_151
		beq $t1, $zero, object_set_attribute_8744937250395
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937250395
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937250395
		j object_set_attribute_8744937250395
		int_set_attribute_8744937250395:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($t0) # self.e = internal_151
		j end_set_attribute_8744937250395
		bool_set_attribute_8744937250395:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($t0) # self.e = internal_151
		j end_set_attribute_8744937250395
		object_set_attribute_8744937250395:
		sw $t1, 28($t0) # self.e = internal_151
		end_set_attribute_8744937250395:
		
		# Get attribute a of self
		lw $t0, 668($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'a' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937253437
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937253437
		j object_get_attribute_8744937253437
		int_get_attribute_8744937253437:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 44($sp) # internal_155 = self.a
		j end_get_attribute_8744937253437
		bool_get_attribute_8744937253437:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 44($sp) # internal_155 = self.a
		j end_get_attribute_8744937253437
		object_get_attribute_8744937253437:
		sw $t1, 44($sp) # internal_155 = a
		end_get_attribute_8744937253437:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_155
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_155
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 48($sp) # internal_156 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute g of self
		lw $t0, 668($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'g' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937253467
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937253467
		j object_get_attribute_8744937253467
		int_get_attribute_8744937253467:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($sp) # internal_157 = self.g
		j end_get_attribute_8744937253467
		bool_get_attribute_8744937253467:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($sp) # internal_157 = self.g
		j end_get_attribute_8744937253467
		object_get_attribute_8744937253467:
		sw $t1, 36($sp) # internal_157 = g
		end_get_attribute_8744937253467:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_157
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_157
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 40($sp) # internal_158 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_156
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing internal_156
		
		# Argument internal_158
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_158
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_159 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute e of self
		lw $t0, 668($sp) # Get the address of self
		lw $t1, 28($t0) # Get the attribute 'e' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937253512
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937253512
		j object_get_attribute_8744937253512
		int_get_attribute_8744937253512:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($sp) # internal_160 = self.e
		j end_get_attribute_8744937253512
		bool_get_attribute_8744937253512:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($sp) # internal_160 = self.e
		j end_get_attribute_8744937253512
		object_get_attribute_8744937253512:
		sw $t1, 24($sp) # internal_160 = e
		end_get_attribute_8744937253512:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_160
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_160
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 28($sp) # internal_161 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_159
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_159
		
		# Argument internal_161
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_161
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_162 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 676($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_doh_at_Foo
		jal function_doh_at_Foo
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_163 = result of function_doh_at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_162
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing internal_162
		
		# Argument internal_163
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_163
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_164 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 676($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_printh_at_Bazz
		jal function_printh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 12($sp) # internal_165 = result of function_printh_at_Bazz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_164
		lw $t0, 20($sp)
		sw $t0, 4($sp) # Storing internal_164
		
		# Argument internal_165
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_165
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_166 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute f of self
		lw $t0, 668($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_166
		beq $t1, $zero, object_set_attribute_8744937253105
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937253105
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937253105
		j object_set_attribute_8744937253105
		int_set_attribute_8744937253105:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($t0) # self.f = internal_166
		j end_set_attribute_8744937253105
		bool_set_attribute_8744937253105:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($t0) # self.f = internal_166
		j end_set_attribute_8744937253105
		object_set_attribute_8744937253105:
		sw $t1, 32($t0) # self.f = internal_166
		end_set_attribute_8744937253105:
		
		# Loading return value in $v1
		lw $v1, 668($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 668
		
		jr $ra
		
	function___init___at_Bazz:
		# Function parameters
		#   $ra = 228($sp)
		#   self = 224($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -224
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 220($sp) # internal_0 = address of allocated object Int
		
		# Set attribute h of self
		lw $t0, 224($sp) # $t0 = self
		lw $t1, 220($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8744937253626
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937253626
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937253626
		j object_set_attribute_8744937253626
		int_set_attribute_8744937253626:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8744937253626
		bool_set_attribute_8744937253626:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8744937253626
		object_set_attribute_8744937253626:
		sw $t1, 8($t0) # self.h = internal_0
		end_set_attribute_8744937253626:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 216($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 212($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_3 = address of allocated object Int
		
		# Allocating NUll to internal_4
		sw $zero, 204($sp) # internal_4 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 200($sp) # internal_5 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 188($sp) # internal_8 = address of allocated object Int
		
		# internal_6 = typeof self that is the first word of the object
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		sw $t0, 196($sp)
		
		# internal_7 = internal_6
		lw $t0, 196($sp)
		sw $t0, 192($sp)
		
		while_start_8744937301489:
		
		# internal_8 = EqualAddress(internal_7, internal_4)
		lw $t0, 192($sp)
		lw $t1, 204($sp)
		seq $t2, $t0, $t1
		lw $t0, 188($sp)
		sw $t2, 8($t0)
		
		# If internal_8 then goto while_end_8744937301489
		lw $t0, 188($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8744937301489
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_5
		lw $t0, 212($sp)
		sw $t0, 4($sp) # Storing internal_5
		
		# Argument internal_2
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 212($sp) # internal_5 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_7 = ancestor of internal_7
		lw $t0, 192($sp)
		lw $t0, 4($t0)
		sw $t0, 192($sp)
		
		# Jumping to while_start_8744937301489
		j while_start_8744937301489
		
		while_end_8744937301489:
		
		# internal_7 = internal_6
		lw $t0, 196($sp)
		sw $t0, 192($sp)
		
		# initialize Array [internal_5]
		lw $t0, 200($sp) # $t0 = internal_5
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 184($sp) # internal_9 = new Array[internal_5]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 180($sp) # internal_10 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_11 = address of allocated object Int
		
		foreach_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 192($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_5
		lw $t0, 212($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 188($sp) # internal_11 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_11 then goto foreach_body_8744937301489
		lw $t0, 176($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8744937301489
		
		# Jumping to foreach_end_8744937301489
		j foreach_end_8744937301489
		
		foreach_body_8744937301489:
		
		# array internal_9[4 * internal_10] = internal_7
		lw $t0, 180($sp) # $t0 = internal_10
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 184($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 192($sp)
		sw $t0, 0($t1)
		
		# internal_7 = ancestor of internal_7
		lw $t0, 192($sp)
		lw $t0, 4($t0)
		sw $t0, 192($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 192($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_2
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 192($sp) # internal_10 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8744937301489
		j foreach_start_8744937301489
		
		foreach_end_8744937301489:
		
		# initialize Array [internal_3]
		lw $t0, 208($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 172($sp) # internal_12 = new Array[internal_3]
		
		# initialize Array [internal_3]
		lw $t0, 208($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 168($sp) # internal_13 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 160($sp) # internal_15 = address of allocated object Int
		
		# internal_14 = direction of Bazz
		la $t0, type_Bazz
		sw $t0, 164($sp)
		
		# array internal_12[4 * internal_15] = internal_14
		lw $t0, 160($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 172($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 164($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_15] = internal_5
		lw $t0, 160($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 152($sp) # internal_17 = address of allocated object Int
		
		# internal_16 = direction of Razz
		la $t0, type_Razz
		sw $t0, 156($sp)
		
		# array internal_12[4 * internal_17] = internal_16
		lw $t0, 152($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 172($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 156($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_17] = internal_5
		lw $t0, 152($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_19 = address of allocated object Int
		
		# internal_18 = direction of Foo
		la $t0, type_Foo
		sw $t0, 148($sp)
		
		# array internal_12[4 * internal_19] = internal_18
		lw $t0, 144($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 172($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 148($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_19] = internal_5
		lw $t0, 144($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_21 = address of allocated object Int
		
		# internal_20 = direction of Bar
		la $t0, type_Bar
		sw $t0, 140($sp)
		
		# array internal_12[4 * internal_21] = internal_20
		lw $t0, 136($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 172($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 140($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_21] = internal_5
		lw $t0, 136($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_22 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_23 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 120($sp) # internal_25 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 116($sp) # internal_26 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_28 = address of allocated object Int
		
		foreach_type_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 144($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_3
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 140($sp) # internal_23 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_23 then goto foreach_type_body_8744937301489
		lw $t0, 128($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8744937301489
		
		# Jumping to foreach_type_end_8744937301489
		j foreach_type_end_8744937301489
		
		foreach_type_body_8744937301489:
		
		# internal_24 = array internal_12[4 * internal_22]
		lw $t0, 132($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 172($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 124($sp) # internal_24 = array internal_12[4 * internal_22]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_1
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_25 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_5
		lw $t0, 212($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 128($sp) # internal_26 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_26 then goto foreach_ancestor_body_8744937301489
		lw $t0, 116($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8744937301489
		
		# Jumping to foreach_ancestor_end_8744937301489
		j foreach_ancestor_end_8744937301489
		
		foreach_ancestor_body_8744937301489:
		
		# internal_27 = array internal_9[4 * internal_25]
		lw $t0, 120($sp) # $t0 = internal_25
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 184($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 112($sp) # internal_27 = array internal_9[4 * internal_25]
		
		# internal_28 = EqualAddress(internal_24, internal_27)
		lw $t0, 124($sp)
		lw $t1, 112($sp)
		seq $t2, $t0, $t1
		lw $t0, 108($sp)
		sw $t2, 8($t0)
		
		# If internal_28 then goto foreach_ancestor_end_8744937301489
		lw $t0, 108($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8744937301489
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_2
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_25 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8744937301489
		j foreach_ancestor_start_8744937301489
		
		foreach_ancestor_end_8744937301489:
		
		# array internal_13[4 * internal_22] = internal_25
		lw $t0, 132($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 120($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 144($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_2
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 144($sp) # internal_22 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8744937301489
		j foreach_type_start_8744937301489
		
		foreach_type_end_8744937301489:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_34[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 84($sp) # internal_34 = "\n"
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_35[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 80($sp) # internal_35 = " "
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_29 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 100($sp) # internal_30 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_31 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 92($sp) # internal_32 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_33 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 104($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 212($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 104($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 116($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_3
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto foreach_min_body_8744937301489
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8744937301489
		
		# Jumping to foreach_min_end_8744937301489
		j foreach_min_end_8744937301489
		
		foreach_min_body_8744937301489:
		
		# internal_31 = array internal_13[4 * internal_29]
		lw $t0, 104($sp) # $t0 = internal_29
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 96($sp) # internal_31 = array internal_13[4 * internal_29]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_31
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing internal_31
		
		# Argument internal_32
		lw $t0, 104($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto update_min_8744937301489
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8744937301489
		
		# Jumping to update_min_end_8744937301489
		j update_min_end_8744937301489
		
		update_min_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 104($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_31
		lw $t0, 108($sp)
		sw $t0, 0($sp) # Storing internal_31
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 104($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_30
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing internal_30
		
		# Argument internal_29
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_29
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 112($sp) # internal_30 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 116($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_2
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 116($sp) # internal_29 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8744937301489
		j foreach_min_start_8744937301489
		
		foreach_min_end_8744937301489:
		
		# initialize Array [internal_3]
		lw $t0, 208($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 76($sp) # internal_36 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_37 = address of allocated object Int
		
		# array internal_36[4 * internal_37] = internal_1
		lw $t0, 72($sp) # $t0 = internal_37
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 76($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_38 = address of allocated object Int
		
		# array internal_36[4 * internal_38] = internal_1
		lw $t0, 68($sp) # $t0 = internal_38
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 76($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_39 = address of allocated object Int
		
		# array internal_36[4 * internal_39] = internal_1
		lw $t0, 64($sp) # $t0 = internal_39
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 76($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_40 = address of allocated object Int
		
		# array internal_36[4 * internal_40] = internal_1
		lw $t0, 60($sp) # $t0 = internal_40
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 76($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_41 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 104($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 212($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 68($sp) # internal_41 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_41 then goto error_branch_8744937301489
		lw $t0, 56($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8744937301489
		
		# array internal_36[4 * internal_30] = internal_2
		lw $t0, 100($sp) # $t0 = internal_30
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 76($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 212($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_42 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_43 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_43]
		lw $t0, 48($sp) # $t0 = internal_43
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 76($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 52($sp) # internal_42 = array internal_36[4 * internal_43]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Bazz_8744937301489
		lw $t0, 52($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bazz_8744937301489
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_44 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_44]
		lw $t0, 44($sp) # $t0 = internal_44
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 76($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 52($sp) # internal_42 = array internal_36[4 * internal_44]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Razz_8744937301489
		lw $t0, 52($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8744937301489
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_45 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_45]
		lw $t0, 40($sp) # $t0 = internal_45
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 76($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 52($sp) # internal_42 = array internal_36[4 * internal_45]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Foo_8744937301489
		lw $t0, 52($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Foo_8744937301489
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_46 = address of allocated object Int
		
		# internal_42 = array internal_36[4 * internal_46]
		lw $t0, 36($sp) # $t0 = internal_46
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 76($sp) # $t1 = internal_36
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 52($sp) # internal_42 = array internal_36[4 * internal_46]
		sw $t0, 8($t2)
		
		# If internal_42 then goto branch_Bar_8744937301489
		lw $t0, 52($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8744937301489
		
		branch_Bazz_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 236($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 40($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 24($sp) # internal_49 = address of allocated object Foo
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_49
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 32($sp) # internal_49 = result of function___init___at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument internal_49
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = internal_49
		lw $t0, 24($sp)
		sw $t0, 32($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		branch_Razz_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 236($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 40($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 16($sp) # internal_51 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_51
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 24($sp) # internal_51 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument internal_51
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = internal_51
		lw $t0, 16($sp)
		sw $t0, 32($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		branch_Foo_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 236($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 40($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 8($sp) # internal_53 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_53
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_53
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_53 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument internal_53
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_53
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = internal_53
		lw $t0, 8($sp)
		sw $t0, 32($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		branch_Bar_8744937301489:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 236($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 40($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing internal_47
		
		# Argument n
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_47 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_47 = n
		lw $t0, 28($sp)
		sw $t0, 32($sp)
		
		# Jumping to branch_end_8744937301489
		j branch_end_8744937301489
		
		error_branch_8744937301489:
		
		branch_end_8744937301489:
		
		# Set attribute g of self
		lw $t0, 224($sp) # $t0 = self
		lw $t1, 32($sp) # $t1 = internal_47
		beq $t1, $zero, object_set_attribute_8744937254169
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937254169
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937254169
		j object_set_attribute_8744937254169
		int_set_attribute_8744937254169:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_47
		j end_set_attribute_8744937254169
		bool_set_attribute_8744937254169:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_47
		j end_set_attribute_8744937254169
		object_set_attribute_8744937254169:
		sw $t1, 12($t0) # self.g = internal_47
		end_set_attribute_8744937254169:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_printh_at_Bazz
		jal function_printh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 8($sp) # internal_55 = result of function_printh_at_Bazz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute i of self
		lw $t0, 224($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_55
		beq $t1, $zero, object_set_attribute_8744937254148
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937254148
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937254148
		j object_set_attribute_8744937254148
		int_set_attribute_8744937254148:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_55
		j end_set_attribute_8744937254148
		bool_set_attribute_8744937254148:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_55
		j end_set_attribute_8744937254148
		object_set_attribute_8744937254148:
		sw $t1, 16($t0) # self.i = internal_55
		end_set_attribute_8744937254148:
		
		# Loading return value in $v1
		lw $v1, 224($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 224
		
		jr $ra
		
	function_printh_at_Bazz:
		# Function parameters
		#   $ra = 16($sp)
		#   self = 12($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -12
		
		# Get attribute h of self
		lw $t0, 12($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'h' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937257798
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937257798
		j object_get_attribute_8744937257798
		int_get_attribute_8744937257798:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($sp) # internal_0 = self.h
		j end_get_attribute_8744937257798
		bool_get_attribute_8744937257798:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($sp) # internal_0 = self.h
		j end_get_attribute_8744937257798
		object_get_attribute_8744937257798:
		sw $t1, 8($sp) # internal_0 = h
		end_get_attribute_8744937257798:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_0
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function_out_int_at_IO
		jal function_out_int_at_IO
		lw $ra, 8($sp)
		sw $v1, 16($sp) # internal_1 = result of function_out_int_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_2 = address of allocated object Int
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 12
		
		jr $ra
		
	function_doh_at_Bazz:
		# Function parameters
		#   $ra = 24($sp)
		#   self = 20($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -20
		
		# Get attribute h of self
		lw $t0, 20($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'h' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937257864
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937257864
		j object_get_attribute_8744937257864
		int_get_attribute_8744937257864:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp) # internal_1 = self.h
		j end_get_attribute_8744937257864
		bool_get_attribute_8744937257864:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp) # internal_1 = self.h
		j end_get_attribute_8744937257864
		object_get_attribute_8744937257864:
		sw $t1, 12($sp) # internal_1 = h
		end_get_attribute_8744937257864:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_1
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 28($sp) # i = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute h of self
		lw $t0, 20($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'h' from the instance
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8744937257930
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8744937257930
		j object_get_attribute_8744937257930
		int_get_attribute_8744937257930:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($sp) # internal_2 = self.h
		j end_get_attribute_8744937257930
		bool_get_attribute_8744937257930:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($sp) # internal_2 = self.h
		j end_get_attribute_8744937257930
		object_get_attribute_8744937257930:
		sw $t1, 8($sp) # internal_2 = h
		end_get_attribute_8744937257930:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 20($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_3
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_4 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute h of self
		lw $t0, 20($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_4
		beq $t1, $zero, object_set_attribute_8744937257906
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937257906
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937257906
		j object_set_attribute_8744937257906
		int_set_attribute_8744937257906:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_4
		j end_set_attribute_8744937257906
		bool_set_attribute_8744937257906:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_4
		j end_set_attribute_8744937257906
		object_set_attribute_8744937257906:
		sw $t1, 8($t0) # self.h = internal_4
		end_set_attribute_8744937257906:
		
		# Loading return value in $v1
		lw $v1, 16($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 20
		
		jr $ra
		
	function___init___at_Main:
		# Function parameters
		#   $ra = 20($sp)
		#   self = 16($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -16
		
		# Allocating Bazz
		li $v0, 9
		lw $a0, type_Bazz
		syscall
		la $t0, type_Bazz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_0 = address of allocated object Bazz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function___init___at_Bazz
		jal function___init___at_Bazz
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_0 = result of function___init___at_Bazz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute a of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 12($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8744937257978
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937257978
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937257978
		j object_set_attribute_8744937257978
		int_set_attribute_8744937257978:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.a = internal_0
		j end_set_attribute_8744937257978
		bool_set_attribute_8744937257978:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.a = internal_0
		j end_set_attribute_8744937257978
		object_set_attribute_8744937257978:
		sw $t1, 8($t0) # self.a = internal_0
		end_set_attribute_8744937257978:
		
		# Allocating Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 8($sp) # internal_1 = address of allocated object Foo
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_1
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_1 = result of function___init___at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute b of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_1
		beq $t1, $zero, object_set_attribute_8744937258530
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937258530
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937258530
		j object_set_attribute_8744937258530
		int_set_attribute_8744937258530:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.b = internal_1
		j end_set_attribute_8744937258530
		bool_set_attribute_8744937258530:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.b = internal_1
		j end_set_attribute_8744937258530
		object_set_attribute_8744937258530:
		sw $t1, 12($t0) # self.b = internal_1
		end_set_attribute_8744937258530:
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 4($sp) # internal_2 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 12($sp) # internal_2 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute c of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 4($sp) # $t1 = internal_2
		beq $t1, $zero, object_set_attribute_8744937258560
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937258560
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937258560
		j object_set_attribute_8744937258560
		int_set_attribute_8744937258560:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.c = internal_2
		j end_set_attribute_8744937258560
		bool_set_attribute_8744937258560:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.c = internal_2
		j end_set_attribute_8744937258560
		object_set_attribute_8744937258560:
		sw $t1, 16($t0) # self.c = internal_2
		end_set_attribute_8744937258560:
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 0($sp) # internal_3 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 8($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 8($sp) # internal_3 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute d of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_3
		beq $t1, $zero, object_set_attribute_8744937258593
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8744937258593
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8744937258593
		j object_set_attribute_8744937258593
		int_set_attribute_8744937258593:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.d = internal_3
		j end_set_attribute_8744937258593
		bool_set_attribute_8744937258593:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.d = internal_3
		j end_set_attribute_8744937258593
		object_set_attribute_8744937258593:
		sw $t1, 20($t0) # self.d = internal_3
		end_set_attribute_8744937258593:
		
		# Loading return value in $v1
		lw $v1, 16($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 16
		
		jr $ra
		
	function_main_at_Main:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 19 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 19
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 100
		sb $t0, 8($v0) # internal_0[0] = 'd'
		
		addi $t0, $zero, 111
		sb $t0, 9($v0) # internal_0[1] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_0[2] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 11($v0) # internal_0[3] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 12($v0) # internal_0[4] = 'o'
		
		addi $t0, $zero, 116
		sb $t0, 13($v0) # internal_0[5] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 14($v0) # internal_0[6] = 'h'
		
		addi $t0, $zero, 105
		sb $t0, 15($v0) # internal_0[7] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 16($v0) # internal_0[8] = 'n'
		
		addi $t0, $zero, 103
		sb $t0, 17($v0) # internal_0[9] = 'g'
		
		sb $zero, 18($v0) # Null-terminator at the end of the string
		
		sw $v0, 0($sp) # internal_0 = "do nothing"
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	main:
		# Reserving space for local variables
		addi $sp, $sp, -8
		
		# Allocating Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 4($sp) # internal_0 = address of allocated object Main
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function___init___at_Main
		jal function___init___at_Main
		lw $ra, 4($sp)
		sw $v1, 12($sp) # internal_0 = result of function___init___at_Main
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function_main_at_Main
		jal function_main_at_Main
		lw $ra, 4($sp)
		sw $v1, 8($sp) # internal_1 = result of function_main_at_Main
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Exit program
		li $v0, 10
		syscall
		
		