.data
	type_Object: .word 8
	type_Object_inherits_from: .word 0
	type_Object_attributes: .word 0
	type_Object_name_size: .word 6
	type_Object_name: .asciiz "Object"
	
	type_IO: .word 8
	type_IO_inherits_from: .word type_Object
	type_IO_attributes: .word 0
	type_IO_name_size: .word 2
	type_IO_name: .asciiz "IO"
	
	type_Int: .word 8
	type_Int_inherits_from: .word type_Object
	type_Int_attributes: .word 0
	type_Int_name_size: .word 3
	type_Int_name: .asciiz "Int"
	
	type_String: .word 8
	type_String_inherits_from: .word type_Object
	type_String_attributes: .word 0
	type_String_name_size: .word 6
	type_String_name: .asciiz "String"
	
	type_Bool: .word 8
	type_Bool_inherits_from: .word type_Object
	type_Bool_attributes: .word 0
	type_Bool_name_size: .word 4
	type_Bool_name: .asciiz "Bool"
	
	type_Board: .word 20
	type_Board_inherits_from: .word type_IO
	type_Board_attributes: .word 3
	type_Board_name_size: .word 5
	type_Board_name: .asciiz "Board"
	
	type_CellularAutomaton: .word 24
	type_CellularAutomaton_inherits_from: .word type_Board
	type_CellularAutomaton_attributes: .word 4
	type_CellularAutomaton_name_size: .word 17
	type_CellularAutomaton_name: .asciiz "CellularAutomaton"
	
	type_Main: .word 28
	type_Main_inherits_from: .word type_CellularAutomaton
	type_Main_attributes: .word 5
	type_Main_name_size: .word 4
	type_Main_name: .asciiz "Main"
	
	buffer_input: .space 1024
	debug_log: .asciiz "debug_log\n"

.text
	function_add:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Addition operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		add $t2, $t0, $t1 # $t2 = $t0 + $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_sub:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Subtraction operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		sub $t2, $t0, $t1 # $t2 = $t0 - $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_mult:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Multiplication operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		mult $t0, $t1 # $t2 = $t0 * $t1
		mflo $t2
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_div:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Division operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		div $t0, $t1 # $t2 = $t0 / $t1
		mflo $t2
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_xor:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Xor operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		xor $t2, $t0, $t1 # $t0 = $t0 ^ $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Less than operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		slt $t2, $t0, $t1 # $t2 = $t0 < $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than_or_equal:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Less than operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		sle $t2, $t0, $t1 # $t2 = $t0 <= $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_equal:
		# Function parameters
		#   $ra = 40($sp)
		#   a = 36($sp)
		#   b = 32($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -32
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_0 = address of allocated object Int
		
		# internal_1 = typeof a that is the first word of the object
		lw $t0, 36($sp)
		lw $t1, 0($t0)
		sw $t1, 24($sp)
		
		# internal_2 = direction of Int
		la $t0, type_Int
		sw $t0, 20($sp)
		
		# internal_3 = direction of Bool
		la $t0, type_Bool
		sw $t0, 16($sp)
		
		# internal_4 = direction of String
		la $t0, type_String
		sw $t0, 12($sp)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_5 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_6 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_7 = address of allocated object Int
		
		# internal_5 = EqualAddress(internal_1, internal_2)
		lw $t0, 24($sp)
		lw $t1, 20($sp)
		seq $t2, $t0, $t1
		lw $t0, 8($sp)
		sw $t2, 8($t0)
		
		# internal_6 = EqualAddress(internal_1, internal_3)
		lw $t0, 24($sp)
		lw $t1, 16($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_7 = EqualAddress(internal_1, internal_4)
		lw $t0, 24($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# If internal_5 then goto a_is_type_int_or_bool
		lw $t0, 8($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_int_or_bool
		
		# If internal_6 then goto a_is_type_int_or_bool
		lw $t0, 4($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_int_or_bool
		
		# If internal_7 then goto a_is_type_string
		lw $t0, 0($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_string
		
		# Jumping to a_is_type_object
		j a_is_type_object
		
		a_is_type_int_or_bool:
		
		# internal_0 = EqualInt(a, b)
		lw $t0, 36($sp)
		lw $t0, 8($t0)
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# Jumping to end_of_equal
		j end_of_equal
		
		a_is_type_string:
		
		# internal_0 = EqualStr(a, b)
		lw $t0, 36($sp)
		lw $t1, 32($sp)
		addi $t0, $t0, 8
		addi $t1, $t1, 8
		
		# By default we assume the strings are equals
		addi $t4, $zero, 1
		lw $t5, 28($sp)
		sw $t4, 8($t5)
		
		while_compare_strings_start:
		lb $t2, 0($t0)
		lb $t3, 0($t1)
		beq $t2, $t3, while_compare_strings_update
		
		# The strings are no equals
		lw $t5, 28($sp)
		sw $zero, 8($t5)
		j while_compare_strings_end
		
		while_compare_strings_update:
		addi $t0, $t0, 1
		addi $t1, $t1, 1
		beq $t2, $zero, while_compare_strings_end
		j while_compare_strings_start
		while_compare_strings_end:
		
		# Jumping to end_of_equal
		j end_of_equal
		
		a_is_type_object:
		
		# Equal operation
		lw $t0, 36($sp) # Save in $t0 the left operand address
		lw $t1, 32($sp) # Save in $t1 the right operand address
		seq $t2, $t0, $t1 # $t2 = $t0 == $t1
		
		lw $t0, 28($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Jumping to end_of_equal
		j end_of_equal
		
		end_of_equal:
		
		# Loading return value in $v1
		lw $v1, 28($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 32
		
		jr $ra
		
	function___init___at_Object:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_abort_at_Object:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Exit program
		li $v0, 10
		syscall
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_type_name_at_Object:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = name of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($t0) # $t1 = type of self
		lw $t2, 12($t1) # $t1 = length of the name of self
		lw $t3, 16($t1) # $t1 = name of self
		
		addi $t2, $t2, 9 # Setting space for the type, the size and the null byte
		li $v0, 9
		move $a0, $t2
		syscall
		addi $t2, $t2, -9 # Restoring space for the type, the size and the null byte
		
		la $t4, type_String
		sw $t4, 0($v0) # Setting type in the first word of the object
		
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		move $t4, $v0 # $t4 = direction of the new string
		addi $t4, $t4, 8 # Pointer to the first character of the string
		addi $t0, $t0, 8 # Pointer to the first character of the string in self
		xor $t5, $t5, $t5 # Initializing counter
		while_copy_name_start:
		beq $t5, $t1, while_copy_name_end
		lb $t6, 0($t0) # Loading the character
		sb $t6, 0($t4)
		addi $t4, $t4, 1 # Incrementing the pointer to the new string
		addi $t0, $t0, 1 # Incrementing the pointer to the string in self
		addi $t5, $t5, 1 # Incrementing counter
		j while_copy_name_start
		while_copy_name_end:
		
		sb $zero, 0($t4) # Setting the null byte
		
		sw $t4, 0($sp) # Storing the new string in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_copy_at_Object:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = copy of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($t0) # $t1 = type of self
		lw $t2, 4($t0) # $t2 = length of self in bytes
		
		# Allocating space for the new object
		li $v0, 9
		move $a0, $t2
		syscall
		move $t3, $v0 # $t3 = direction of the new object
		sw $t1, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		# Initializing the variable of the loop
		addi $t0, $t0, 8 # Pointer to the first character of the object
		addi $t3, $t3, 8 # Pointer to the first character of the object
		addi $t2, $2, -8 # Decrementing in 8 the length of the object
		xor $t4, $t4, $t4 # Initializing counter
		
		# Loop copying the object
		while_copy_start:
		beq $t4, $t2, while_copy_end
		lb $t5, 0($t0) # Loading the byte
		sb $t5, 0($t3) # Storing the byte
		addi $t0, $t0, 1 # Incrementing the pointer to the object
		addi $t3, $t3, 1 # Incrementing the pointer to the new object
		addi $t4, $t4, 1 # Incrementing counter
		j while_copy_start
		while_copy_end:
		sw $v0, 0($sp) # Storing the new object in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_IO:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_out_string_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   x = 0($sp)
		
		lw $t0, 0($sp) # $t0 = x
		addi $t0, $t0, 8 # Pointer to the first character of the string
		
		# Printing the string x
		li $v0, 4
		move $a0, $t0
		syscall
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_out_int_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   x = 0($sp)
		
		# Printing the string x
		li $v0, 1
		lw $a0, 0($sp)
		lw $a0, 8($a0)
		syscall
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_in_string_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		li $v0, 8
		la $a0, buffer_input
		li $a1, 1024
		syscall
		
		xor $t0, $t0, $t0 # Initializing counter
		while_read_start:
		lw $t1, buffer_input($t0) # Loading the byte
		beq $t1, $zero, while_read_end
		addi $t0, $t0, 1 # Incrementing counter
		j while_read_start
		while_read_end:
		
		addi $t0, $t0, 9 # Adding space for the type, the size and the null byte
		li $v0, 9
		move $a0, $t0
		syscall
		la $t2, type_String
		sw $t2, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t3, $v0, 8 # Pointer to the first character of the string
		xor $t4, $t4, $t4 # Initializing counter
		
		while_copy_from_buffer_start:
		beq $t4, $t0, while_copy_from_buffer_end
		lw $t5, buffer_input($t4) # Loading the byte
		sb $t5, 0($t3) # Storing the byte
		addi $t3, $t3, 1 # Imcremeenting pointer
		addi $t4, $t4, 1 # Incrementing counter
		j while_copy_from_buffer_start
		while_copy_from_buffer_end:
		
		sb $zero, 0($t3) # Storing the null byte
		
		sw $v0, 0($sp) # Storing the new object in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_in_int_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		li $v0, 5
		syscall
		sw $v0, 0($sp) # Storing the new object in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_String:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_length_at_String:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = length of self
		lw $t0, 4($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9 # Subtracting 9 for the type, length, and null-terminator
		sw $t1, 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_concat_at_String:
		# Function parameters
		#   $ra = 12($sp)
		#   self = 8($sp)
		#   s = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = self + s
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		lw $t2, 4($t0) # $t2 = length of str1
		lw $t3, 4($t1) # $t3 = length of str2
		add $t4, $t2, $t3 # $t4 = length of str1 + str2
		addi $t4, $t4, 9 # Adding the space for the type (4bytes), the length(4bytes) and the null-terminator(1byte)
		
		li $v0, 9
		move $a0, $t4
		syscall
		addi $t4, $t4, -9 # Restoring $t4 = length of str1 + str2
		add $t5, $zero, $v0 # $t5 = address of the new string object
		addi $t5, $t5, 8 # $t5 = address of the first byte of the new string
		
		la $t8, type_String
		sw $t8, 0($v0) # Setting type in the first word of th object
		
		sw $a0, 4($v0) # Setting length of the string in the second word of the object
		
		# Copying str1 to the new string
		xor $t6, $t6, $t6 # $t6 = 0 Initializing counter
		while_copy_str1_start:
		beq $t6, $t2, while_copy_str1_end
		lb $t7, 0($t0)
		sb $t7, 0($t5)
		add $t0, $t0, 1 # $t0 = $t0 + 1 Incrementing the address of str1
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_str1_start
		while_copy_str1_end:
		
		# Copying str2 to the new string
		while_copy_str2_start:
		beq $t6, $t4, while_copy_str2_end
		lb $t7, 0($t1)
		sb $t7, 0($t5)
		add $t1, $t1, 1 # $t0 = $t0 + 1 Incrementing the address of str1
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_str2_start
		while_copy_str2_end:
		
		sb $zero, 0($t5) # Setting the null-terminator
		
		sw $v0, 0($sp) # internal_0 = self + s
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_substr_at_String:
		# Function parameters
		#   $ra = 16($sp)
		#   self = 12($sp)
		#   i = 8($sp)
		#   l = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = self[i:i + l]
		lw $t0, 12($sp) # $t0 = address of the string
		lw $t1, 4($t0) # $t1 = length of the string
		lw $t2, 8($sp) # $t2 = start of the substring
		lw $t3, 4($sp) # $t3 = length of the substring
		add $t4, $t2, $t3 # $t4 = start of the substring + length of the substring
		
		bge $t4, $t1, substring_out_of_bounds
		
		addi $t3, $t3, 9
		li $v0, 9
		move $a0, $t3
		syscall
		addi $t3, $t3, -9
		
		la $t5, type_String
		sw $t5, 0($v0) # Setting type in the first word of the object
		
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t0, $t0, 8 # pointing to the first byte of the string
		add $t0, $t0, $t2 # pointing to the first byte of the substring
		move $t5, $v0 # $t5 = address of the new string
		add $t5, $t5, 8 # pointing to the first byte of the string
		xor $t6, $t6, $t6 # $t6 = 0 Initializing counter
		while_copy_substr_start:
		beq $t6, $t3, while_copy_substr_end
		lb $t7, 0($t0)
		sb $t7, 0($t5)
		addi $t0, $t0, 1 # $t0 = $t0 + 1 Incrementing the address of the string
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_substr_start
		while_copy_substr_end:
		
		sb $zero, 0($t5) # Setting the null-terminator
		
		sw $v0, 0($sp) # internal_0 = self[i:i + l]
		j substring_not_out_of_bounds
		
		substring_out_of_bounds:
		li $v0, 17
		addi $a0, $zero, 1
		syscall
		
		substring_not_out_of_bounds:
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_Board:
		# Function parameters
		#   $ra = 16($sp)
		#   self = 12($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -12
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_0 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 12($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_0
		sw $t1, 8($t0) # self.rows = internal_0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_1 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 12($sp) # $t0 = self
		lw $t1, 4($sp) # $t1 = internal_1
		sw $t1, 12($t0) # self.columns = internal_1
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_2 = address of allocated object Int
		
		# Set attribute board_size of self
		lw $t0, 12($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_2
		sw $t1, 16($t0) # self.board_size = internal_2
		
		# Loading return value in $v1
		lw $v1, 12($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 12
		
		jr $ra
		
	function_size_of_board_at_Board:
		# Function parameters
		#   $ra = 12($sp)
		#   self = 8($sp)
		#   initial = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument initial
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing initial
		
		# Calling function function_length_at_String
		jal function_length_at_String
		lw $ra, 4($sp)
		sw $v1, 8($sp) # internal_0 = result of function_length_at_String
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_board_init_at_Board:
		# Function parameters
		#   $ra = 168($sp)
		#   self = 164($sp)
		#   start = 160($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -160
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 176($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument start
		lw $t0, 172($sp)
		sw $t0, 0($sp) # Storing start
		
		# Calling function function_size_of_board_at_Board
		jal function_size_of_board_at_Board
		lw $ra, 8($sp)
		sw $v1, 164($sp) # internal_1 = result of function_size_of_board_at_Board
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 152($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 156($sp)
		j end_assign
		not_is_Bool_or_Int:
		# size = internal_1
		lw $t0, 152($sp)
		sw $t0, 156($sp)
		end_assign:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_3 = address of allocated object Int
		
		# Allocating Int 15
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 15
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 140($sp) # internal_4 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument size
		lw $t0, 168($sp)
		sw $t0, 4($sp) # Storing size
		
		# Argument internal_4
		lw $t0, 152($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 148($sp) # internal_5 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 136($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 144($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_3 = internal_5
		lw $t0, 136($sp)
		sw $t0, 144($sp)
		end_assign:
		
		# If internal_3 then goto then_8789948665158
		lw $t0, 144($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948665158
		
		# Jumping to else_8789948665158
		j else_8789948665158
		
		then_8789948665158:
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_6 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 132($sp) # $t1 = internal_6
		sw $t1, 8($t0) # self.rows = internal_6
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_7 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 128($sp) # $t1 = internal_7
		sw $t1, 12($t0) # self.columns = internal_7
		
		# Set attribute board_size of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 156($sp) # $t1 = size
		sw $t1, 16($t0) # self.board_size = size
		
		lw $t0, 156($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 148($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_2 = size
		lw $t0, 156($sp)
		sw $t0, 148($sp)
		end_assign:
		
		# Jumping to endif_8789948665158
		j endif_8789948665158
		
		else_8789948665158:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 120($sp) # internal_9 = address of allocated object Int
		
		# Allocating Int 16
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 16
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 116($sp) # internal_10 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument size
		lw $t0, 168($sp)
		sw $t0, 4($sp) # Storing size
		
		# Argument internal_10
		lw $t0, 128($sp)
		sw $t0, 0($sp) # Storing internal_10
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 124($sp) # internal_11 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 112($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 120($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_9 = internal_11
		lw $t0, 112($sp)
		sw $t0, 120($sp)
		end_assign:
		
		# If internal_9 then goto then_8789948665152
		lw $t0, 120($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948665152
		
		# Jumping to else_8789948665152
		j else_8789948665152
		
		then_8789948665152:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_12 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 108($sp) # $t1 = internal_12
		sw $t1, 8($t0) # self.rows = internal_12
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_13 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 104($sp) # $t1 = internal_13
		sw $t1, 12($t0) # self.columns = internal_13
		
		# Set attribute board_size of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 156($sp) # $t1 = size
		sw $t1, 16($t0) # self.board_size = size
		
		lw $t0, 156($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 124($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_8 = size
		lw $t0, 156($sp)
		sw $t0, 124($sp)
		end_assign:
		
		# Jumping to endif_8789948665152
		j endif_8789948665152
		
		else_8789948665152:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_15 = address of allocated object Int
		
		# Allocating Int 20
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 20
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 92($sp) # internal_16 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument size
		lw $t0, 168($sp)
		sw $t0, 4($sp) # Storing size
		
		# Argument internal_16
		lw $t0, 104($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_17 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 88($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 96($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_15 = internal_17
		lw $t0, 88($sp)
		sw $t0, 96($sp)
		end_assign:
		
		# If internal_15 then goto then_8789948665146
		lw $t0, 96($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948665146
		
		# Jumping to else_8789948665146
		j else_8789948665146
		
		then_8789948665146:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_18 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 84($sp) # $t1 = internal_18
		sw $t1, 8($t0) # self.rows = internal_18
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_19 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 80($sp) # $t1 = internal_19
		sw $t1, 12($t0) # self.columns = internal_19
		
		# Set attribute board_size of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 156($sp) # $t1 = size
		sw $t1, 16($t0) # self.board_size = size
		
		lw $t0, 156($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 100($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_14 = size
		lw $t0, 156($sp)
		sw $t0, 100($sp)
		end_assign:
		
		# Jumping to endif_8789948665146
		j endif_8789948665146
		
		else_8789948665146:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_21 = address of allocated object Int
		
		# Allocating Int 21
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 21
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_22 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument size
		lw $t0, 168($sp)
		sw $t0, 4($sp) # Storing size
		
		# Argument internal_22
		lw $t0, 80($sp)
		sw $t0, 0($sp) # Storing internal_22
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 76($sp) # internal_23 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 64($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 72($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_21 = internal_23
		lw $t0, 64($sp)
		sw $t0, 72($sp)
		end_assign:
		
		# If internal_21 then goto then_8789948665140
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948665140
		
		# Jumping to else_8789948665140
		j else_8789948665140
		
		then_8789948665140:
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_24 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 60($sp) # $t1 = internal_24
		sw $t1, 8($t0) # self.rows = internal_24
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_25 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 56($sp) # $t1 = internal_25
		sw $t1, 12($t0) # self.columns = internal_25
		
		# Set attribute board_size of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 156($sp) # $t1 = size
		sw $t1, 16($t0) # self.board_size = size
		
		lw $t0, 156($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 76($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_20 = size
		lw $t0, 156($sp)
		sw $t0, 76($sp)
		end_assign:
		
		# Jumping to endif_8789948665140
		j endif_8789948665140
		
		else_8789948665140:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_27 = address of allocated object Int
		
		# Allocating Int 25
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 25
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_28 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument size
		lw $t0, 168($sp)
		sw $t0, 4($sp) # Storing size
		
		# Argument internal_28
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_28
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_29 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 40($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 48($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_27 = internal_29
		lw $t0, 40($sp)
		sw $t0, 48($sp)
		end_assign:
		
		# If internal_27 then goto then_8789948665134
		lw $t0, 48($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948665134
		
		# Jumping to else_8789948665134
		j else_8789948665134
		
		then_8789948665134:
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_30 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 36($sp) # $t1 = internal_30
		sw $t1, 8($t0) # self.rows = internal_30
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_31 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 32($sp) # $t1 = internal_31
		sw $t1, 12($t0) # self.columns = internal_31
		
		# Set attribute board_size of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 156($sp) # $t1 = size
		sw $t1, 16($t0) # self.board_size = size
		
		lw $t0, 156($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 52($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_26 = size
		lw $t0, 156($sp)
		sw $t0, 52($sp)
		end_assign:
		
		# Jumping to endif_8789948665134
		j endif_8789948665134
		
		else_8789948665134:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_33 = address of allocated object Int
		
		# Allocating Int 28
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 28
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_34 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument size
		lw $t0, 168($sp)
		sw $t0, 4($sp) # Storing size
		
		# Argument internal_34
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_34
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_35 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 16($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 24($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_33 = internal_35
		lw $t0, 16($sp)
		sw $t0, 24($sp)
		end_assign:
		
		# If internal_33 then goto then_8789948665122
		lw $t0, 24($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948665122
		
		# Jumping to else_8789948665122
		j else_8789948665122
		
		then_8789948665122:
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 12($sp) # internal_36 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 12($sp) # $t1 = internal_36
		sw $t1, 8($t0) # self.rows = internal_36
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_37 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_37
		sw $t1, 12($t0) # self.columns = internal_37
		
		# Set attribute board_size of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 156($sp) # $t1 = size
		sw $t1, 16($t0) # self.board_size = size
		
		lw $t0, 156($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 28($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_32 = size
		lw $t0, 156($sp)
		sw $t0, 28($sp)
		end_assign:
		
		# Jumping to endif_8789948665122
		j endif_8789948665122
		
		else_8789948665122:
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_38 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 4($sp) # $t1 = internal_38
		sw $t1, 8($t0) # self.rows = internal_38
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_39 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_39
		sw $t1, 12($t0) # self.columns = internal_39
		
		# Set attribute board_size of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 156($sp) # $t1 = size
		sw $t1, 16($t0) # self.board_size = size
		
		lw $t0, 156($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 28($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_32 = size
		lw $t0, 156($sp)
		sw $t0, 28($sp)
		end_assign:
		
		# Jumping to endif_8789948665122
		j endif_8789948665122
		
		endif_8789948665122:
		
		lw $t0, 28($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 52($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_26 = internal_32
		lw $t0, 28($sp)
		sw $t0, 52($sp)
		end_assign:
		
		# Jumping to endif_8789948665134
		j endif_8789948665134
		
		endif_8789948665134:
		
		lw $t0, 52($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 76($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_20 = internal_26
		lw $t0, 52($sp)
		sw $t0, 76($sp)
		end_assign:
		
		# Jumping to endif_8789948665140
		j endif_8789948665140
		
		endif_8789948665140:
		
		lw $t0, 76($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 100($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_14 = internal_20
		lw $t0, 76($sp)
		sw $t0, 100($sp)
		end_assign:
		
		# Jumping to endif_8789948665146
		j endif_8789948665146
		
		endif_8789948665146:
		
		lw $t0, 100($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 124($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_8 = internal_14
		lw $t0, 100($sp)
		sw $t0, 124($sp)
		end_assign:
		
		# Jumping to endif_8789948665152
		j endif_8789948665152
		
		endif_8789948665152:
		
		lw $t0, 124($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 148($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_2 = internal_8
		lw $t0, 124($sp)
		sw $t0, 148($sp)
		end_assign:
		
		# Jumping to endif_8789948665158
		j endif_8789948665158
		
		endif_8789948665158:
		
		# Loading return value in $v1
		lw $v1, 164($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 160
		
		jr $ra
		
	function___init___at_CellularAutomaton:
		# Function parameters
		#   $ra = 20($sp)
		#   self = 16($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -16
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 12($sp) # internal_0 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 12($sp) # $t1 = internal_0
		sw $t1, 8($t0) # self.rows = internal_0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_1 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_1
		sw $t1, 12($t0) # self.columns = internal_1
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_2 = address of allocated object Int
		
		# Set attribute board_size of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 4($sp) # $t1 = internal_2
		sw $t1, 16($t0) # self.board_size = internal_2
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 0
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 0($sp) # internal_3 = ""
		
		# Set attribute population_map of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_3
		sw $t1, 20($t0) # self.population_map = internal_3
		
		# Loading return value in $v1
		lw $v1, 16($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 16
		
		jr $ra
		
	function_init_at_CellularAutomaton:
		# Function parameters
		#   $ra = 12($sp)
		#   self = 8($sp)
		#   map = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Set attribute population_map of self
		lw $t0, 8($sp) # $t0 = self
		lw $t1, 4($sp) # $t1 = map
		sw $t1, 20($t0) # self.population_map = map
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 20($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument map
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing map
		
		# Calling function function_board_init_at_Board
		jal function_board_init_at_Board
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_0 = result of function_board_init_at_Board
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_print_at_CellularAutomaton:
		# Function parameters
		#   $ra = 76($sp)
		#   self = 72($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -72
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_1 = address of allocated object Int
		
		lw $t0, 64($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 68($sp)
		j end_assign
		not_is_Bool_or_Int:
		# i = internal_1
		lw $t0, 64($sp)
		sw $t0, 68($sp)
		end_assign:
		
		# Get attribute board_size of self
		lw $t0, 72($sp) # Get the address of self
		lw $t1, 16($t0) # Get the attribute 'board_size' from the instance
		sw $t1, 56($sp) # internal_3 = board_size
		
		lw $t0, 56($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 60($sp)
		j end_assign
		not_is_Bool_or_Int:
		# num = internal_3
		lw $t0, 56($sp)
		sw $t0, 60($sp)
		end_assign:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_4[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 52($sp) # internal_4 = "\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_4
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_5 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		while_start_8789948665326:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 80($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument num
		lw $t0, 72($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_7 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 40($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 44($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_6 = internal_7
		lw $t0, 40($sp)
		sw $t0, 44($sp)
		end_assign:
		
		# If internal_6 then goto while_body_8789948665326
		lw $t0, 44($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_body_8789948665326
		
		# Jumping to while_end_8789948665326
		j while_end_8789948665326
		
		while_body_8789948665326:
		
		# Get attribute population_map of self
		lw $t0, 72($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'population_map' from the instance
		sw $t1, 36($sp) # internal_8 = population_map
		
		# Get attribute columns of self
		lw $t0, 72($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 32($sp) # internal_9 = columns
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument internal_8
		lw $t0, 52($sp)
		sw $t0, 8($sp) # Storing internal_8
		
		# Argument i
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_9
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_substr_at_String
		jal function_substr_at_String
		lw $ra, 12($sp)
		sw $v1, 44($sp) # internal_10 = result of function_substr_at_String
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_10
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_10
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_11 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_12[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 20($sp) # internal_12 = "\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_12
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_13 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 72($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 12($sp) # internal_14 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 80($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_14
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_14
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_15 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 8($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 68($sp)
		j end_assign
		not_is_Bool_or_Int:
		# i = internal_15
		lw $t0, 8($sp)
		sw $t0, 68($sp)
		end_assign:
		
		# Jumping to while_start_8789948665326
		j while_start_8789948665326
		
		while_end_8789948665326:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_16[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 4($sp) # internal_16 = "\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_16
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_17 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 72($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 72
		
		jr $ra
		
	function_num_cells_at_CellularAutomaton:
		# Function parameters
		#   $ra = 12($sp)
		#   self = 8($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -8
		
		# Get attribute population_map of self
		lw $t0, 8($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'population_map' from the instance
		sw $t1, 4($sp) # internal_0 = population_map
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function_length_at_String
		jal function_length_at_String
		lw $ra, 4($sp)
		sw $v1, 8($sp) # internal_1 = result of function_length_at_String
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 8
		
		jr $ra
		
	function_cell_at_CellularAutomaton:
		# Function parameters
		#   $ra = 48($sp)
		#   self = 44($sp)
		#   position = 40($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -40
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_1 = address of allocated object Int
		
		# Get attribute board_size of self
		lw $t0, 44($sp) # Get the address of self
		lw $t1, 16($t0) # Get the attribute 'board_size' from the instance
		sw $t1, 28($sp) # internal_2 = board_size
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_3
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_4 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_4
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing internal_4
		
		# Argument position
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_5 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 16($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 32($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_1 = internal_5
		lw $t0, 16($sp)
		sw $t0, 32($sp)
		end_assign:
		
		# If internal_1 then goto then_8789948666483
		lw $t0, 32($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948666483
		
		# Jumping to else_8789948666483
		j else_8789948666483
		
		then_8789948666483:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_6[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_6 = " "
		
		lw $t0, 12($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 36($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_6
		lw $t0, 12($sp)
		sw $t0, 36($sp)
		end_assign:
		
		# Jumping to endif_8789948666483
		j endif_8789948666483
		
		else_8789948666483:
		
		# Get attribute population_map of self
		lw $t0, 44($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'population_map' from the instance
		sw $t1, 8($sp) # internal_7 = population_map
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_8 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument internal_7
		lw $t0, 24($sp)
		sw $t0, 8($sp) # Storing internal_7
		
		# Argument position
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_8
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_8
		
		# Calling function function_substr_at_String
		jal function_substr_at_String
		lw $ra, 12($sp)
		sw $v1, 16($sp) # internal_9 = result of function_substr_at_String
		addi $sp, $sp, 16 # Freeing space for arguments
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 36($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_9
		lw $t0, 0($sp)
		sw $t0, 36($sp)
		end_assign:
		
		# Jumping to endif_8789948666483
		j endif_8789948666483
		
		endif_8789948666483:
		
		# Loading return value in $v1
		lw $v1, 36($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 40
		
		jr $ra
		
	function_north_at_CellularAutomaton:
		# Function parameters
		#   $ra = 48($sp)
		#   self = 44($sp)
		#   position = 40($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -40
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_1 = address of allocated object Int
		
		# Get attribute columns of self
		lw $t0, 44($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 28($sp) # internal_2 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_2
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_3 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_4 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 36($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument internal_4
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_5 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 16($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 32($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_1 = internal_5
		lw $t0, 16($sp)
		sw $t0, 32($sp)
		end_assign:
		
		# If internal_1 then goto then_8789948666549
		lw $t0, 32($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948666549
		
		# Jumping to else_8789948666549
		j else_8789948666549
		
		then_8789948666549:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_6[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_6 = " "
		
		lw $t0, 12($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 36($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_6
		lw $t0, 12($sp)
		sw $t0, 36($sp)
		end_assign:
		
		# Jumping to endif_8789948666549
		j endif_8789948666549
		
		else_8789948666549:
		
		# Get attribute columns of self
		lw $t0, 44($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 8($sp) # internal_7 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_7
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 16($sp) # internal_8 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_8
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_8
		
		# Calling function function_cell_at_CellularAutomaton
		jal function_cell_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_9 = result of function_cell_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 36($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_9
		lw $t0, 0($sp)
		sw $t0, 36($sp)
		end_assign:
		
		# Jumping to endif_8789948666549
		j endif_8789948666549
		
		endif_8789948666549:
		
		# Loading return value in $v1
		lw $v1, 36($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 40
		
		jr $ra
		
	function_south_at_CellularAutomaton:
		# Function parameters
		#   $ra = 48($sp)
		#   self = 44($sp)
		#   position = 40($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -40
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_1 = address of allocated object Int
		
		# Get attribute board_size of self
		lw $t0, 44($sp) # Get the address of self
		lw $t1, 16($t0) # Get the attribute 'board_size' from the instance
		sw $t1, 28($sp) # internal_2 = board_size
		
		# Get attribute columns of self
		lw $t0, 44($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 24($sp) # internal_3 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_3
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_4 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_4
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_5 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 16($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 32($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_1 = internal_5
		lw $t0, 16($sp)
		sw $t0, 32($sp)
		end_assign:
		
		# If internal_1 then goto then_8789948666615
		lw $t0, 32($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948666615
		
		# Jumping to else_8789948666615
		j else_8789948666615
		
		then_8789948666615:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_6[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_6 = " "
		
		lw $t0, 12($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 36($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_6
		lw $t0, 12($sp)
		sw $t0, 36($sp)
		end_assign:
		
		# Jumping to endif_8789948666615
		j endif_8789948666615
		
		else_8789948666615:
		
		# Get attribute columns of self
		lw $t0, 44($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 8($sp) # internal_7 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_7
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 16($sp) # internal_8 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_8
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_8
		
		# Calling function function_cell_at_CellularAutomaton
		jal function_cell_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_9 = result of function_cell_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 36($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_9
		lw $t0, 0($sp)
		sw $t0, 36($sp)
		end_assign:
		
		# Jumping to endif_8789948666615
		j endif_8789948666615
		
		endif_8789948666615:
		
		# Loading return value in $v1
		lw $v1, 36($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 40
		
		jr $ra
		
	function_east_at_CellularAutomaton:
		# Function parameters
		#   $ra = 68($sp)
		#   self = 64($sp)
		#   position = 60($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -60
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_2 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_2
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_3 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 64($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 40($sp) # internal_4 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument internal_4
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_5 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 64($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 32($sp) # internal_6 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_5
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing internal_5
		
		# Argument internal_6
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_6
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_7 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_8 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_8
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_8
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_9 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_7
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_7
		
		# Argument internal_9
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_10 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 16($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 52($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_1 = internal_10
		lw $t0, 16($sp)
		sw $t0, 52($sp)
		end_assign:
		
		# If internal_1 then goto then_8789948666977
		lw $t0, 52($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948666977
		
		# Jumping to else_8789948666977
		j else_8789948666977
		
		then_8789948666977:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_11[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_11 = " "
		
		lw $t0, 12($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 56($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_11
		lw $t0, 12($sp)
		sw $t0, 56($sp)
		end_assign:
		
		# Jumping to endif_8789948666977
		j endif_8789948666977
		
		else_8789948666977:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_12 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_12
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 16($sp) # internal_13 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_13
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function function_cell_at_CellularAutomaton
		jal function_cell_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_14 = result of function_cell_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 56($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_14
		lw $t0, 0($sp)
		sw $t0, 56($sp)
		end_assign:
		
		# Jumping to endif_8789948666977
		j endif_8789948666977
		
		endif_8789948666977:
		
		# Loading return value in $v1
		lw $v1, 56($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 60
		
		jr $ra
		
	function_west_at_CellularAutomaton:
		# Function parameters
		#   $ra = 72($sp)
		#   self = 68($sp)
		#   position = 64($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -64
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_2 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_2
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_3 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 48($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 56($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_1 = internal_3
		lw $t0, 48($sp)
		sw $t0, 56($sp)
		end_assign:
		
		# If internal_1 then goto then_8789948667073
		lw $t0, 56($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948667073
		
		# Jumping to else_8789948667073
		j else_8789948667073
		
		then_8789948667073:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_4[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 44($sp) # internal_4 = " "
		
		lw $t0, 44($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 60($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_4
		lw $t0, 44($sp)
		sw $t0, 60($sp)
		end_assign:
		
		# Jumping to endif_8789948667073
		j endif_8789948667073
		
		else_8789948667073:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_6 = address of allocated object Int
		
		# Get attribute columns of self
		lw $t0, 68($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 32($sp) # internal_7 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_7
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_8 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 68($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 24($sp) # internal_9 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_8
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_8
		
		# Argument internal_9
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_10 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument position
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_11 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 16($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 36($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_6 = internal_11
		lw $t0, 16($sp)
		sw $t0, 36($sp)
		end_assign:
		
		# If internal_6 then goto then_8789948667079
		lw $t0, 36($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948667079
		
		# Jumping to else_8789948667079
		j else_8789948667079
		
		then_8789948667079:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_12[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_12 = " "
		
		lw $t0, 12($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 40($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_5 = internal_12
		lw $t0, 12($sp)
		sw $t0, 40($sp)
		end_assign:
		
		# Jumping to endif_8789948667079
		j endif_8789948667079
		
		else_8789948667079:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_13 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_13
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 16($sp) # internal_14 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 80($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_14
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_14
		
		# Calling function function_cell_at_CellularAutomaton
		jal function_cell_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_15 = result of function_cell_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 40($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_5 = internal_15
		lw $t0, 0($sp)
		sw $t0, 40($sp)
		end_assign:
		
		# Jumping to endif_8789948667079
		j endif_8789948667079
		
		endif_8789948667079:
		
		lw $t0, 40($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 60($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_5
		lw $t0, 40($sp)
		sw $t0, 60($sp)
		end_assign:
		
		# Jumping to endif_8789948667073
		j endif_8789948667073
		
		endif_8789948667073:
		
		# Loading return value in $v1
		lw $v1, 60($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 64
		
		jr $ra
		
	function_northwest_at_CellularAutomaton:
		# Function parameters
		#   $ra = 80($sp)
		#   self = 76($sp)
		#   position = 72($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -72
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_1 = address of allocated object Int
		
		# Get attribute columns of self
		lw $t0, 76($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 60($sp) # internal_2 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_2
		lw $t0, 72($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 68($sp) # internal_3 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_4 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument internal_4
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_5 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 48($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 64($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_1 = internal_5
		lw $t0, 48($sp)
		sw $t0, 64($sp)
		end_assign:
		
		# If internal_1 then goto then_8789948667965
		lw $t0, 64($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948667965
		
		# Jumping to else_8789948667965
		j else_8789948667965
		
		then_8789948667965:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_6[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 44($sp) # internal_6 = " "
		
		lw $t0, 44($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 68($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_6
		lw $t0, 44($sp)
		sw $t0, 68($sp)
		end_assign:
		
		# Jumping to endif_8789948667965
		j endif_8789948667965
		
		else_8789948667965:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_8 = address of allocated object Int
		
		# Get attribute columns of self
		lw $t0, 76($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 32($sp) # internal_9 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_9
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_10 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 76($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 24($sp) # internal_11 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_11
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_12 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_12
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing internal_12
		
		# Argument position
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_13 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 16($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 36($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_8 = internal_13
		lw $t0, 16($sp)
		sw $t0, 36($sp)
		end_assign:
		
		# If internal_8 then goto then_8789948667971
		lw $t0, 36($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948667971
		
		# Jumping to else_8789948667971
		j else_8789948667971
		
		then_8789948667971:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_14[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_14 = " "
		
		lw $t0, 12($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 40($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_7 = internal_14
		lw $t0, 12($sp)
		sw $t0, 40($sp)
		end_assign:
		
		# Jumping to endif_8789948667971
		j endif_8789948667971
		
		else_8789948667971:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_15 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_15
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 16($sp) # internal_16 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 88($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_16
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function function_north_at_CellularAutomaton
		jal function_north_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_17 = result of function_north_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 40($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_7 = internal_17
		lw $t0, 0($sp)
		sw $t0, 40($sp)
		end_assign:
		
		# Jumping to endif_8789948667971
		j endif_8789948667971
		
		endif_8789948667971:
		
		lw $t0, 40($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 68($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_7
		lw $t0, 40($sp)
		sw $t0, 68($sp)
		end_assign:
		
		# Jumping to endif_8789948667965
		j endif_8789948667965
		
		endif_8789948667965:
		
		# Loading return value in $v1
		lw $v1, 68($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 72
		
		jr $ra
		
	function_northeast_at_CellularAutomaton:
		# Function parameters
		#   $ra = 96($sp)
		#   self = 92($sp)
		#   position = 88($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -88
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_1 = address of allocated object Int
		
		# Get attribute columns of self
		lw $t0, 92($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 76($sp) # internal_2 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_2
		lw $t0, 88($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 84($sp) # internal_3 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_4 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument internal_4
		lw $t0, 80($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 76($sp) # internal_5 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 64($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 80($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_1 = internal_5
		lw $t0, 64($sp)
		sw $t0, 80($sp)
		end_assign:
		
		# If internal_1 then goto then_8789948668109
		lw $t0, 80($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948668109
		
		# Jumping to else_8789948668109
		j else_8789948668109
		
		then_8789948668109:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_6[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 60($sp) # internal_6 = " "
		
		lw $t0, 60($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 84($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_6
		lw $t0, 60($sp)
		sw $t0, 84($sp)
		end_assign:
		
		# Jumping to endif_8789948668109
		j endif_8789948668109
		
		else_8789948668109:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_8 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_9 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_9
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_10 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 92($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 40($sp) # internal_11 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_11
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_12 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 92($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 32($sp) # internal_13 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_12
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing internal_12
		
		# Argument internal_13
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_14 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_15 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_15
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_16 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_14
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_14
		
		# Argument internal_16
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_17 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 16($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 52($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_8 = internal_17
		lw $t0, 16($sp)
		sw $t0, 52($sp)
		end_assign:
		
		# If internal_8 then goto then_8789948668115
		lw $t0, 52($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948668115
		
		# Jumping to else_8789948668115
		j else_8789948668115
		
		then_8789948668115:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_18[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_18 = " "
		
		lw $t0, 12($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 56($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_7 = internal_18
		lw $t0, 12($sp)
		sw $t0, 56($sp)
		end_assign:
		
		# Jumping to endif_8789948668115
		j endif_8789948668115
		
		else_8789948668115:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_19 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_19
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_19
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 16($sp) # internal_20 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 104($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_20
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_20
		
		# Calling function function_north_at_CellularAutomaton
		jal function_north_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_21 = result of function_north_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 56($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_7 = internal_21
		lw $t0, 0($sp)
		sw $t0, 56($sp)
		end_assign:
		
		# Jumping to endif_8789948668115
		j endif_8789948668115
		
		endif_8789948668115:
		
		lw $t0, 56($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 84($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_7
		lw $t0, 56($sp)
		sw $t0, 84($sp)
		end_assign:
		
		# Jumping to endif_8789948668109
		j endif_8789948668109
		
		endif_8789948668109:
		
		# Loading return value in $v1
		lw $v1, 84($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 88
		
		jr $ra
		
	function_southeast_at_CellularAutomaton:
		# Function parameters
		#   $ra = 96($sp)
		#   self = 92($sp)
		#   position = 88($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -88
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_1 = address of allocated object Int
		
		# Get attribute board_size of self
		lw $t0, 92($sp) # Get the address of self
		lw $t1, 16($t0) # Get the attribute 'board_size' from the instance
		sw $t1, 76($sp) # internal_2 = board_size
		
		# Get attribute columns of self
		lw $t0, 92($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 72($sp) # internal_3 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_3
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 80($sp) # internal_4 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 88($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_4
		lw $t0, 80($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 76($sp) # internal_5 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 64($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 80($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_1 = internal_5
		lw $t0, 64($sp)
		sw $t0, 80($sp)
		end_assign:
		
		# If internal_1 then goto then_8789948668513
		lw $t0, 80($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948668513
		
		# Jumping to else_8789948668513
		j else_8789948668513
		
		then_8789948668513:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_6[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 60($sp) # internal_6 = " "
		
		lw $t0, 60($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 84($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_6
		lw $t0, 60($sp)
		sw $t0, 84($sp)
		end_assign:
		
		# Jumping to endif_8789948668513
		j endif_8789948668513
		
		else_8789948668513:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_8 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_9 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_9
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_10 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 92($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 40($sp) # internal_11 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_11
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_12 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 92($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 32($sp) # internal_13 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_12
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing internal_12
		
		# Argument internal_13
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_14 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_15 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_15
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_16 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_14
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_14
		
		# Argument internal_16
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_17 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 16($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 52($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_8 = internal_17
		lw $t0, 16($sp)
		sw $t0, 52($sp)
		end_assign:
		
		# If internal_8 then goto then_8789948668519
		lw $t0, 52($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948668519
		
		# Jumping to else_8789948668519
		j else_8789948668519
		
		then_8789948668519:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_18[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_18 = " "
		
		lw $t0, 12($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 56($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_7 = internal_18
		lw $t0, 12($sp)
		sw $t0, 56($sp)
		end_assign:
		
		# Jumping to endif_8789948668519
		j endif_8789948668519
		
		else_8789948668519:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_19 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_19
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_19
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 16($sp) # internal_20 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 104($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_20
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_20
		
		# Calling function function_south_at_CellularAutomaton
		jal function_south_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_21 = result of function_south_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 56($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_7 = internal_21
		lw $t0, 0($sp)
		sw $t0, 56($sp)
		end_assign:
		
		# Jumping to endif_8789948668519
		j endif_8789948668519
		
		endif_8789948668519:
		
		lw $t0, 56($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 84($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_7
		lw $t0, 56($sp)
		sw $t0, 84($sp)
		end_assign:
		
		# Jumping to endif_8789948668513
		j endif_8789948668513
		
		endif_8789948668513:
		
		# Loading return value in $v1
		lw $v1, 84($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 88
		
		jr $ra
		
	function_southwest_at_CellularAutomaton:
		# Function parameters
		#   $ra = 80($sp)
		#   self = 76($sp)
		#   position = 72($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -72
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_1 = address of allocated object Int
		
		# Get attribute board_size of self
		lw $t0, 76($sp) # Get the address of self
		lw $t1, 16($t0) # Get the attribute 'board_size' from the instance
		sw $t1, 60($sp) # internal_2 = board_size
		
		# Get attribute columns of self
		lw $t0, 76($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 56($sp) # internal_3 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_3
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 64($sp) # internal_4 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_4
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_5 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 48($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 64($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_1 = internal_5
		lw $t0, 48($sp)
		sw $t0, 64($sp)
		end_assign:
		
		# If internal_1 then goto then_8789948668633
		lw $t0, 64($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948668633
		
		# Jumping to else_8789948668633
		j else_8789948668633
		
		then_8789948668633:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_6[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 44($sp) # internal_6 = " "
		
		lw $t0, 44($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 68($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_6
		lw $t0, 44($sp)
		sw $t0, 68($sp)
		end_assign:
		
		# Jumping to endif_8789948668633
		j endif_8789948668633
		
		else_8789948668633:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_8 = address of allocated object Int
		
		# Get attribute columns of self
		lw $t0, 76($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 32($sp) # internal_9 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_9
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_10 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 76($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the instance
		sw $t1, 24($sp) # internal_11 = columns
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_11
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_12 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_12
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing internal_12
		
		# Argument position
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_13 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 16($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 36($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_8 = internal_13
		lw $t0, 16($sp)
		sw $t0, 36($sp)
		end_assign:
		
		# If internal_8 then goto then_8789948668639
		lw $t0, 36($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948668639
		
		# Jumping to else_8789948668639
		j else_8789948668639
		
		then_8789948668639:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_14[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_14 = " "
		
		lw $t0, 12($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 40($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_7 = internal_14
		lw $t0, 12($sp)
		sw $t0, 40($sp)
		end_assign:
		
		# Jumping to endif_8789948668639
		j endif_8789948668639
		
		else_8789948668639:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_15 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_15
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 16($sp) # internal_16 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 88($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_16
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function function_south_at_CellularAutomaton
		jal function_south_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_17 = result of function_south_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 40($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_7 = internal_17
		lw $t0, 0($sp)
		sw $t0, 40($sp)
		end_assign:
		
		# Jumping to endif_8789948668639
		j endif_8789948668639
		
		endif_8789948668639:
		
		lw $t0, 40($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 68($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_7
		lw $t0, 40($sp)
		sw $t0, 68($sp)
		end_assign:
		
		# Jumping to endif_8789948668633
		j endif_8789948668633
		
		endif_8789948668633:
		
		# Loading return value in $v1
		lw $v1, 68($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 72
		
		jr $ra
		
	function_neighbors_at_CellularAutomaton:
		# Function parameters
		#   $ra = 260($sp)
		#   self = 256($sp)
		#   position = 252($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -252
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 244($sp) # internal_1 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_north_at_CellularAutomaton
		jal function_north_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 252($sp) # internal_2 = result of function_north_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_3[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 236($sp) # internal_3 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 252($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_3
		lw $t0, 248($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 244($sp) # internal_4 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 232($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 244($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_1 = internal_4
		lw $t0, 232($sp)
		sw $t0, 244($sp)
		end_assign:
		
		# If internal_1 then goto then_8789948668685
		lw $t0, 244($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948668685
		
		# Jumping to else_8789948668685
		j else_8789948668685
		
		then_8789948668685:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 228($sp) # internal_5 = address of allocated object Int
		
		lw $t0, 228($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 248($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_5
		lw $t0, 228($sp)
		sw $t0, 248($sp)
		end_assign:
		
		# Jumping to endif_8789948668685
		j endif_8789948668685
		
		else_8789948668685:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 224($sp) # internal_6 = address of allocated object Int
		
		lw $t0, 224($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 248($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_6
		lw $t0, 224($sp)
		sw $t0, 248($sp)
		end_assign:
		
		# Jumping to endif_8789948668685
		j endif_8789948668685
		
		endif_8789948668685:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 216($sp) # internal_8 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_south_at_CellularAutomaton
		jal function_south_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 224($sp) # internal_9 = result of function_south_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_10[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 208($sp) # internal_10 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_9
		lw $t0, 224($sp)
		sw $t0, 4($sp) # Storing internal_9
		
		# Argument internal_10
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_10
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 216($sp) # internal_11 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 204($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 216($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_8 = internal_11
		lw $t0, 204($sp)
		sw $t0, 216($sp)
		end_assign:
		
		# If internal_8 then goto then_8789948668724
		lw $t0, 216($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948668724
		
		# Jumping to else_8789948668724
		j else_8789948668724
		
		then_8789948668724:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 200($sp) # internal_12 = address of allocated object Int
		
		lw $t0, 200($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 220($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_7 = internal_12
		lw $t0, 200($sp)
		sw $t0, 220($sp)
		end_assign:
		
		# Jumping to endif_8789948668724
		j endif_8789948668724
		
		else_8789948668724:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 196($sp) # internal_13 = address of allocated object Int
		
		lw $t0, 196($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 220($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_7 = internal_13
		lw $t0, 196($sp)
		sw $t0, 220($sp)
		end_assign:
		
		# Jumping to endif_8789948668724
		j endif_8789948668724
		
		endif_8789948668724:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 260($sp)
		sw $t0, 4($sp) # Storing internal_0
		
		# Argument internal_7
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 204($sp) # internal_14 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 184($sp) # internal_16 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_east_at_CellularAutomaton
		jal function_east_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 192($sp) # internal_17 = result of function_east_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_18[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 176($sp) # internal_18 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_17
		lw $t0, 192($sp)
		sw $t0, 4($sp) # Storing internal_17
		
		# Argument internal_18
		lw $t0, 188($sp)
		sw $t0, 0($sp) # Storing internal_18
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 184($sp) # internal_19 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 172($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 184($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_16 = internal_19
		lw $t0, 172($sp)
		sw $t0, 184($sp)
		end_assign:
		
		# If internal_16 then goto then_8789948668769
		lw $t0, 184($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948668769
		
		# Jumping to else_8789948668769
		j else_8789948668769
		
		then_8789948668769:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 168($sp) # internal_20 = address of allocated object Int
		
		lw $t0, 168($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 188($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_15 = internal_20
		lw $t0, 168($sp)
		sw $t0, 188($sp)
		end_assign:
		
		# Jumping to endif_8789948668769
		j endif_8789948668769
		
		else_8789948668769:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 164($sp) # internal_21 = address of allocated object Int
		
		lw $t0, 164($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 188($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_15 = internal_21
		lw $t0, 164($sp)
		sw $t0, 188($sp)
		end_assign:
		
		# Jumping to endif_8789948668769
		j endif_8789948668769
		
		endif_8789948668769:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_14
		lw $t0, 204($sp)
		sw $t0, 4($sp) # Storing internal_14
		
		# Argument internal_15
		lw $t0, 200($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 172($sp) # internal_22 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 152($sp) # internal_24 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_west_at_CellularAutomaton
		jal function_west_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 160($sp) # internal_25 = result of function_west_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_26[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 144($sp) # internal_26 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 160($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_26
		lw $t0, 156($sp)
		sw $t0, 0($sp) # Storing internal_26
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 152($sp) # internal_27 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 140($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 152($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_24 = internal_27
		lw $t0, 140($sp)
		sw $t0, 152($sp)
		end_assign:
		
		# If internal_24 then goto then_8789948668814
		lw $t0, 152($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948668814
		
		# Jumping to else_8789948668814
		j else_8789948668814
		
		then_8789948668814:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_28 = address of allocated object Int
		
		lw $t0, 136($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 156($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_23 = internal_28
		lw $t0, 136($sp)
		sw $t0, 156($sp)
		end_assign:
		
		# Jumping to endif_8789948668814
		j endif_8789948668814
		
		else_8789948668814:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_29 = address of allocated object Int
		
		lw $t0, 132($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 156($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_23 = internal_29
		lw $t0, 132($sp)
		sw $t0, 156($sp)
		end_assign:
		
		# Jumping to endif_8789948668814
		j endif_8789948668814
		
		endif_8789948668814:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 172($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_23
		lw $t0, 168($sp)
		sw $t0, 0($sp) # Storing internal_23
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 140($sp) # internal_30 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 120($sp) # internal_32 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_northeast_at_CellularAutomaton
		jal function_northeast_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 128($sp) # internal_33 = result of function_northeast_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_34[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 112($sp) # internal_34 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_33
		lw $t0, 128($sp)
		sw $t0, 4($sp) # Storing internal_33
		
		# Argument internal_34
		lw $t0, 124($sp)
		sw $t0, 0($sp) # Storing internal_34
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 120($sp) # internal_35 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 108($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 120($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_32 = internal_35
		lw $t0, 108($sp)
		sw $t0, 120($sp)
		end_assign:
		
		# If internal_32 then goto then_8789948668859
		lw $t0, 120($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948668859
		
		# Jumping to else_8789948668859
		j else_8789948668859
		
		then_8789948668859:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_36 = address of allocated object Int
		
		lw $t0, 104($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 124($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_31 = internal_36
		lw $t0, 104($sp)
		sw $t0, 124($sp)
		end_assign:
		
		# Jumping to endif_8789948668859
		j endif_8789948668859
		
		else_8789948668859:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 100($sp) # internal_37 = address of allocated object Int
		
		lw $t0, 100($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 124($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_31 = internal_37
		lw $t0, 100($sp)
		sw $t0, 124($sp)
		end_assign:
		
		# Jumping to endif_8789948668859
		j endif_8789948668859
		
		endif_8789948668859:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_30
		lw $t0, 140($sp)
		sw $t0, 4($sp) # Storing internal_30
		
		# Argument internal_31
		lw $t0, 136($sp)
		sw $t0, 0($sp) # Storing internal_31
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 108($sp) # internal_38 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_40 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_northwest_at_CellularAutomaton
		jal function_northwest_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 96($sp) # internal_41 = result of function_northwest_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_42[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 80($sp) # internal_42 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_41
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing internal_41
		
		# Argument internal_42
		lw $t0, 92($sp)
		sw $t0, 0($sp) # Storing internal_42
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 88($sp) # internal_43 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 76($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 88($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_40 = internal_43
		lw $t0, 76($sp)
		sw $t0, 88($sp)
		end_assign:
		
		# If internal_40 then goto then_8789948668904
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948668904
		
		# Jumping to else_8789948668904
		j else_8789948668904
		
		then_8789948668904:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_44 = address of allocated object Int
		
		lw $t0, 72($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 92($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_39 = internal_44
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		end_assign:
		
		# Jumping to endif_8789948668904
		j endif_8789948668904
		
		else_8789948668904:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_45 = address of allocated object Int
		
		lw $t0, 68($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 92($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_39 = internal_45
		lw $t0, 68($sp)
		sw $t0, 92($sp)
		end_assign:
		
		# Jumping to endif_8789948668904
		j endif_8789948668904
		
		endif_8789948668904:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_38
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing internal_38
		
		# Argument internal_39
		lw $t0, 104($sp)
		sw $t0, 0($sp) # Storing internal_39
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 76($sp) # internal_46 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_48 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_southeast_at_CellularAutomaton
		jal function_southeast_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 64($sp) # internal_49 = result of function_southeast_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_50[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 48($sp) # internal_50 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_49
		lw $t0, 64($sp)
		sw $t0, 4($sp) # Storing internal_49
		
		# Argument internal_50
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_50
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_51 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 44($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 56($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_48 = internal_51
		lw $t0, 44($sp)
		sw $t0, 56($sp)
		end_assign:
		
		# If internal_48 then goto then_8789948669209
		lw $t0, 56($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948669209
		
		# Jumping to else_8789948669209
		j else_8789948669209
		
		then_8789948669209:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_52 = address of allocated object Int
		
		lw $t0, 40($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 60($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_47 = internal_52
		lw $t0, 40($sp)
		sw $t0, 60($sp)
		end_assign:
		
		# Jumping to endif_8789948669209
		j endif_8789948669209
		
		else_8789948669209:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_53 = address of allocated object Int
		
		lw $t0, 36($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 60($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_47 = internal_53
		lw $t0, 36($sp)
		sw $t0, 60($sp)
		end_assign:
		
		# Jumping to endif_8789948669209
		j endif_8789948669209
		
		endif_8789948669209:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_46
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing internal_46
		
		# Argument internal_47
		lw $t0, 72($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_54 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_56 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_southwest_at_CellularAutomaton
		jal function_southwest_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_57 = result of function_southwest_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_58[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 16($sp) # internal_58 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_57
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing internal_57
		
		# Argument internal_58
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_59 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 12($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 24($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_56 = internal_59
		lw $t0, 12($sp)
		sw $t0, 24($sp)
		end_assign:
		
		# If internal_56 then goto then_8789948669254
		lw $t0, 24($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948669254
		
		# Jumping to else_8789948669254
		j else_8789948669254
		
		then_8789948669254:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_60 = address of allocated object Int
		
		lw $t0, 8($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 28($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_55 = internal_60
		lw $t0, 8($sp)
		sw $t0, 28($sp)
		end_assign:
		
		# Jumping to endif_8789948669254
		j endif_8789948669254
		
		else_8789948669254:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_61 = address of allocated object Int
		
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 28($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_55 = internal_61
		lw $t0, 4($sp)
		sw $t0, 28($sp)
		end_assign:
		
		# Jumping to endif_8789948669254
		j endif_8789948669254
		
		endif_8789948669254:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_54
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing internal_54
		
		# Argument internal_55
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_55
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_62 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 252
		
		jr $ra
		
	function_cell_at_next_evolution_at_CellularAutomaton:
		# Function parameters
		#   $ra = 84($sp)
		#   self = 80($sp)
		#   position = 76($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -76
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_1 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 88($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_neighbors_at_CellularAutomaton
		jal function_neighbors_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 76($sp) # internal_2 = result of function_neighbors_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_3
		lw $t0, 72($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 68($sp) # internal_4 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 56($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 68($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_1 = internal_4
		lw $t0, 56($sp)
		sw $t0, 68($sp)
		end_assign:
		
		# If internal_1 then goto then_8789948669374
		lw $t0, 68($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948669374
		
		# Jumping to else_8789948669374
		j else_8789948669374
		
		then_8789948669374:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_5[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 52($sp) # internal_5 = "X"
		
		lw $t0, 52($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 72($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_5
		lw $t0, 52($sp)
		sw $t0, 72($sp)
		end_assign:
		
		# Jumping to endif_8789948669374
		j endif_8789948669374
		
		else_8789948669374:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_7 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 88($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_neighbors_at_CellularAutomaton
		jal function_neighbors_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_8 = result of function_neighbors_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_9 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_8
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing internal_8
		
		# Argument internal_9
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_10 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 32($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 44($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_7 = internal_10
		lw $t0, 32($sp)
		sw $t0, 44($sp)
		end_assign:
		
		# If internal_7 then goto then_8789948669368
		lw $t0, 44($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948669368
		
		# Jumping to else_8789948669368
		j else_8789948669368
		
		then_8789948669368:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_12 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 88($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_cell_at_CellularAutomaton
		jal function_cell_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_13 = result of function_cell_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_14[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 16($sp) # internal_14 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_13
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing internal_13
		
		# Argument internal_14
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_14
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_15 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 12($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 24($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_12 = internal_15
		lw $t0, 12($sp)
		sw $t0, 24($sp)
		end_assign:
		
		# If internal_12 then goto then_8789948669356
		lw $t0, 24($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948669356
		
		# Jumping to else_8789948669356
		j else_8789948669356
		
		then_8789948669356:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_16[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 8($sp) # internal_16 = "X"
		
		lw $t0, 8($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 28($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_11 = internal_16
		lw $t0, 8($sp)
		sw $t0, 28($sp)
		end_assign:
		
		# Jumping to endif_8789948669356
		j endif_8789948669356
		
		else_8789948669356:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 45
		sb $t0, 8($v0) # internal_17[0] = '-'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 4($sp) # internal_17 = "-"
		
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 28($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_11 = internal_17
		lw $t0, 4($sp)
		sw $t0, 28($sp)
		end_assign:
		
		# Jumping to endif_8789948669356
		j endif_8789948669356
		
		endif_8789948669356:
		
		lw $t0, 28($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 48($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_6 = internal_11
		lw $t0, 28($sp)
		sw $t0, 48($sp)
		end_assign:
		
		# Jumping to endif_8789948669368
		j endif_8789948669368
		
		else_8789948669368:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 45
		sb $t0, 8($v0) # internal_18[0] = '-'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 0($sp) # internal_18 = "-"
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 48($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_6 = internal_18
		lw $t0, 0($sp)
		sw $t0, 48($sp)
		end_assign:
		
		# Jumping to endif_8789948669368
		j endif_8789948669368
		
		endif_8789948669368:
		
		lw $t0, 48($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 72($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_0 = internal_6
		lw $t0, 48($sp)
		sw $t0, 72($sp)
		end_assign:
		
		# Jumping to endif_8789948669374
		j endif_8789948669374
		
		endif_8789948669374:
		
		# Loading return value in $v1
		lw $v1, 72($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 76
		
		jr $ra
		
	function_evolve_at_CellularAutomaton:
		# Function parameters
		#   $ra = 48($sp)
		#   self = 44($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -44
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_1 = address of allocated object Int
		
		lw $t0, 36($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 40($sp)
		j end_assign
		not_is_Bool_or_Int:
		# position = internal_1
		lw $t0, 36($sp)
		sw $t0, 40($sp)
		end_assign:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_num_cells_at_CellularAutomaton
		jal function_num_cells_at_CellularAutomaton
		lw $ra, 4($sp)
		sw $v1, 36($sp) # internal_3 = result of function_num_cells_at_CellularAutomaton
		addi $sp, $sp, 8 # Freeing space for arguments
		
		lw $t0, 28($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 32($sp)
		j end_assign
		not_is_Bool_or_Int:
		# num = internal_3
		lw $t0, 28($sp)
		sw $t0, 32($sp)
		end_assign:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 0
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 24($sp) # temp = ""
		
		while_start_8789948669724:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument num
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_6 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 16($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 20($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_5 = internal_6
		lw $t0, 16($sp)
		sw $t0, 20($sp)
		end_assign:
		
		# If internal_5 then goto while_body_8789948669724
		lw $t0, 20($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_body_8789948669724
		
		# Jumping to while_end_8789948669724
		j while_end_8789948669724
		
		while_body_8789948669724:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_cell_at_next_evolution_at_CellularAutomaton
		jal function_cell_at_next_evolution_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_7 = result of function_cell_at_next_evolution_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument temp
		lw $t0, 36($sp)
		sw $t0, 4($sp) # Storing temp
		
		# Argument internal_7
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_concat_at_String
		jal function_concat_at_String
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_8 = result of function_concat_at_String
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 8($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 24($sp)
		j end_assign
		not_is_Bool_or_Int:
		# temp = internal_8
		lw $t0, 8($sp)
		sw $t0, 24($sp)
		end_assign:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_9 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_9
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_10 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 40($sp)
		j end_assign
		not_is_Bool_or_Int:
		# position = internal_10
		lw $t0, 0($sp)
		sw $t0, 40($sp)
		end_assign:
		
		# Jumping to while_start_8789948669724
		j while_start_8789948669724
		
		while_end_8789948669724:
		
		# Set attribute population_map of self
		lw $t0, 44($sp) # $t0 = self
		lw $t1, 24($sp) # $t1 = temp
		sw $t1, 20($t0) # self.population_map = temp
		
		# Loading return value in $v1
		lw $v1, 44($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 44
		
		jr $ra
		
	function_option_at_CellularAutomaton:
		# Function parameters
		#   $ra = 628($sp)
		#   self = 624($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -624
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 33 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 24
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_1[0] = '\n'
		
		addi $t0, $zero, 80
		sb $t0, 9($v0) # internal_1[1] = 'P'
		
		addi $t0, $zero, 108
		sb $t0, 10($v0) # internal_1[2] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_1[3] = 'e'
		
		addi $t0, $zero, 97
		sb $t0, 12($v0) # internal_1[4] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 13($v0) # internal_1[5] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 14($v0) # internal_1[6] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_1[7] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 16($v0) # internal_1[8] = 'c'
		
		addi $t0, $zero, 104
		sb $t0, 17($v0) # internal_1[9] = 'h'
		
		addi $t0, $zero, 111
		sb $t0, 18($v0) # internal_1[10] = 'o'
		
		addi $t0, $zero, 115
		sb $t0, 19($v0) # internal_1[11] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 20($v0) # internal_1[12] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_1[13] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 22($v0) # internal_1[14] = 'a'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_1[15] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 24($v0) # internal_1[16] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 25($v0) # internal_1[17] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 26($v0) # internal_1[18] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 27($v0) # internal_1[19] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 28($v0) # internal_1[20] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 29($v0) # internal_1[21] = 'r'
		
		addi $t0, $zero, 58
		sb $t0, 30($v0) # internal_1[22] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 31($v0) # internal_1[23] = '\n'
		
		sb $zero, 32($v0) # Null-terminator at the end of the string
		
		sw $v0, 616($sp) # internal_1 = "\nPlease chose a number:\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_1
		lw $t0, 628($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 624($sp) # internal_2 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 12
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_3[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_3[1] = '1'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_3[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_3[3] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 12($v0) # internal_3[4] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_3[5] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 14($v0) # internal_3[6] = 'c'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_3[7] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 16($v0) # internal_3[8] = 'o'
		
		addi $t0, $zero, 115
		sb $t0, 17($v0) # internal_3[9] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 18($v0) # internal_3[10] = 's'
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_3[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 608($sp) # internal_3 = "\t1: A cross\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_3
		lw $t0, 620($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 616($sp) # internal_4 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 56 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 47
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_5[0] = '\t'
		
		addi $t0, $zero, 50
		sb $t0, 9($v0) # internal_5[1] = '2'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_5[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_5[3] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 12($v0) # internal_5[4] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_5[5] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 14($v0) # internal_5[6] = 's'
		
		addi $t0, $zero, 108
		sb $t0, 15($v0) # internal_5[7] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 16($v0) # internal_5[8] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 17($v0) # internal_5[9] = 's'
		
		addi $t0, $zero, 104
		sb $t0, 18($v0) # internal_5[10] = 'h'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_5[11] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 20($v0) # internal_5[12] = 'f'
		
		addi $t0, $zero, 114
		sb $t0, 21($v0) # internal_5[13] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 22($v0) # internal_5[14] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 23($v0) # internal_5[15] = 'm'
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_5[16] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 25($v0) # internal_5[17] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 26($v0) # internal_5[18] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 27($v0) # internal_5[19] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_5[20] = ' '
		
		addi $t0, $zero, 117
		sb $t0, 29($v0) # internal_5[21] = 'u'
		
		addi $t0, $zero, 112
		sb $t0, 30($v0) # internal_5[22] = 'p'
		
		addi $t0, $zero, 112
		sb $t0, 31($v0) # internal_5[23] = 'p'
		
		addi $t0, $zero, 101
		sb $t0, 32($v0) # internal_5[24] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 33($v0) # internal_5[25] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 34($v0) # internal_5[26] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 35($v0) # internal_5[27] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 36($v0) # internal_5[28] = 'e'
		
		addi $t0, $zero, 102
		sb $t0, 37($v0) # internal_5[29] = 'f'
		
		addi $t0, $zero, 116
		sb $t0, 38($v0) # internal_5[30] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 39($v0) # internal_5[31] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 40($v0) # internal_5[32] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 41($v0) # internal_5[33] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 42($v0) # internal_5[34] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 43($v0) # internal_5[35] = 'l'
		
		addi $t0, $zero, 111
		sb $t0, 44($v0) # internal_5[36] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 45($v0) # internal_5[37] = 'w'
		
		addi $t0, $zero, 101
		sb $t0, 46($v0) # internal_5[38] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 47($v0) # internal_5[39] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 48($v0) # internal_5[40] = ' '
		
		addi $t0, $zero, 114
		sb $t0, 49($v0) # internal_5[41] = 'r'
		
		addi $t0, $zero, 105
		sb $t0, 50($v0) # internal_5[42] = 'i'
		
		addi $t0, $zero, 103
		sb $t0, 51($v0) # internal_5[43] = 'g'
		
		addi $t0, $zero, 104
		sb $t0, 52($v0) # internal_5[44] = 'h'
		
		addi $t0, $zero, 116
		sb $t0, 53($v0) # internal_5[45] = 't'
		
		addi $t0, $zero, 10
		sb $t0, 54($v0) # internal_5[46] = '\n'
		
		sb $zero, 55($v0) # Null-terminator at the end of the string
		
		sw $v0, 600($sp) # internal_5 = "\t2: A slash from the upper left to lower right\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_5
		lw $t0, 612($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 608($sp) # internal_6 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 56 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 47
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_7[0] = '\t'
		
		addi $t0, $zero, 51
		sb $t0, 9($v0) # internal_7[1] = '3'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_7[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_7[3] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 12($v0) # internal_7[4] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_7[5] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 14($v0) # internal_7[6] = 's'
		
		addi $t0, $zero, 108
		sb $t0, 15($v0) # internal_7[7] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 16($v0) # internal_7[8] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 17($v0) # internal_7[9] = 's'
		
		addi $t0, $zero, 104
		sb $t0, 18($v0) # internal_7[10] = 'h'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_7[11] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 20($v0) # internal_7[12] = 'f'
		
		addi $t0, $zero, 114
		sb $t0, 21($v0) # internal_7[13] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 22($v0) # internal_7[14] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 23($v0) # internal_7[15] = 'm'
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_7[16] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 25($v0) # internal_7[17] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 26($v0) # internal_7[18] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 27($v0) # internal_7[19] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_7[20] = ' '
		
		addi $t0, $zero, 117
		sb $t0, 29($v0) # internal_7[21] = 'u'
		
		addi $t0, $zero, 112
		sb $t0, 30($v0) # internal_7[22] = 'p'
		
		addi $t0, $zero, 112
		sb $t0, 31($v0) # internal_7[23] = 'p'
		
		addi $t0, $zero, 101
		sb $t0, 32($v0) # internal_7[24] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 33($v0) # internal_7[25] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 34($v0) # internal_7[26] = ' '
		
		addi $t0, $zero, 114
		sb $t0, 35($v0) # internal_7[27] = 'r'
		
		addi $t0, $zero, 105
		sb $t0, 36($v0) # internal_7[28] = 'i'
		
		addi $t0, $zero, 103
		sb $t0, 37($v0) # internal_7[29] = 'g'
		
		addi $t0, $zero, 104
		sb $t0, 38($v0) # internal_7[30] = 'h'
		
		addi $t0, $zero, 116
		sb $t0, 39($v0) # internal_7[31] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 40($v0) # internal_7[32] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 41($v0) # internal_7[33] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 42($v0) # internal_7[34] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 43($v0) # internal_7[35] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 44($v0) # internal_7[36] = 'l'
		
		addi $t0, $zero, 111
		sb $t0, 45($v0) # internal_7[37] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 46($v0) # internal_7[38] = 'w'
		
		addi $t0, $zero, 101
		sb $t0, 47($v0) # internal_7[39] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 48($v0) # internal_7[40] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 49($v0) # internal_7[41] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 50($v0) # internal_7[42] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 51($v0) # internal_7[43] = 'e'
		
		addi $t0, $zero, 102
		sb $t0, 52($v0) # internal_7[44] = 'f'
		
		addi $t0, $zero, 116
		sb $t0, 53($v0) # internal_7[45] = 't'
		
		addi $t0, $zero, 10
		sb $t0, 54($v0) # internal_7[46] = '\n'
		
		sb $zero, 55($v0) # Null-terminator at the end of the string
		
		sw $v0, 592($sp) # internal_7 = "\t3: A slash from the upper right to lower left\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_7
		lw $t0, 604($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 600($sp) # internal_8 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 18 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 9
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_9[0] = '\t'
		
		addi $t0, $zero, 52
		sb $t0, 9($v0) # internal_9[1] = '4'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_9[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_9[3] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 12($v0) # internal_9[4] = 'A'
		
		addi $t0, $zero, 110
		sb $t0, 13($v0) # internal_9[5] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_9[6] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_9[7] = 'X'
		
		addi $t0, $zero, 10
		sb $t0, 16($v0) # internal_9[8] = '\n'
		
		sb $zero, 17($v0) # Null-terminator at the end of the string
		
		sw $v0, 584($sp) # internal_9 = "\t4: An X\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_9
		lw $t0, 596($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 592($sp) # internal_10 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_11[0] = '\t'
		
		addi $t0, $zero, 53
		sb $t0, 9($v0) # internal_11[1] = '5'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_11[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_11[3] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 12($v0) # internal_11[4] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_11[5] = ' '
		
		addi $t0, $zero, 103
		sb $t0, 14($v0) # internal_11[6] = 'g'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_11[7] = 'r'
		
		addi $t0, $zero, 101
		sb $t0, 16($v0) # internal_11[8] = 'e'
		
		addi $t0, $zero, 97
		sb $t0, 17($v0) # internal_11[9] = 'a'
		
		addi $t0, $zero, 116
		sb $t0, 18($v0) # internal_11[10] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 19($v0) # internal_11[11] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 20($v0) # internal_11[12] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_11[13] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 22($v0) # internal_11[14] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 23($v0) # internal_11[15] = 'h'
		
		addi $t0, $zero, 97
		sb $t0, 24($v0) # internal_11[16] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 25($v0) # internal_11[17] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_11[18] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 27($v0) # internal_11[19] = 's'
		
		addi $t0, $zero, 105
		sb $t0, 28($v0) # internal_11[20] = 'i'
		
		addi $t0, $zero, 103
		sb $t0, 29($v0) # internal_11[21] = 'g'
		
		addi $t0, $zero, 110
		sb $t0, 30($v0) # internal_11[22] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_11[23] = ' '
		
		addi $t0, $zero, 10
		sb $t0, 32($v0) # internal_11[24] = '\n'
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 576($sp) # internal_11 = "\t5: A greater than sign \n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_11
		lw $t0, 588($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 584($sp) # internal_12 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 30 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_13[0] = '\t'
		
		addi $t0, $zero, 54
		sb $t0, 9($v0) # internal_13[1] = '6'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_13[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_13[3] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 12($v0) # internal_13[4] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_13[5] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 14($v0) # internal_13[6] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 15($v0) # internal_13[7] = 'e'
		
		addi $t0, $zero, 115
		sb $t0, 16($v0) # internal_13[8] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 17($v0) # internal_13[9] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_13[10] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 19($v0) # internal_13[11] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 20($v0) # internal_13[12] = 'h'
		
		addi $t0, $zero, 97
		sb $t0, 21($v0) # internal_13[13] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 22($v0) # internal_13[14] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_13[15] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 24($v0) # internal_13[16] = 's'
		
		addi $t0, $zero, 105
		sb $t0, 25($v0) # internal_13[17] = 'i'
		
		addi $t0, $zero, 103
		sb $t0, 26($v0) # internal_13[18] = 'g'
		
		addi $t0, $zero, 110
		sb $t0, 27($v0) # internal_13[19] = 'n'
		
		addi $t0, $zero, 10
		sb $t0, 28($v0) # internal_13[20] = '\n'
		
		sb $zero, 29($v0) # Null-terminator at the end of the string
		
		sw $v0, 568($sp) # internal_13 = "\t6: A less than sign\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_13
		lw $t0, 580($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 576($sp) # internal_14 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 36 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 27
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_15[0] = '\t'
		
		addi $t0, $zero, 55
		sb $t0, 9($v0) # internal_15[1] = '7'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_15[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_15[3] = ' '
		
		addi $t0, $zero, 84
		sb $t0, 12($v0) # internal_15[4] = 'T'
		
		addi $t0, $zero, 119
		sb $t0, 13($v0) # internal_15[5] = 'w'
		
		addi $t0, $zero, 111
		sb $t0, 14($v0) # internal_15[6] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_15[7] = ' '
		
		addi $t0, $zero, 103
		sb $t0, 16($v0) # internal_15[8] = 'g'
		
		addi $t0, $zero, 114
		sb $t0, 17($v0) # internal_15[9] = 'r'
		
		addi $t0, $zero, 101
		sb $t0, 18($v0) # internal_15[10] = 'e'
		
		addi $t0, $zero, 97
		sb $t0, 19($v0) # internal_15[11] = 'a'
		
		addi $t0, $zero, 116
		sb $t0, 20($v0) # internal_15[12] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 21($v0) # internal_15[13] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 22($v0) # internal_15[14] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_15[15] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 24($v0) # internal_15[16] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 25($v0) # internal_15[17] = 'h'
		
		addi $t0, $zero, 97
		sb $t0, 26($v0) # internal_15[18] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 27($v0) # internal_15[19] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_15[20] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 29($v0) # internal_15[21] = 's'
		
		addi $t0, $zero, 105
		sb $t0, 30($v0) # internal_15[22] = 'i'
		
		addi $t0, $zero, 103
		sb $t0, 31($v0) # internal_15[23] = 'g'
		
		addi $t0, $zero, 110
		sb $t0, 32($v0) # internal_15[24] = 'n'
		
		addi $t0, $zero, 115
		sb $t0, 33($v0) # internal_15[25] = 's'
		
		addi $t0, $zero, 10
		sb $t0, 34($v0) # internal_15[26] = '\n'
		
		sb $zero, 35($v0) # Null-terminator at the end of the string
		
		sw $v0, 560($sp) # internal_15 = "\t7: Two greater than signs\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_15
		lw $t0, 572($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 568($sp) # internal_16 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 33 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 24
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_17[0] = '\t'
		
		addi $t0, $zero, 56
		sb $t0, 9($v0) # internal_17[1] = '8'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_17[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_17[3] = ' '
		
		addi $t0, $zero, 84
		sb $t0, 12($v0) # internal_17[4] = 'T'
		
		addi $t0, $zero, 119
		sb $t0, 13($v0) # internal_17[5] = 'w'
		
		addi $t0, $zero, 111
		sb $t0, 14($v0) # internal_17[6] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_17[7] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 16($v0) # internal_17[8] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_17[9] = 'e'
		
		addi $t0, $zero, 115
		sb $t0, 18($v0) # internal_17[10] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 19($v0) # internal_17[11] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_17[12] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 21($v0) # internal_17[13] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 22($v0) # internal_17[14] = 'h'
		
		addi $t0, $zero, 97
		sb $t0, 23($v0) # internal_17[15] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 24($v0) # internal_17[16] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_17[17] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 26($v0) # internal_17[18] = 's'
		
		addi $t0, $zero, 105
		sb $t0, 27($v0) # internal_17[19] = 'i'
		
		addi $t0, $zero, 103
		sb $t0, 28($v0) # internal_17[20] = 'g'
		
		addi $t0, $zero, 110
		sb $t0, 29($v0) # internal_17[21] = 'n'
		
		addi $t0, $zero, 115
		sb $t0, 30($v0) # internal_17[22] = 's'
		
		addi $t0, $zero, 10
		sb $t0, 31($v0) # internal_17[23] = '\n'
		
		sb $zero, 32($v0) # Null-terminator at the end of the string
		
		sw $v0, 552($sp) # internal_17 = "\t8: Two less than signs\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_17
		lw $t0, 564($sp)
		sw $t0, 0($sp) # Storing internal_17
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 560($sp) # internal_18 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 19 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_19[0] = '\t'
		
		addi $t0, $zero, 57
		sb $t0, 9($v0) # internal_19[1] = '9'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_19[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_19[3] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 12($v0) # internal_19[4] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_19[5] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 14($v0) # internal_19[6] = '''
		
		addi $t0, $zero, 86
		sb $t0, 15($v0) # internal_19[7] = 'V'
		
		addi $t0, $zero, 39
		sb $t0, 16($v0) # internal_19[8] = '''
		
		addi $t0, $zero, 10
		sb $t0, 17($v0) # internal_19[9] = '\n'
		
		sb $zero, 18($v0) # Null-terminator at the end of the string
		
		sw $v0, 544($sp) # internal_19 = "\t9: A 'V'\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_19
		lw $t0, 556($sp)
		sw $t0, 0($sp) # Storing internal_19
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 552($sp) # internal_20 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 20
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_21[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_21[1] = '1'
		
		addi $t0, $zero, 48
		sb $t0, 10($v0) # internal_21[2] = '0'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_21[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_21[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_21[5] = 'A'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_21[6] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_21[7] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 16($v0) # internal_21[8] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 17($v0) # internal_21[9] = 'n'
		
		addi $t0, $zero, 118
		sb $t0, 18($v0) # internal_21[10] = 'v'
		
		addi $t0, $zero, 101
		sb $t0, 19($v0) # internal_21[11] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 20($v0) # internal_21[12] = 'r'
		
		addi $t0, $zero, 115
		sb $t0, 21($v0) # internal_21[13] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 22($v0) # internal_21[14] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_21[15] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 24($v0) # internal_21[16] = '''
		
		addi $t0, $zero, 86
		sb $t0, 25($v0) # internal_21[17] = 'V'
		
		addi $t0, $zero, 39
		sb $t0, 26($v0) # internal_21[18] = '''
		
		addi $t0, $zero, 10
		sb $t0, 27($v0) # internal_21[19] = '\n'
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 536($sp) # internal_21 = "\t10: An inverse 'V'\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_21
		lw $t0, 548($sp)
		sw $t0, 0($sp) # Storing internal_21
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 544($sp) # internal_22 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 40 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 31
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_23[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_23[1] = '1'
		
		addi $t0, $zero, 49
		sb $t0, 10($v0) # internal_23[2] = '1'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_23[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_23[4] = ' '
		
		addi $t0, $zero, 78
		sb $t0, 13($v0) # internal_23[5] = 'N'
		
		addi $t0, $zero, 117
		sb $t0, 14($v0) # internal_23[6] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 15($v0) # internal_23[7] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 16($v0) # internal_23[8] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_23[9] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 18($v0) # internal_23[10] = 'r'
		
		addi $t0, $zero, 115
		sb $t0, 19($v0) # internal_23[11] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_23[12] = ' '
		
		addi $t0, $zero, 57
		sb $t0, 21($v0) # internal_23[13] = '9'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_23[14] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 23($v0) # internal_23[15] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 24($v0) # internal_23[16] = 'n'
		
		addi $t0, $zero, 100
		sb $t0, 25($v0) # internal_23[17] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_23[18] = ' '
		
		addi $t0, $zero, 49
		sb $t0, 27($v0) # internal_23[19] = '1'
		
		addi $t0, $zero, 48
		sb $t0, 28($v0) # internal_23[20] = '0'
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_23[21] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 30($v0) # internal_23[22] = 'c'
		
		addi $t0, $zero, 111
		sb $t0, 31($v0) # internal_23[23] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 32($v0) # internal_23[24] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 33($v0) # internal_23[25] = 'b'
		
		addi $t0, $zero, 105
		sb $t0, 34($v0) # internal_23[26] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 35($v0) # internal_23[27] = 'n'
		
		addi $t0, $zero, 101
		sb $t0, 36($v0) # internal_23[28] = 'e'
		
		addi $t0, $zero, 100
		sb $t0, 37($v0) # internal_23[29] = 'd'
		
		addi $t0, $zero, 10
		sb $t0, 38($v0) # internal_23[30] = '\n'
		
		sb $zero, 39($v0) # Null-terminator at the end of the string
		
		sw $v0, 528($sp) # internal_23 = "\t11: Numbers 9 and 10 combined\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_23
		lw $t0, 540($sp)
		sw $t0, 0($sp) # Storing internal_23
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 536($sp) # internal_24 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 26 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 17
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_25[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_25[1] = '1'
		
		addi $t0, $zero, 50
		sb $t0, 10($v0) # internal_25[2] = '2'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_25[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_25[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_25[5] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_25[6] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 15($v0) # internal_25[7] = 'f'
		
		addi $t0, $zero, 117
		sb $t0, 16($v0) # internal_25[8] = 'u'
		
		addi $t0, $zero, 108
		sb $t0, 17($v0) # internal_25[9] = 'l'
		
		addi $t0, $zero, 108
		sb $t0, 18($v0) # internal_25[10] = 'l'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_25[11] = ' '
		
		addi $t0, $zero, 103
		sb $t0, 20($v0) # internal_25[12] = 'g'
		
		addi $t0, $zero, 114
		sb $t0, 21($v0) # internal_25[13] = 'r'
		
		addi $t0, $zero, 105
		sb $t0, 22($v0) # internal_25[14] = 'i'
		
		addi $t0, $zero, 100
		sb $t0, 23($v0) # internal_25[15] = 'd'
		
		addi $t0, $zero, 10
		sb $t0, 24($v0) # internal_25[16] = '\n'
		
		sb $zero, 25($v0) # Null-terminator at the end of the string
		
		sw $v0, 520($sp) # internal_25 = "\t12: A full grid\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_25
		lw $t0, 532($sp)
		sw $t0, 0($sp) # Storing internal_25
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 528($sp) # internal_26 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 20 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 11
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_27[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_27[1] = '1'
		
		addi $t0, $zero, 51
		sb $t0, 10($v0) # internal_27[2] = '3'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_27[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_27[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_27[5] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_27[6] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 15($v0) # internal_27[7] = '''
		
		addi $t0, $zero, 84
		sb $t0, 16($v0) # internal_27[8] = 'T'
		
		addi $t0, $zero, 39
		sb $t0, 17($v0) # internal_27[9] = '''
		
		addi $t0, $zero, 10
		sb $t0, 18($v0) # internal_27[10] = '\n'
		
		sb $zero, 19($v0) # Null-terminator at the end of the string
		
		sw $v0, 512($sp) # internal_27 = "\t13: A 'T'\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_27
		lw $t0, 524($sp)
		sw $t0, 0($sp) # Storing internal_27
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 520($sp) # internal_28 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 25 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 16
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_29[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_29[1] = '1'
		
		addi $t0, $zero, 52
		sb $t0, 10($v0) # internal_29[2] = '4'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_29[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_29[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_29[5] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_29[6] = ' '
		
		addi $t0, $zero, 112
		sb $t0, 15($v0) # internal_29[7] = 'p'
		
		addi $t0, $zero, 108
		sb $t0, 16($v0) # internal_29[8] = 'l'
		
		addi $t0, $zero, 117
		sb $t0, 17($v0) # internal_29[9] = 'u'
		
		addi $t0, $zero, 115
		sb $t0, 18($v0) # internal_29[10] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_29[11] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 20($v0) # internal_29[12] = '''
		
		addi $t0, $zero, 43
		sb $t0, 21($v0) # internal_29[13] = '+'
		
		addi $t0, $zero, 39
		sb $t0, 22($v0) # internal_29[14] = '''
		
		addi $t0, $zero, 10
		sb $t0, 23($v0) # internal_29[15] = '\n'
		
		sb $zero, 24($v0) # Null-terminator at the end of the string
		
		sw $v0, 504($sp) # internal_29 = "\t14: A plus '+'\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_29
		lw $t0, 516($sp)
		sw $t0, 0($sp) # Storing internal_29
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 512($sp) # internal_30 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 20 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 11
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_31[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_31[1] = '1'
		
		addi $t0, $zero, 53
		sb $t0, 10($v0) # internal_31[2] = '5'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_31[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_31[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_31[5] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_31[6] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 15($v0) # internal_31[7] = '''
		
		addi $t0, $zero, 87
		sb $t0, 16($v0) # internal_31[8] = 'W'
		
		addi $t0, $zero, 39
		sb $t0, 17($v0) # internal_31[9] = '''
		
		addi $t0, $zero, 10
		sb $t0, 18($v0) # internal_31[10] = '\n'
		
		sb $zero, 19($v0) # Null-terminator at the end of the string
		
		sw $v0, 496($sp) # internal_31 = "\t15: A 'W'\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_31
		lw $t0, 508($sp)
		sw $t0, 0($sp) # Storing internal_31
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 504($sp) # internal_32 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 12
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_33[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_33[1] = '1'
		
		addi $t0, $zero, 54
		sb $t0, 10($v0) # internal_33[2] = '6'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_33[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_33[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_33[5] = 'A'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_33[6] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_33[7] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 16($v0) # internal_33[8] = '''
		
		addi $t0, $zero, 77
		sb $t0, 17($v0) # internal_33[9] = 'M'
		
		addi $t0, $zero, 39
		sb $t0, 18($v0) # internal_33[10] = '''
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_33[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 488($sp) # internal_33 = "\t16: An 'M'\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_33
		lw $t0, 500($sp)
		sw $t0, 0($sp) # Storing internal_33
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 496($sp) # internal_34 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 12
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_35[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_35[1] = '1'
		
		addi $t0, $zero, 55
		sb $t0, 10($v0) # internal_35[2] = '7'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_35[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_35[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_35[5] = 'A'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_35[6] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_35[7] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 16($v0) # internal_35[8] = '''
		
		addi $t0, $zero, 69
		sb $t0, 17($v0) # internal_35[9] = 'E'
		
		addi $t0, $zero, 39
		sb $t0, 18($v0) # internal_35[10] = '''
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_35[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 480($sp) # internal_35 = "\t17: An 'E'\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_35
		lw $t0, 492($sp)
		sw $t0, 0($sp) # Storing internal_35
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 488($sp) # internal_36 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 20 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 11
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_37[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_37[1] = '1'
		
		addi $t0, $zero, 56
		sb $t0, 10($v0) # internal_37[2] = '8'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_37[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_37[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_37[5] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_37[6] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 15($v0) # internal_37[7] = '''
		
		addi $t0, $zero, 51
		sb $t0, 16($v0) # internal_37[8] = '3'
		
		addi $t0, $zero, 39
		sb $t0, 17($v0) # internal_37[9] = '''
		
		addi $t0, $zero, 10
		sb $t0, 18($v0) # internal_37[10] = '\n'
		
		sb $zero, 19($v0) # Null-terminator at the end of the string
		
		sw $v0, 472($sp) # internal_37 = "\t18: A '3'\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_37
		lw $t0, 484($sp)
		sw $t0, 0($sp) # Storing internal_37
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 480($sp) # internal_38 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 12
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_39[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_39[1] = '1'
		
		addi $t0, $zero, 57
		sb $t0, 10($v0) # internal_39[2] = '9'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_39[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_39[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_39[5] = 'A'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_39[6] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_39[7] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 16($v0) # internal_39[8] = '''
		
		addi $t0, $zero, 79
		sb $t0, 17($v0) # internal_39[9] = 'O'
		
		addi $t0, $zero, 39
		sb $t0, 18($v0) # internal_39[10] = '''
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_39[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 464($sp) # internal_39 = "\t19: An 'O'\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_39
		lw $t0, 476($sp)
		sw $t0, 0($sp) # Storing internal_39
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 472($sp) # internal_40 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 12
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_41[0] = '\t'
		
		addi $t0, $zero, 50
		sb $t0, 9($v0) # internal_41[1] = '2'
		
		addi $t0, $zero, 48
		sb $t0, 10($v0) # internal_41[2] = '0'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_41[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_41[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_41[5] = 'A'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_41[6] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_41[7] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 16($v0) # internal_41[8] = '''
		
		addi $t0, $zero, 56
		sb $t0, 17($v0) # internal_41[9] = '8'
		
		addi $t0, $zero, 39
		sb $t0, 18($v0) # internal_41[10] = '''
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_41[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 456($sp) # internal_41 = "\t20: An '8'\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_41
		lw $t0, 468($sp)
		sw $t0, 0($sp) # Storing internal_41
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 464($sp) # internal_42 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 12
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_43[0] = '\t'
		
		addi $t0, $zero, 50
		sb $t0, 9($v0) # internal_43[1] = '2'
		
		addi $t0, $zero, 49
		sb $t0, 10($v0) # internal_43[2] = '1'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_43[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_43[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_43[5] = 'A'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_43[6] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_43[7] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 16($v0) # internal_43[8] = '''
		
		addi $t0, $zero, 83
		sb $t0, 17($v0) # internal_43[9] = 'S'
		
		addi $t0, $zero, 39
		sb $t0, 18($v0) # internal_43[10] = '''
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_43[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 448($sp) # internal_43 = "\t21: An 'S'\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_43
		lw $t0, 460($sp)
		sw $t0, 0($sp) # Storing internal_43
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 456($sp) # internal_44 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 24 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 15
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 89
		sb $t0, 8($v0) # internal_45[0] = 'Y'
		
		addi $t0, $zero, 111
		sb $t0, 9($v0) # internal_45[1] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 10($v0) # internal_45[2] = 'u'
		
		addi $t0, $zero, 114
		sb $t0, 11($v0) # internal_45[3] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_45[4] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 13($v0) # internal_45[5] = 'c'
		
		addi $t0, $zero, 104
		sb $t0, 14($v0) # internal_45[6] = 'h'
		
		addi $t0, $zero, 111
		sb $t0, 15($v0) # internal_45[7] = 'o'
		
		addi $t0, $zero, 105
		sb $t0, 16($v0) # internal_45[8] = 'i'
		
		addi $t0, $zero, 99
		sb $t0, 17($v0) # internal_45[9] = 'c'
		
		addi $t0, $zero, 101
		sb $t0, 18($v0) # internal_45[10] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_45[11] = ' '
		
		addi $t0, $zero, 61
		sb $t0, 20($v0) # internal_45[12] = '='
		
		addi $t0, $zero, 62
		sb $t0, 21($v0) # internal_45[13] = '>'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_45[14] = ' '
		
		sb $zero, 23($v0) # Null-terminator at the end of the string
		
		sw $v0, 440($sp) # internal_45 = "Your choice => "
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_45
		lw $t0, 452($sp)
		sw $t0, 0($sp) # Storing internal_45
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 448($sp) # internal_46 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 632($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_in_int_at_IO
		jal function_in_int_at_IO
		lw $ra, 4($sp)
		sw $v1, 440($sp) # internal_47 = result of function_in_int_at_IO
		addi $sp, $sp, 8 # Freeing space for arguments
		
		lw $t0, 432($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 620($sp)
		j end_assign
		not_is_Bool_or_Int:
		# num = internal_47
		lw $t0, 432($sp)
		sw $t0, 620($sp)
		end_assign:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_48[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 428($sp) # internal_48 = "\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_48
		lw $t0, 440($sp)
		sw $t0, 0($sp) # Storing internal_48
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 436($sp) # internal_49 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 416($sp) # internal_51 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 412($sp) # internal_52 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_52
		lw $t0, 424($sp)
		sw $t0, 0($sp) # Storing internal_52
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 420($sp) # internal_53 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 408($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 416($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_51 = internal_53
		lw $t0, 408($sp)
		sw $t0, 416($sp)
		end_assign:
		
		# If internal_51 then goto then_8789948671922
		lw $t0, 416($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671922
		
		# Jumping to else_8789948671922
		j else_8789948671922
		
		then_8789948671922:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 20
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_54[0] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_54[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_54[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_54[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_54[4] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 13($v0) # internal_54[5] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_54[6] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_54[7] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_54[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_54[9] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_54[10] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 19($v0) # internal_54[11] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_54[12] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_54[13] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_54[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_54[15] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_54[16] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 25($v0) # internal_54[17] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_54[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_54[19] = ' '
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 404($sp) # internal_54 = " XX  XXXX XXXX  XX  "
		
		lw $t0, 404($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 420($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_50 = internal_54
		lw $t0, 404($sp)
		sw $t0, 420($sp)
		end_assign:
		
		# Jumping to endif_8789948671922
		j endif_8789948671922
		
		else_8789948671922:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 396($sp) # internal_56 = address of allocated object Int
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 392($sp) # internal_57 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_57
		lw $t0, 404($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 400($sp) # internal_58 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 388($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 396($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_56 = internal_58
		lw $t0, 388($sp)
		sw $t0, 396($sp)
		end_assign:
		
		# If internal_56 then goto then_8789948671916
		lw $t0, 396($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671916
		
		# Jumping to else_8789948671916
		j else_8789948671916
		
		then_8789948671916:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_59[0] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_59[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_59[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_59[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_59[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_59[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_59[6] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_59[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_59[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_59[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_59[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_59[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_59[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_59[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_59[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_59[15] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_59[16] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_59[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_59[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_59[19] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 28($v0) # internal_59[20] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_59[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_59[22] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_59[23] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_59[24] = ' '
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 384($sp) # internal_59 = "    X   X   X   X   X    "
		
		lw $t0, 384($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 400($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_55 = internal_59
		lw $t0, 384($sp)
		sw $t0, 400($sp)
		end_assign:
		
		# Jumping to endif_8789948671916
		j endif_8789948671916
		
		else_8789948671916:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 376($sp) # internal_61 = address of allocated object Int
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 372($sp) # internal_62 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_62
		lw $t0, 384($sp)
		sw $t0, 0($sp) # Storing internal_62
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 380($sp) # internal_63 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 368($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 376($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_61 = internal_63
		lw $t0, 368($sp)
		sw $t0, 376($sp)
		end_assign:
		
		# If internal_61 then goto then_8789948671910
		lw $t0, 376($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671910
		
		# Jumping to else_8789948671910
		j else_8789948671910
		
		then_8789948671910:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_64[0] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_64[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_64[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_64[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_64[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_64[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_64[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_64[7] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_64[8] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_64[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_64[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_64[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_64[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_64[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_64[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_64[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_64[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_64[17] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 26($v0) # internal_64[18] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_64[19] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_64[20] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_64[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_64[22] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_64[23] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 32($v0) # internal_64[24] = 'X'
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 364($sp) # internal_64 = "X     X     X     X     X"
		
		lw $t0, 364($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 380($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_60 = internal_64
		lw $t0, 364($sp)
		sw $t0, 380($sp)
		end_assign:
		
		# Jumping to endif_8789948671910
		j endif_8789948671910
		
		else_8789948671910:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 356($sp) # internal_66 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 352($sp) # internal_67 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_67
		lw $t0, 364($sp)
		sw $t0, 0($sp) # Storing internal_67
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 360($sp) # internal_68 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 348($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 356($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_66 = internal_68
		lw $t0, 348($sp)
		sw $t0, 356($sp)
		end_assign:
		
		# If internal_66 then goto then_8789948671904
		lw $t0, 356($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671904
		
		# Jumping to else_8789948671904
		j else_8789948671904
		
		then_8789948671904:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_69[0] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_69[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_69[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_69[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_69[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_69[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_69[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_69[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_69[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_69[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_69[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_69[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_69[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_69[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_69[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_69[15] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_69[16] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_69[17] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 26($v0) # internal_69[18] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_69[19] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 28($v0) # internal_69[20] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_69[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_69[22] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_69[23] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 32($v0) # internal_69[24] = 'X'
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 344($sp) # internal_69 = "X   X X X   X   X X X   X"
		
		lw $t0, 344($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 360($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_65 = internal_69
		lw $t0, 344($sp)
		sw $t0, 360($sp)
		end_assign:
		
		# Jumping to endif_8789948671904
		j endif_8789948671904
		
		else_8789948671904:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 336($sp) # internal_71 = address of allocated object Int
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 332($sp) # internal_72 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_72
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing internal_72
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 340($sp) # internal_73 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 328($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 336($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_71 = internal_73
		lw $t0, 328($sp)
		sw $t0, 336($sp)
		end_assign:
		
		# If internal_71 then goto then_8789948671898
		lw $t0, 336($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671898
		
		# Jumping to else_8789948671898
		j else_8789948671898
		
		then_8789948671898:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_74[0] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_74[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_74[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_74[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_74[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_74[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_74[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_74[7] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_74[8] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_74[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_74[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_74[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_74[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_74[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_74[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_74[15] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_74[16] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_74[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_74[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_74[19] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 28($v0) # internal_74[20] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_74[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_74[22] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_74[23] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_74[24] = ' '
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 324($sp) # internal_74 = "X     X     X   X   X    "
		
		lw $t0, 324($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 340($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_70 = internal_74
		lw $t0, 324($sp)
		sw $t0, 340($sp)
		end_assign:
		
		# Jumping to endif_8789948671898
		j endif_8789948671898
		
		else_8789948671898:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 316($sp) # internal_76 = address of allocated object Int
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 312($sp) # internal_77 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_77
		lw $t0, 324($sp)
		sw $t0, 0($sp) # Storing internal_77
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 320($sp) # internal_78 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 308($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 316($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_76 = internal_78
		lw $t0, 308($sp)
		sw $t0, 316($sp)
		end_assign:
		
		# If internal_76 then goto then_8789948671892
		lw $t0, 316($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671892
		
		# Jumping to else_8789948671892
		j else_8789948671892
		
		then_8789948671892:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_79[0] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_79[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_79[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_79[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_79[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_79[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_79[6] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_79[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_79[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_79[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_79[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_79[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_79[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_79[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_79[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_79[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_79[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_79[17] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 26($v0) # internal_79[18] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_79[19] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_79[20] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_79[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_79[22] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_79[23] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 32($v0) # internal_79[24] = 'X'
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 304($sp) # internal_79 = "    X   X   X     X     X"
		
		lw $t0, 304($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 320($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_75 = internal_79
		lw $t0, 304($sp)
		sw $t0, 320($sp)
		end_assign:
		
		# Jumping to endif_8789948671892
		j endif_8789948671892
		
		else_8789948671892:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 296($sp) # internal_81 = address of allocated object Int
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 292($sp) # internal_82 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_82
		lw $t0, 304($sp)
		sw $t0, 0($sp) # Storing internal_82
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 300($sp) # internal_83 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 288($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 296($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_81 = internal_83
		lw $t0, 288($sp)
		sw $t0, 296($sp)
		end_assign:
		
		# If internal_81 then goto then_8789948671886
		lw $t0, 296($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671886
		
		# Jumping to else_8789948671886
		j else_8789948671886
		
		then_8789948671886:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 20
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_84[0] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_84[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_84[2] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 11($v0) # internal_84[3] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_84[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_84[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_84[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_84[7] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_84[8] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 17($v0) # internal_84[9] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_84[10] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_84[11] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_84[12] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_84[13] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_84[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_84[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_84[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_84[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_84[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_84[19] = ' '
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 284($sp) # internal_84 = "X  X  X  XX  X      "
		
		lw $t0, 284($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 300($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_80 = internal_84
		lw $t0, 284($sp)
		sw $t0, 300($sp)
		end_assign:
		
		# Jumping to endif_8789948671886
		j endif_8789948671886
		
		else_8789948671886:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 276($sp) # internal_86 = address of allocated object Int
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 272($sp) # internal_87 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_87
		lw $t0, 284($sp)
		sw $t0, 0($sp) # Storing internal_87
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 280($sp) # internal_88 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 268($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 276($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_86 = internal_88
		lw $t0, 268($sp)
		sw $t0, 276($sp)
		end_assign:
		
		# If internal_86 then goto then_8789948671880
		lw $t0, 276($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671880
		
		# Jumping to else_8789948671880
		j else_8789948671880
		
		then_8789948671880:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 20
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_89[0] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_89[1] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_89[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_89[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_89[4] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 13($v0) # internal_89[5] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_89[6] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_89[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_89[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_89[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_89[10] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 19($v0) # internal_89[11] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_89[12] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_89[13] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_89[14] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_89[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_89[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_89[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_89[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_89[19] = ' '
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 264($sp) # internal_89 = " X  XX  X  X  X     "
		
		lw $t0, 264($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 280($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_85 = internal_89
		lw $t0, 264($sp)
		sw $t0, 280($sp)
		end_assign:
		
		# Jumping to endif_8789948671880
		j endif_8789948671880
		
		else_8789948671880:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 256($sp) # internal_91 = address of allocated object Int
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 252($sp) # internal_92 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_92
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing internal_92
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 260($sp) # internal_93 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 248($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 256($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_91 = internal_93
		lw $t0, 248($sp)
		sw $t0, 256($sp)
		end_assign:
		
		# If internal_91 then goto then_8789948671874
		lw $t0, 256($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671874
		
		# Jumping to else_8789948671874
		j else_8789948671874
		
		then_8789948671874:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 24 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 15
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_94[0] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_94[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_94[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_94[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_94[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_94[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_94[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_94[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_94[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_94[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_94[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_94[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_94[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_94[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_94[14] = ' '
		
		sb $zero, 23($v0) # Null-terminator at the end of the string
		
		sw $v0, 244($sp) # internal_94 = "X   X X X   X  "
		
		lw $t0, 244($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 260($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_90 = internal_94
		lw $t0, 244($sp)
		sw $t0, 260($sp)
		end_assign:
		
		# Jumping to endif_8789948671874
		j endif_8789948671874
		
		else_8789948671874:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 236($sp) # internal_96 = address of allocated object Int
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 232($sp) # internal_97 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_97
		lw $t0, 244($sp)
		sw $t0, 0($sp) # Storing internal_97
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 240($sp) # internal_98 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 228($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 236($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_96 = internal_98
		lw $t0, 228($sp)
		sw $t0, 236($sp)
		end_assign:
		
		# If internal_96 then goto then_8789948671868
		lw $t0, 236($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671868
		
		# Jumping to else_8789948671868
		j else_8789948671868
		
		then_8789948671868:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 24 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 15
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_99[0] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_99[1] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_99[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_99[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_99[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_99[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_99[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_99[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_99[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_99[9] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_99[10] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_99[11] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_99[12] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_99[13] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_99[14] = 'X'
		
		sb $zero, 23($v0) # Null-terminator at the end of the string
		
		sw $v0, 224($sp) # internal_99 = "  X   X X X   X"
		
		lw $t0, 224($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 240($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_95 = internal_99
		lw $t0, 224($sp)
		sw $t0, 240($sp)
		end_assign:
		
		# Jumping to endif_8789948671868
		j endif_8789948671868
		
		else_8789948671868:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 216($sp) # internal_101 = address of allocated object Int
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 212($sp) # internal_102 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_102
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_102
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 220($sp) # internal_103 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 208($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 216($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_101 = internal_103
		lw $t0, 208($sp)
		sw $t0, 216($sp)
		end_assign:
		
		# If internal_101 then goto then_8789948671862
		lw $t0, 216($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671862
		
		# Jumping to else_8789948671862
		j else_8789948671862
		
		then_8789948671862:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 24 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 15
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_104[0] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_104[1] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_104[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_104[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_104[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_104[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_104[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_104[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_104[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_104[9] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_104[10] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_104[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_104[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_104[13] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_104[14] = 'X'
		
		sb $zero, 23($v0) # Null-terminator at the end of the string
		
		sw $v0, 204($sp) # internal_104 = "X X X X X X X X"
		
		lw $t0, 204($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 220($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_100 = internal_104
		lw $t0, 204($sp)
		sw $t0, 220($sp)
		end_assign:
		
		# Jumping to endif_8789948671862
		j endif_8789948671862
		
		else_8789948671862:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 196($sp) # internal_106 = address of allocated object Int
		
		# Allocating Int 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 12
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 192($sp) # internal_107 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_107
		lw $t0, 204($sp)
		sw $t0, 0($sp) # Storing internal_107
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 200($sp) # internal_108 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 188($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 196($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_106 = internal_108
		lw $t0, 188($sp)
		sw $t0, 196($sp)
		end_assign:
		
		# If internal_106 then goto then_8789948671856
		lw $t0, 196($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671856
		
		# Jumping to else_8789948671856
		j else_8789948671856
		
		then_8789948671856:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_109[0] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_109[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_109[2] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 11($v0) # internal_109[3] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_109[4] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 13($v0) # internal_109[5] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_109[6] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_109[7] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_109[8] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 17($v0) # internal_109[9] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_109[10] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 19($v0) # internal_109[11] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_109[12] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_109[13] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_109[14] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 23($v0) # internal_109[15] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_109[16] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 25($v0) # internal_109[17] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 26($v0) # internal_109[18] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 27($v0) # internal_109[19] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 28($v0) # internal_109[20] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 29($v0) # internal_109[21] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 30($v0) # internal_109[22] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 31($v0) # internal_109[23] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 32($v0) # internal_109[24] = 'X'
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 184($sp) # internal_109 = "XXXXXXXXXXXXXXXXXXXXXXXXX"
		
		lw $t0, 184($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 200($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_105 = internal_109
		lw $t0, 184($sp)
		sw $t0, 200($sp)
		end_assign:
		
		# Jumping to endif_8789948671856
		j endif_8789948671856
		
		else_8789948671856:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_111 = address of allocated object Int
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 172($sp) # internal_112 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_112
		lw $t0, 184($sp)
		sw $t0, 0($sp) # Storing internal_112
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 180($sp) # internal_113 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 168($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 176($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_111 = internal_113
		lw $t0, 168($sp)
		sw $t0, 176($sp)
		end_assign:
		
		# If internal_111 then goto then_8789948671850
		lw $t0, 176($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671850
		
		# Jumping to else_8789948671850
		j else_8789948671850
		
		then_8789948671850:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_114[0] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_114[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_114[2] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 11($v0) # internal_114[3] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_114[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_114[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_114[6] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_114[7] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_114[8] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_114[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_114[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_114[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_114[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_114[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_114[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_114[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_114[16] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 25($v0) # internal_114[17] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_114[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_114[19] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_114[20] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_114[21] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 30($v0) # internal_114[22] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_114[23] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_114[24] = ' '
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 164($sp) # internal_114 = "XXXXX  X    X    X    X  "
		
		lw $t0, 164($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 180($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_110 = internal_114
		lw $t0, 164($sp)
		sw $t0, 180($sp)
		end_assign:
		
		# Jumping to endif_8789948671850
		j endif_8789948671850
		
		else_8789948671850:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 156($sp) # internal_116 = address of allocated object Int
		
		# Allocating Int 14
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 14
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 152($sp) # internal_117 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_117
		lw $t0, 164($sp)
		sw $t0, 0($sp) # Storing internal_117
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 160($sp) # internal_118 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 148($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 156($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_116 = internal_118
		lw $t0, 148($sp)
		sw $t0, 156($sp)
		end_assign:
		
		# If internal_116 then goto then_8789948671844
		lw $t0, 156($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671844
		
		# Jumping to else_8789948671844
		j else_8789948671844
		
		then_8789948671844:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_119[0] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_119[1] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_119[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_119[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_119[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_119[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_119[6] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_119[7] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_119[8] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_119[9] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_119[10] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 19($v0) # internal_119[11] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_119[12] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_119[13] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_119[14] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_119[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_119[16] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 25($v0) # internal_119[17] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_119[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_119[19] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_119[20] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_119[21] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 30($v0) # internal_119[22] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_119[23] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_119[24] = ' '
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 144($sp) # internal_119 = "  X    X  XXXXX  X    X  "
		
		lw $t0, 144($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 160($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_115 = internal_119
		lw $t0, 144($sp)
		sw $t0, 160($sp)
		end_assign:
		
		# Jumping to endif_8789948671844
		j endif_8789948671844
		
		else_8789948671844:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_121 = address of allocated object Int
		
		# Allocating Int 15
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 15
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_122 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_122
		lw $t0, 144($sp)
		sw $t0, 0($sp) # Storing internal_122
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 140($sp) # internal_123 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 128($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 136($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_121 = internal_123
		lw $t0, 128($sp)
		sw $t0, 136($sp)
		end_assign:
		
		# If internal_121 then goto then_8789948671838
		lw $t0, 136($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671838
		
		# Jumping to else_8789948671838
		j else_8789948671838
		
		then_8789948671838:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 30 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_124[0] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_124[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_124[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_124[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_124[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_124[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_124[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_124[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_124[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_124[9] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_124[10] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_124[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_124[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_124[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_124[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_124[15] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_124[16] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_124[17] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 26($v0) # internal_124[18] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_124[19] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_124[20] = ' '
		
		sb $zero, 29($v0) # Null-terminator at the end of the string
		
		sw $v0, 124($sp) # internal_124 = "X     X X X X   X X  "
		
		lw $t0, 124($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 140($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_120 = internal_124
		lw $t0, 124($sp)
		sw $t0, 140($sp)
		end_assign:
		
		# Jumping to endif_8789948671838
		j endif_8789948671838
		
		else_8789948671838:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 116($sp) # internal_126 = address of allocated object Int
		
		# Allocating Int 16
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 16
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_127 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_127
		lw $t0, 124($sp)
		sw $t0, 0($sp) # Storing internal_127
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 120($sp) # internal_128 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 108($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 116($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_126 = internal_128
		lw $t0, 108($sp)
		sw $t0, 116($sp)
		end_assign:
		
		# If internal_126 then goto then_8789948671832
		lw $t0, 116($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671832
		
		# Jumping to else_8789948671832
		j else_8789948671832
		
		then_8789948671832:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 30 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_129[0] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_129[1] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_129[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_129[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_129[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_129[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_129[6] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_129[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_129[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_129[9] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_129[10] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_129[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_129[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_129[13] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_129[14] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_129[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_129[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_129[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_129[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_129[19] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 28($v0) # internal_129[20] = 'X'
		
		sb $zero, 29($v0) # Null-terminator at the end of the string
		
		sw $v0, 104($sp) # internal_129 = "  X X   X X X X     X"
		
		lw $t0, 104($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 120($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_125 = internal_129
		lw $t0, 104($sp)
		sw $t0, 120($sp)
		end_assign:
		
		# Jumping to endif_8789948671832
		j endif_8789948671832
		
		else_8789948671832:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_131 = address of allocated object Int
		
		# Allocating Int 17
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 17
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 92($sp) # internal_132 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_132
		lw $t0, 104($sp)
		sw $t0, 0($sp) # Storing internal_132
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_133 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 88($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 96($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_131 = internal_133
		lw $t0, 88($sp)
		sw $t0, 96($sp)
		end_assign:
		
		# If internal_131 then goto then_8789948671826
		lw $t0, 96($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671826
		
		# Jumping to else_8789948671826
		j else_8789948671826
		
		then_8789948671826:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 37 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 28
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_134[0] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_134[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_134[2] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 11($v0) # internal_134[3] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_134[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_134[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_134[6] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_134[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_134[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_134[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_134[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_134[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_134[12] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_134[13] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_134[14] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 23($v0) # internal_134[15] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_134[16] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_134[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_134[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_134[19] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 28($v0) # internal_134[20] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_134[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_134[22] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_134[23] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 32($v0) # internal_134[24] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 33($v0) # internal_134[25] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 34($v0) # internal_134[26] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 35($v0) # internal_134[27] = 'X'
		
		sb $zero, 36($v0) # Null-terminator at the end of the string
		
		sw $v0, 84($sp) # internal_134 = "XXXXX   X   XXXXX   X   XXXX"
		
		lw $t0, 84($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 100($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_130 = internal_134
		lw $t0, 84($sp)
		sw $t0, 100($sp)
		end_assign:
		
		# Jumping to endif_8789948671826
		j endif_8789948671826
		
		else_8789948671826:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 76($sp) # internal_136 = address of allocated object Int
		
		# Allocating Int 18
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 18
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_137 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_137
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing internal_137
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 80($sp) # internal_138 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 68($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 76($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_136 = internal_138
		lw $t0, 68($sp)
		sw $t0, 76($sp)
		end_assign:
		
		# If internal_136 then goto then_8789948671820
		lw $t0, 76($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671820
		
		# Jumping to else_8789948671820
		j else_8789948671820
		
		then_8789948671820:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 37 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 28
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_139[0] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_139[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_139[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_139[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_139[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_139[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_139[6] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_139[7] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_139[8] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_139[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_139[10] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 19($v0) # internal_139[11] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_139[12] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_139[13] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_139[14] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_139[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_139[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_139[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_139[18] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 27($v0) # internal_139[19] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_139[20] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_139[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_139[22] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 31($v0) # internal_139[23] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 32($v0) # internal_139[24] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 33($v0) # internal_139[25] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 34($v0) # internal_139[26] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 35($v0) # internal_139[27] = ' '
		
		sb $zero, 36($v0) # Null-terminator at the end of the string
		
		sw $v0, 64($sp) # internal_139 = "XXX    X   X  X    X   XXXX "
		
		lw $t0, 64($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 80($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_135 = internal_139
		lw $t0, 64($sp)
		sw $t0, 80($sp)
		end_assign:
		
		# Jumping to endif_8789948671820
		j endif_8789948671820
		
		else_8789948671820:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_141 = address of allocated object Int
		
		# Allocating Int 19
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 19
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_142 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_142
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_142
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_143 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 48($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 56($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_141 = internal_143
		lw $t0, 48($sp)
		sw $t0, 56($sp)
		end_assign:
		
		# If internal_141 then goto then_8789948671814
		lw $t0, 56($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671814
		
		# Jumping to else_8789948671814
		j else_8789948671814
		
		then_8789948671814:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 25 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 16
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_144[0] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_144[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_144[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_144[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_144[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_144[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_144[6] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_144[7] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_144[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_144[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_144[10] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 19($v0) # internal_144[11] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_144[12] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_144[13] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_144[14] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_144[15] = ' '
		
		sb $zero, 24($v0) # Null-terminator at the end of the string
		
		sw $v0, 44($sp) # internal_144 = " XX X  XX  X XX "
		
		lw $t0, 44($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 60($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_140 = internal_144
		lw $t0, 44($sp)
		sw $t0, 60($sp)
		end_assign:
		
		# Jumping to endif_8789948671814
		j endif_8789948671814
		
		else_8789948671814:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_146 = address of allocated object Int
		
		# Allocating Int 20
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 20
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_147 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_147
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_147
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_148 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 28($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 36($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_146 = internal_148
		lw $t0, 28($sp)
		sw $t0, 36($sp)
		end_assign:
		
		# If internal_146 then goto then_8789948671808
		lw $t0, 36($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671808
		
		# Jumping to else_8789948671808
		j else_8789948671808
		
		then_8789948671808:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 37 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 28
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_149[0] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_149[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_149[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_149[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_149[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_149[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_149[6] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_149[7] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_149[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_149[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_149[10] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 19($v0) # internal_149[11] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_149[12] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_149[13] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_149[14] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_149[15] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_149[16] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_149[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_149[18] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 27($v0) # internal_149[19] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 28($v0) # internal_149[20] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_149[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_149[22] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 31($v0) # internal_149[23] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_149[24] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 33($v0) # internal_149[25] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 34($v0) # internal_149[26] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 35($v0) # internal_149[27] = ' '
		
		sb $zero, 36($v0) # Null-terminator at the end of the string
		
		sw $v0, 24($sp) # internal_149 = " XX X  XX  X XX X  XX  X XX "
		
		lw $t0, 24($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 40($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_145 = internal_149
		lw $t0, 24($sp)
		sw $t0, 40($sp)
		end_assign:
		
		# Jumping to endif_8789948671808
		j endif_8789948671808
		
		else_8789948671808:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_151 = address of allocated object Int
		
		# Allocating Int 21
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 21
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 12($sp) # internal_152 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_152
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_152
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_153 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 8($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 16($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_151 = internal_153
		lw $t0, 8($sp)
		sw $t0, 16($sp)
		end_assign:
		
		# If internal_151 then goto then_8789948671802
		lw $t0, 16($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948671802
		
		# Jumping to else_8789948671802
		j else_8789948671802
		
		then_8789948671802:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 37 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 28
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_154[0] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_154[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_154[2] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 11($v0) # internal_154[3] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_154[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_154[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_154[6] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_154[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_154[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_154[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_154[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_154[11] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_154[12] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_154[13] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_154[14] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_154[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_154[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_154[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_154[18] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 27($v0) # internal_154[19] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_154[20] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_154[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_154[22] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 31($v0) # internal_154[23] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 32($v0) # internal_154[24] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 33($v0) # internal_154[25] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 34($v0) # internal_154[26] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 35($v0) # internal_154[27] = ' '
		
		sb $zero, 36($v0) # Null-terminator at the end of the string
		
		sw $v0, 4($sp) # internal_154 = " XXXX   X    XX    X   XXXX "
		
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 20($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_150 = internal_154
		lw $t0, 4($sp)
		sw $t0, 20($sp)
		end_assign:
		
		# Jumping to endif_8789948671802
		j endif_8789948671802
		
		else_8789948671802:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_155[0] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_155[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_155[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_155[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_155[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_155[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_155[6] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_155[7] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_155[8] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_155[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_155[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_155[11] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_155[12] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_155[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_155[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_155[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_155[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_155[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_155[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_155[19] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_155[20] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_155[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_155[22] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_155[23] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_155[24] = ' '
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 0($sp) # internal_155 = "                         "
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 20($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_150 = internal_155
		lw $t0, 0($sp)
		sw $t0, 20($sp)
		end_assign:
		
		# Jumping to endif_8789948671802
		j endif_8789948671802
		
		endif_8789948671802:
		
		lw $t0, 20($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 40($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_145 = internal_150
		lw $t0, 20($sp)
		sw $t0, 40($sp)
		end_assign:
		
		# Jumping to endif_8789948671808
		j endif_8789948671808
		
		endif_8789948671808:
		
		lw $t0, 40($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 60($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_140 = internal_145
		lw $t0, 40($sp)
		sw $t0, 60($sp)
		end_assign:
		
		# Jumping to endif_8789948671814
		j endif_8789948671814
		
		endif_8789948671814:
		
		lw $t0, 60($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 80($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_135 = internal_140
		lw $t0, 60($sp)
		sw $t0, 80($sp)
		end_assign:
		
		# Jumping to endif_8789948671820
		j endif_8789948671820
		
		endif_8789948671820:
		
		lw $t0, 80($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 100($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_130 = internal_135
		lw $t0, 80($sp)
		sw $t0, 100($sp)
		end_assign:
		
		# Jumping to endif_8789948671826
		j endif_8789948671826
		
		endif_8789948671826:
		
		lw $t0, 100($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 120($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_125 = internal_130
		lw $t0, 100($sp)
		sw $t0, 120($sp)
		end_assign:
		
		# Jumping to endif_8789948671832
		j endif_8789948671832
		
		endif_8789948671832:
		
		lw $t0, 120($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 140($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_120 = internal_125
		lw $t0, 120($sp)
		sw $t0, 140($sp)
		end_assign:
		
		# Jumping to endif_8789948671838
		j endif_8789948671838
		
		endif_8789948671838:
		
		lw $t0, 140($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 160($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_115 = internal_120
		lw $t0, 140($sp)
		sw $t0, 160($sp)
		end_assign:
		
		# Jumping to endif_8789948671844
		j endif_8789948671844
		
		endif_8789948671844:
		
		lw $t0, 160($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 180($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_110 = internal_115
		lw $t0, 160($sp)
		sw $t0, 180($sp)
		end_assign:
		
		# Jumping to endif_8789948671850
		j endif_8789948671850
		
		endif_8789948671850:
		
		lw $t0, 180($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 200($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_105 = internal_110
		lw $t0, 180($sp)
		sw $t0, 200($sp)
		end_assign:
		
		# Jumping to endif_8789948671856
		j endif_8789948671856
		
		endif_8789948671856:
		
		lw $t0, 200($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 220($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_100 = internal_105
		lw $t0, 200($sp)
		sw $t0, 220($sp)
		end_assign:
		
		# Jumping to endif_8789948671862
		j endif_8789948671862
		
		endif_8789948671862:
		
		lw $t0, 220($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 240($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_95 = internal_100
		lw $t0, 220($sp)
		sw $t0, 240($sp)
		end_assign:
		
		# Jumping to endif_8789948671868
		j endif_8789948671868
		
		endif_8789948671868:
		
		lw $t0, 240($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 260($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_90 = internal_95
		lw $t0, 240($sp)
		sw $t0, 260($sp)
		end_assign:
		
		# Jumping to endif_8789948671874
		j endif_8789948671874
		
		endif_8789948671874:
		
		lw $t0, 260($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 280($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_85 = internal_90
		lw $t0, 260($sp)
		sw $t0, 280($sp)
		end_assign:
		
		# Jumping to endif_8789948671880
		j endif_8789948671880
		
		endif_8789948671880:
		
		lw $t0, 280($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 300($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_80 = internal_85
		lw $t0, 280($sp)
		sw $t0, 300($sp)
		end_assign:
		
		# Jumping to endif_8789948671886
		j endif_8789948671886
		
		endif_8789948671886:
		
		lw $t0, 300($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 320($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_75 = internal_80
		lw $t0, 300($sp)
		sw $t0, 320($sp)
		end_assign:
		
		# Jumping to endif_8789948671892
		j endif_8789948671892
		
		endif_8789948671892:
		
		lw $t0, 320($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 340($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_70 = internal_75
		lw $t0, 320($sp)
		sw $t0, 340($sp)
		end_assign:
		
		# Jumping to endif_8789948671898
		j endif_8789948671898
		
		endif_8789948671898:
		
		lw $t0, 340($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 360($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_65 = internal_70
		lw $t0, 340($sp)
		sw $t0, 360($sp)
		end_assign:
		
		# Jumping to endif_8789948671904
		j endif_8789948671904
		
		endif_8789948671904:
		
		lw $t0, 360($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 380($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_60 = internal_65
		lw $t0, 360($sp)
		sw $t0, 380($sp)
		end_assign:
		
		# Jumping to endif_8789948671910
		j endif_8789948671910
		
		endif_8789948671910:
		
		lw $t0, 380($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 400($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_55 = internal_60
		lw $t0, 380($sp)
		sw $t0, 400($sp)
		end_assign:
		
		# Jumping to endif_8789948671916
		j endif_8789948671916
		
		endif_8789948671916:
		
		lw $t0, 400($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 420($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_50 = internal_55
		lw $t0, 400($sp)
		sw $t0, 420($sp)
		end_assign:
		
		# Jumping to endif_8789948671922
		j endif_8789948671922
		
		endif_8789948671922:
		
		# Loading return value in $v1
		lw $v1, 420($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 624
		
		jr $ra
		
	function_prompt_at_CellularAutomaton:
		# Function parameters
		#   $ra = 60($sp)
		#   self = 56($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -56
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 0
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 52($sp) # ans = ""
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 63 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 54
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 87
		sb $t0, 8($v0) # internal_1[0] = 'W'
		
		addi $t0, $zero, 111
		sb $t0, 9($v0) # internal_1[1] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 10($v0) # internal_1[2] = 'u'
		
		addi $t0, $zero, 108
		sb $t0, 11($v0) # internal_1[3] = 'l'
		
		addi $t0, $zero, 100
		sb $t0, 12($v0) # internal_1[4] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_1[5] = ' '
		
		addi $t0, $zero, 121
		sb $t0, 14($v0) # internal_1[6] = 'y'
		
		addi $t0, $zero, 111
		sb $t0, 15($v0) # internal_1[7] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 16($v0) # internal_1[8] = 'u'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_1[9] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 18($v0) # internal_1[10] = 'l'
		
		addi $t0, $zero, 105
		sb $t0, 19($v0) # internal_1[11] = 'i'
		
		addi $t0, $zero, 107
		sb $t0, 20($v0) # internal_1[12] = 'k'
		
		addi $t0, $zero, 101
		sb $t0, 21($v0) # internal_1[13] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_1[14] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 23($v0) # internal_1[15] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 24($v0) # internal_1[16] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_1[17] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 26($v0) # internal_1[18] = 'c'
		
		addi $t0, $zero, 111
		sb $t0, 27($v0) # internal_1[19] = 'o'
		
		addi $t0, $zero, 110
		sb $t0, 28($v0) # internal_1[20] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 29($v0) # internal_1[21] = 't'
		
		addi $t0, $zero, 105
		sb $t0, 30($v0) # internal_1[22] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 31($v0) # internal_1[23] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 32($v0) # internal_1[24] = 'u'
		
		addi $t0, $zero, 101
		sb $t0, 33($v0) # internal_1[25] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 34($v0) # internal_1[26] = ' '
		
		addi $t0, $zero, 119
		sb $t0, 35($v0) # internal_1[27] = 'w'
		
		addi $t0, $zero, 105
		sb $t0, 36($v0) # internal_1[28] = 'i'
		
		addi $t0, $zero, 116
		sb $t0, 37($v0) # internal_1[29] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 38($v0) # internal_1[30] = 'h'
		
		addi $t0, $zero, 32
		sb $t0, 39($v0) # internal_1[31] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 40($v0) # internal_1[32] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 41($v0) # internal_1[33] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 42($v0) # internal_1[34] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 43($v0) # internal_1[35] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 44($v0) # internal_1[36] = 'n'
		
		addi $t0, $zero, 101
		sb $t0, 45($v0) # internal_1[37] = 'e'
		
		addi $t0, $zero, 120
		sb $t0, 46($v0) # internal_1[38] = 'x'
		
		addi $t0, $zero, 116
		sb $t0, 47($v0) # internal_1[39] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 48($v0) # internal_1[40] = ' '
		
		addi $t0, $zero, 103
		sb $t0, 49($v0) # internal_1[41] = 'g'
		
		addi $t0, $zero, 101
		sb $t0, 50($v0) # internal_1[42] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 51($v0) # internal_1[43] = 'n'
		
		addi $t0, $zero, 101
		sb $t0, 52($v0) # internal_1[44] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 53($v0) # internal_1[45] = 'r'
		
		addi $t0, $zero, 97
		sb $t0, 54($v0) # internal_1[46] = 'a'
		
		addi $t0, $zero, 116
		sb $t0, 55($v0) # internal_1[47] = 't'
		
		addi $t0, $zero, 105
		sb $t0, 56($v0) # internal_1[48] = 'i'
		
		addi $t0, $zero, 111
		sb $t0, 57($v0) # internal_1[49] = 'o'
		
		addi $t0, $zero, 110
		sb $t0, 58($v0) # internal_1[50] = 'n'
		
		addi $t0, $zero, 63
		sb $t0, 59($v0) # internal_1[51] = '?'
		
		addi $t0, $zero, 32
		sb $t0, 60($v0) # internal_1[52] = ' '
		
		addi $t0, $zero, 10
		sb $t0, 61($v0) # internal_1[53] = '\n'
		
		sb $zero, 62($v0) # Null-terminator at the end of the string
		
		sw $v0, 48($sp) # internal_1 = "Would you like to continue with the next generation? \n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_1
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_2 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 58 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 49
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 80
		sb $t0, 8($v0) # internal_3[0] = 'P'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_3[1] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 10($v0) # internal_3[2] = 'e'
		
		addi $t0, $zero, 97
		sb $t0, 11($v0) # internal_3[3] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_3[4] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 13($v0) # internal_3[5] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_3[6] = ' '
		
		addi $t0, $zero, 117
		sb $t0, 15($v0) # internal_3[7] = 'u'
		
		addi $t0, $zero, 115
		sb $t0, 16($v0) # internal_3[8] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_3[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_3[10] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 19($v0) # internal_3[11] = 'l'
		
		addi $t0, $zero, 111
		sb $t0, 20($v0) # internal_3[12] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 21($v0) # internal_3[13] = 'w'
		
		addi $t0, $zero, 101
		sb $t0, 22($v0) # internal_3[14] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 23($v0) # internal_3[15] = 'r'
		
		addi $t0, $zero, 99
		sb $t0, 24($v0) # internal_3[16] = 'c'
		
		addi $t0, $zero, 97
		sb $t0, 25($v0) # internal_3[17] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 26($v0) # internal_3[18] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 27($v0) # internal_3[19] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_3[20] = ' '
		
		addi $t0, $zero, 121
		sb $t0, 29($v0) # internal_3[21] = 'y'
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_3[22] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 31($v0) # internal_3[23] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 32($v0) # internal_3[24] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 33($v0) # internal_3[25] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 34($v0) # internal_3[26] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 35($v0) # internal_3[27] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 36($v0) # internal_3[28] = 'f'
		
		addi $t0, $zero, 111
		sb $t0, 37($v0) # internal_3[29] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 38($v0) # internal_3[30] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 39($v0) # internal_3[31] = ' '
		
		addi $t0, $zero, 121
		sb $t0, 40($v0) # internal_3[32] = 'y'
		
		addi $t0, $zero, 111
		sb $t0, 41($v0) # internal_3[33] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 42($v0) # internal_3[34] = 'u'
		
		addi $t0, $zero, 114
		sb $t0, 43($v0) # internal_3[35] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 44($v0) # internal_3[36] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 45($v0) # internal_3[37] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 46($v0) # internal_3[38] = 'n'
		
		addi $t0, $zero, 115
		sb $t0, 47($v0) # internal_3[39] = 's'
		
		addi $t0, $zero, 119
		sb $t0, 48($v0) # internal_3[40] = 'w'
		
		addi $t0, $zero, 101
		sb $t0, 49($v0) # internal_3[41] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 50($v0) # internal_3[42] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 51($v0) # internal_3[43] = ' '
		
		addi $t0, $zero, 91
		sb $t0, 52($v0) # internal_3[44] = '['
		
		addi $t0, $zero, 121
		sb $t0, 53($v0) # internal_3[45] = 'y'
		
		addi $t0, $zero, 93
		sb $t0, 54($v0) # internal_3[46] = ']'
		
		addi $t0, $zero, 58
		sb $t0, 55($v0) # internal_3[47] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 56($v0) # internal_3[48] = ' '
		
		sb $zero, 57($v0) # Null-terminator at the end of the string
		
		sw $v0, 40($sp) # internal_3 = "Please use lowercase y or n for your answer [y]: "
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_3
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_4 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_in_string_at_IO
		jal function_in_string_at_IO
		lw $ra, 4($sp)
		sw $v1, 40($sp) # internal_5 = result of function_in_string_at_IO
		addi $sp, $sp, 8 # Freeing space for arguments
		
		lw $t0, 32($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 52($sp)
		j end_assign
		not_is_Bool_or_Int:
		# ans = internal_5
		lw $t0, 32($sp)
		sw $t0, 52($sp)
		end_assign:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_6[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 28($sp) # internal_6 = "\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_6
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_6
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_7 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_9 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 110
		sb $t0, 8($v0) # internal_10[0] = 'n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_10 = "n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument ans
		lw $t0, 64($sp)
		sw $t0, 4($sp) # Storing ans
		
		# Argument internal_10
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_10
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_11 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 8($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 16($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_9 = internal_11
		lw $t0, 8($sp)
		sw $t0, 16($sp)
		end_assign:
		
		# If internal_9 then goto then_8789948672275
		lw $t0, 16($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948672275
		
		# Jumping to else_8789948672275
		j else_8789948672275
		
		then_8789948672275:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_12 = address of allocated object Int
		
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 20($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_8 = internal_12
		lw $t0, 4($sp)
		sw $t0, 20($sp)
		end_assign:
		
		# Jumping to endif_8789948672275
		j endif_8789948672275
		
		else_8789948672275:
		
		# Allocating Bool 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_13 = address of allocated object Int
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 20($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_8 = internal_13
		lw $t0, 0($sp)
		sw $t0, 20($sp)
		end_assign:
		
		# Jumping to endif_8789948672275
		j endif_8789948672275
		
		endif_8789948672275:
		
		# Loading return value in $v1
		lw $v1, 20($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 56
		
		jr $ra
		
	function_prompt2_at_CellularAutomaton:
		# Function parameters
		#   $ra = 60($sp)
		#   self = 56($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -56
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 0
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 52($sp) # ans = ""
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 11 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 2
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_1[0] = '\n'
		
		addi $t0, $zero, 10
		sb $t0, 9($v0) # internal_1[1] = '\n'
		
		sb $zero, 10($v0) # Null-terminator at the end of the string
		
		sw $v0, 48($sp) # internal_1 = "\n\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_1
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_2 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 57 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 48
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 87
		sb $t0, 8($v0) # internal_3[0] = 'W'
		
		addi $t0, $zero, 111
		sb $t0, 9($v0) # internal_3[1] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 10($v0) # internal_3[2] = 'u'
		
		addi $t0, $zero, 108
		sb $t0, 11($v0) # internal_3[3] = 'l'
		
		addi $t0, $zero, 100
		sb $t0, 12($v0) # internal_3[4] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_3[5] = ' '
		
		addi $t0, $zero, 121
		sb $t0, 14($v0) # internal_3[6] = 'y'
		
		addi $t0, $zero, 111
		sb $t0, 15($v0) # internal_3[7] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 16($v0) # internal_3[8] = 'u'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_3[9] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 18($v0) # internal_3[10] = 'l'
		
		addi $t0, $zero, 105
		sb $t0, 19($v0) # internal_3[11] = 'i'
		
		addi $t0, $zero, 107
		sb $t0, 20($v0) # internal_3[12] = 'k'
		
		addi $t0, $zero, 101
		sb $t0, 21($v0) # internal_3[13] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_3[14] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 23($v0) # internal_3[15] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 24($v0) # internal_3[16] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_3[17] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 26($v0) # internal_3[18] = 'c'
		
		addi $t0, $zero, 104
		sb $t0, 27($v0) # internal_3[19] = 'h'
		
		addi $t0, $zero, 111
		sb $t0, 28($v0) # internal_3[20] = 'o'
		
		addi $t0, $zero, 111
		sb $t0, 29($v0) # internal_3[21] = 'o'
		
		addi $t0, $zero, 115
		sb $t0, 30($v0) # internal_3[22] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 31($v0) # internal_3[23] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_3[24] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 33($v0) # internal_3[25] = 'a'
		
		addi $t0, $zero, 32
		sb $t0, 34($v0) # internal_3[26] = ' '
		
		addi $t0, $zero, 98
		sb $t0, 35($v0) # internal_3[27] = 'b'
		
		addi $t0, $zero, 97
		sb $t0, 36($v0) # internal_3[28] = 'a'
		
		addi $t0, $zero, 99
		sb $t0, 37($v0) # internal_3[29] = 'c'
		
		addi $t0, $zero, 107
		sb $t0, 38($v0) # internal_3[30] = 'k'
		
		addi $t0, $zero, 103
		sb $t0, 39($v0) # internal_3[31] = 'g'
		
		addi $t0, $zero, 114
		sb $t0, 40($v0) # internal_3[32] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 41($v0) # internal_3[33] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 42($v0) # internal_3[34] = 'u'
		
		addi $t0, $zero, 110
		sb $t0, 43($v0) # internal_3[35] = 'n'
		
		addi $t0, $zero, 100
		sb $t0, 44($v0) # internal_3[36] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 45($v0) # internal_3[37] = ' '
		
		addi $t0, $zero, 112
		sb $t0, 46($v0) # internal_3[38] = 'p'
		
		addi $t0, $zero, 97
		sb $t0, 47($v0) # internal_3[39] = 'a'
		
		addi $t0, $zero, 116
		sb $t0, 48($v0) # internal_3[40] = 't'
		
		addi $t0, $zero, 116
		sb $t0, 49($v0) # internal_3[41] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 50($v0) # internal_3[42] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 51($v0) # internal_3[43] = 'r'
		
		addi $t0, $zero, 110
		sb $t0, 52($v0) # internal_3[44] = 'n'
		
		addi $t0, $zero, 63
		sb $t0, 53($v0) # internal_3[45] = '?'
		
		addi $t0, $zero, 32
		sb $t0, 54($v0) # internal_3[46] = ' '
		
		addi $t0, $zero, 10
		sb $t0, 55($v0) # internal_3[47] = '\n'
		
		sb $zero, 56($v0) # Null-terminator at the end of the string
		
		sw $v0, 40($sp) # internal_3 = "Would you like to choose a background pattern? \n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_3
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_4 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 58 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 49
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 80
		sb $t0, 8($v0) # internal_5[0] = 'P'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_5[1] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 10($v0) # internal_5[2] = 'e'
		
		addi $t0, $zero, 97
		sb $t0, 11($v0) # internal_5[3] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_5[4] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 13($v0) # internal_5[5] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_5[6] = ' '
		
		addi $t0, $zero, 117
		sb $t0, 15($v0) # internal_5[7] = 'u'
		
		addi $t0, $zero, 115
		sb $t0, 16($v0) # internal_5[8] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_5[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_5[10] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 19($v0) # internal_5[11] = 'l'
		
		addi $t0, $zero, 111
		sb $t0, 20($v0) # internal_5[12] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 21($v0) # internal_5[13] = 'w'
		
		addi $t0, $zero, 101
		sb $t0, 22($v0) # internal_5[14] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 23($v0) # internal_5[15] = 'r'
		
		addi $t0, $zero, 99
		sb $t0, 24($v0) # internal_5[16] = 'c'
		
		addi $t0, $zero, 97
		sb $t0, 25($v0) # internal_5[17] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 26($v0) # internal_5[18] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 27($v0) # internal_5[19] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_5[20] = ' '
		
		addi $t0, $zero, 121
		sb $t0, 29($v0) # internal_5[21] = 'y'
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_5[22] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 31($v0) # internal_5[23] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 32($v0) # internal_5[24] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 33($v0) # internal_5[25] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 34($v0) # internal_5[26] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 35($v0) # internal_5[27] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 36($v0) # internal_5[28] = 'f'
		
		addi $t0, $zero, 111
		sb $t0, 37($v0) # internal_5[29] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 38($v0) # internal_5[30] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 39($v0) # internal_5[31] = ' '
		
		addi $t0, $zero, 121
		sb $t0, 40($v0) # internal_5[32] = 'y'
		
		addi $t0, $zero, 111
		sb $t0, 41($v0) # internal_5[33] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 42($v0) # internal_5[34] = 'u'
		
		addi $t0, $zero, 114
		sb $t0, 43($v0) # internal_5[35] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 44($v0) # internal_5[36] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 45($v0) # internal_5[37] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 46($v0) # internal_5[38] = 'n'
		
		addi $t0, $zero, 115
		sb $t0, 47($v0) # internal_5[39] = 's'
		
		addi $t0, $zero, 119
		sb $t0, 48($v0) # internal_5[40] = 'w'
		
		addi $t0, $zero, 101
		sb $t0, 49($v0) # internal_5[41] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 50($v0) # internal_5[42] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 51($v0) # internal_5[43] = ' '
		
		addi $t0, $zero, 91
		sb $t0, 52($v0) # internal_5[44] = '['
		
		addi $t0, $zero, 110
		sb $t0, 53($v0) # internal_5[45] = 'n'
		
		addi $t0, $zero, 93
		sb $t0, 54($v0) # internal_5[46] = ']'
		
		addi $t0, $zero, 58
		sb $t0, 55($v0) # internal_5[47] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 56($v0) # internal_5[48] = ' '
		
		sb $zero, 57($v0) # Null-terminator at the end of the string
		
		sw $v0, 32($sp) # internal_5 = "Please use lowercase y or n for your answer [n]: "
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_5
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_6 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_in_string_at_IO
		jal function_in_string_at_IO
		lw $ra, 4($sp)
		sw $v1, 32($sp) # internal_7 = result of function_in_string_at_IO
		addi $sp, $sp, 8 # Freeing space for arguments
		
		lw $t0, 24($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 52($sp)
		j end_assign
		not_is_Bool_or_Int:
		# ans = internal_7
		lw $t0, 24($sp)
		sw $t0, 52($sp)
		end_assign:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_9 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 1
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 121
		sb $t0, 8($v0) # internal_10[0] = 'y'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_10 = "y"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument ans
		lw $t0, 64($sp)
		sw $t0, 4($sp) # Storing ans
		
		# Argument internal_10
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_10
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_11 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 8($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 16($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_9 = internal_11
		lw $t0, 8($sp)
		sw $t0, 16($sp)
		end_assign:
		
		# If internal_9 then goto then_8789948672371
		lw $t0, 16($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948672371
		
		# Jumping to else_8789948672371
		j else_8789948672371
		
		then_8789948672371:
		
		# Allocating Bool 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_12 = address of allocated object Int
		
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 20($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_8 = internal_12
		lw $t0, 4($sp)
		sw $t0, 20($sp)
		end_assign:
		
		# Jumping to endif_8789948672371
		j endif_8789948672371
		
		else_8789948672371:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_13 = address of allocated object Int
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 20($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_8 = internal_13
		lw $t0, 0($sp)
		sw $t0, 20($sp)
		end_assign:
		
		# Jumping to endif_8789948672371
		j endif_8789948672371
		
		endif_8789948672371:
		
		# Loading return value in $v1
		lw $v1, 20($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 56
		
		jr $ra
		
	function___init___at_Main:
		# Function parameters
		#   $ra = 20($sp)
		#   self = 16($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -16
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 12($sp) # internal_0 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 12($sp) # $t1 = internal_0
		sw $t1, 8($t0) # self.rows = internal_0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_1 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_1
		sw $t1, 12($t0) # self.columns = internal_1
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_2 = address of allocated object Int
		
		# Set attribute board_size of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 4($sp) # $t1 = internal_2
		sw $t1, 16($t0) # self.board_size = internal_2
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 0
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 0($sp) # internal_3 = ""
		
		# Set attribute population_map of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_3
		sw $t1, 20($t0) # self.population_map = internal_3
		
		# Set attribute cells of self
		lw $t0, 16($sp) # $t0 = self
		sw $zero, 24($t0) # Set the attribute cells of self
		
		# Loading return value in $v1
		lw $v1, 16($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 16
		
		jr $ra
		
	function_main_at_Main:
		# Function parameters
		#   $ra = 96($sp)
		#   self = 92($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -92
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 0
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 84($sp) # choice = ""
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 38 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 87
		sb $t0, 8($v0) # internal_2[0] = 'W'
		
		addi $t0, $zero, 101
		sb $t0, 9($v0) # internal_2[1] = 'e'
		
		addi $t0, $zero, 108
		sb $t0, 10($v0) # internal_2[2] = 'l'
		
		addi $t0, $zero, 99
		sb $t0, 11($v0) # internal_2[3] = 'c'
		
		addi $t0, $zero, 111
		sb $t0, 12($v0) # internal_2[4] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 13($v0) # internal_2[5] = 'm'
		
		addi $t0, $zero, 101
		sb $t0, 14($v0) # internal_2[6] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_2[7] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 16($v0) # internal_2[8] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 17($v0) # internal_2[9] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_2[10] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 19($v0) # internal_2[11] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 20($v0) # internal_2[12] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 21($v0) # internal_2[13] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_2[14] = ' '
		
		addi $t0, $zero, 71
		sb $t0, 23($v0) # internal_2[15] = 'G'
		
		addi $t0, $zero, 97
		sb $t0, 24($v0) # internal_2[16] = 'a'
		
		addi $t0, $zero, 109
		sb $t0, 25($v0) # internal_2[17] = 'm'
		
		addi $t0, $zero, 101
		sb $t0, 26($v0) # internal_2[18] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_2[19] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 28($v0) # internal_2[20] = 'o'
		
		addi $t0, $zero, 102
		sb $t0, 29($v0) # internal_2[21] = 'f'
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_2[22] = ' '
		
		addi $t0, $zero, 76
		sb $t0, 31($v0) # internal_2[23] = 'L'
		
		addi $t0, $zero, 105
		sb $t0, 32($v0) # internal_2[24] = 'i'
		
		addi $t0, $zero, 102
		sb $t0, 33($v0) # internal_2[25] = 'f'
		
		addi $t0, $zero, 101
		sb $t0, 34($v0) # internal_2[26] = 'e'
		
		addi $t0, $zero, 46
		sb $t0, 35($v0) # internal_2[27] = '.'
		
		addi $t0, $zero, 10
		sb $t0, 36($v0) # internal_2[28] = '\n'
		
		sb $zero, 37($v0) # Null-terminator at the end of the string
		
		sw $v0, 80($sp) # internal_2 = "Welcome to the Game of Life.\n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 104($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_2
		lw $t0, 92($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 88($sp) # internal_3 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 56 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 47
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 84
		sb $t0, 8($v0) # internal_4[0] = 'T'
		
		addi $t0, $zero, 104
		sb $t0, 9($v0) # internal_4[1] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 10($v0) # internal_4[2] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 11($v0) # internal_4[3] = 'r'
		
		addi $t0, $zero, 101
		sb $t0, 12($v0) # internal_4[4] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_4[5] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 14($v0) # internal_4[6] = 'a'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_4[7] = 'r'
		
		addi $t0, $zero, 101
		sb $t0, 16($v0) # internal_4[8] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_4[9] = ' '
		
		addi $t0, $zero, 109
		sb $t0, 18($v0) # internal_4[10] = 'm'
		
		addi $t0, $zero, 97
		sb $t0, 19($v0) # internal_4[11] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 20($v0) # internal_4[12] = 'n'
		
		addi $t0, $zero, 121
		sb $t0, 21($v0) # internal_4[13] = 'y'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_4[14] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 23($v0) # internal_4[15] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 24($v0) # internal_4[16] = 'n'
		
		addi $t0, $zero, 105
		sb $t0, 25($v0) # internal_4[17] = 'i'
		
		addi $t0, $zero, 116
		sb $t0, 26($v0) # internal_4[18] = 't'
		
		addi $t0, $zero, 105
		sb $t0, 27($v0) # internal_4[19] = 'i'
		
		addi $t0, $zero, 97
		sb $t0, 28($v0) # internal_4[20] = 'a'
		
		addi $t0, $zero, 108
		sb $t0, 29($v0) # internal_4[21] = 'l'
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_4[22] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 31($v0) # internal_4[23] = 's'
		
		addi $t0, $zero, 116
		sb $t0, 32($v0) # internal_4[24] = 't'
		
		addi $t0, $zero, 97
		sb $t0, 33($v0) # internal_4[25] = 'a'
		
		addi $t0, $zero, 116
		sb $t0, 34($v0) # internal_4[26] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 35($v0) # internal_4[27] = 'e'
		
		addi $t0, $zero, 115
		sb $t0, 36($v0) # internal_4[28] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 37($v0) # internal_4[29] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 38($v0) # internal_4[30] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 39($v0) # internal_4[31] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 40($v0) # internal_4[32] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 41($v0) # internal_4[33] = 'c'
		
		addi $t0, $zero, 104
		sb $t0, 42($v0) # internal_4[34] = 'h'
		
		addi $t0, $zero, 111
		sb $t0, 43($v0) # internal_4[35] = 'o'
		
		addi $t0, $zero, 111
		sb $t0, 44($v0) # internal_4[36] = 'o'
		
		addi $t0, $zero, 115
		sb $t0, 45($v0) # internal_4[37] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 46($v0) # internal_4[38] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 47($v0) # internal_4[39] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 48($v0) # internal_4[40] = 'f'
		
		addi $t0, $zero, 114
		sb $t0, 49($v0) # internal_4[41] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 50($v0) # internal_4[42] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 51($v0) # internal_4[43] = 'm'
		
		addi $t0, $zero, 46
		sb $t0, 52($v0) # internal_4[44] = '.'
		
		addi $t0, $zero, 32
		sb $t0, 53($v0) # internal_4[45] = ' '
		
		addi $t0, $zero, 10
		sb $t0, 54($v0) # internal_4[46] = '\n'
		
		sb $zero, 55($v0) # Null-terminator at the end of the string
		
		sw $v0, 72($sp) # internal_4 = "There are many initial states to choose from. \n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 104($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_4
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_out_string_at_IO
		jal function_out_string_at_IO
		lw $ra, 8($sp)
		sw $v1, 80($sp) # internal_5 = result of function_out_string_at_IO
		addi $sp, $sp, 12 # Freeing space for arguments
		
		while_start_8789948673058:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 100($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_prompt2_at_CellularAutomaton
		jal function_prompt2_at_CellularAutomaton
		lw $ra, 4($sp)
		sw $v1, 68($sp) # internal_7 = result of function_prompt2_at_CellularAutomaton
		addi $sp, $sp, 8 # Freeing space for arguments
		
		lw $t0, 60($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 64($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_6 = internal_7
		lw $t0, 60($sp)
		sw $t0, 64($sp)
		end_assign:
		
		# If internal_6 then goto while_body_8789948673058
		lw $t0, 64($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_body_8789948673058
		
		# Jumping to while_end_8789948673058
		j while_end_8789948673058
		
		while_body_8789948673058:
		
		# Allocating Bool 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_8 = address of allocated object Int
		
		lw $t0, 56($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 88($sp)
		j end_assign
		not_is_Bool_or_Int:
		# continue = internal_8
		lw $t0, 56($sp)
		sw $t0, 88($sp)
		end_assign:
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 100($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_option_at_CellularAutomaton
		jal function_option_at_CellularAutomaton
		lw $ra, 4($sp)
		sw $v1, 60($sp) # internal_9 = result of function_option_at_CellularAutomaton
		addi $sp, $sp, 8 # Freeing space for arguments
		
		lw $t0, 52($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 84($sp)
		j end_assign
		not_is_Bool_or_Int:
		# choice = internal_9
		lw $t0, 52($sp)
		sw $t0, 84($sp)
		end_assign:
		
		# Allocating CellularAutomaton
		li $v0, 9
		lw $a0, type_CellularAutomaton
		syscall
		la $t0, type_CellularAutomaton # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 48($sp) # internal_10 = address of allocated object CellularAutomaton
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_10
		
		# Calling function function___init___at_CellularAutomaton
		jal function___init___at_CellularAutomaton
		lw $ra, 4($sp)
		sw $v1, 56($sp) # internal_10 = result of function___init___at_CellularAutomaton
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument choice
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing choice
		
		# Calling function function_init_at_CellularAutomaton
		jal function_init_at_CellularAutomaton
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_11 = result of function_init_at_CellularAutomaton
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute cells of self
		lw $t0, 92($sp) # $t0 = self
		lw $t1, 44($sp) # $t1 = internal_11
		sw $t1, 24($t0) # self.cells = internal_11
		
		# Get attribute cells of self
		lw $t0, 92($sp) # Get the address of self
		lw $t1, 24($t0) # Get the attribute 'cells' from the instance
		sw $t1, 40($sp) # internal_12 = cells
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_12
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function function_print_at_CellularAutomaton
		jal function_print_at_CellularAutomaton
		lw $ra, 4($sp)
		sw $v1, 44($sp) # internal_13 = result of function_print_at_CellularAutomaton
		addi $sp, $sp, 8 # Freeing space for arguments
		
		while_start_8789948673046:
		
		lw $t0, 88($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 32($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_14 = continue
		lw $t0, 88($sp)
		sw $t0, 32($sp)
		end_assign:
		
		# If internal_14 then goto while_body_8789948673046
		lw $t0, 32($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_body_8789948673046
		
		# Jumping to while_end_8789948673046
		j while_end_8789948673046
		
		while_body_8789948673046:
		
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_16 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 100($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_prompt_at_CellularAutomaton
		jal function_prompt_at_CellularAutomaton
		lw $ra, 4($sp)
		sw $v1, 28($sp) # internal_17 = result of function_prompt_at_CellularAutomaton
		addi $sp, $sp, 8 # Freeing space for arguments
		
		lw $t0, 20($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 24($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_16 = internal_17
		lw $t0, 20($sp)
		sw $t0, 24($sp)
		end_assign:
		
		# If internal_16 then goto then_8789948673040
		lw $t0, 24($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8789948673040
		
		# Jumping to else_8789948673040
		j else_8789948673040
		
		then_8789948673040:
		
		# Get attribute cells of self
		lw $t0, 92($sp) # Get the address of self
		lw $t1, 24($t0) # Get the attribute 'cells' from the instance
		sw $t1, 16($sp) # internal_18 = cells
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_18
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_18
		
		# Calling function function_evolve_at_CellularAutomaton
		jal function_evolve_at_CellularAutomaton
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_19 = result of function_evolve_at_CellularAutomaton
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute cells of self
		lw $t0, 92($sp) # Get the address of self
		lw $t1, 24($t0) # Get the attribute 'cells' from the instance
		sw $t1, 8($sp) # internal_20 = cells
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_20
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_20
		
		# Calling function function_print_at_CellularAutomaton
		jal function_print_at_CellularAutomaton
		lw $ra, 4($sp)
		sw $v1, 12($sp) # internal_21 = result of function_print_at_CellularAutomaton
		addi $sp, $sp, 8 # Freeing space for arguments
		
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 28($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_15 = internal_21
		lw $t0, 4($sp)
		sw $t0, 28($sp)
		end_assign:
		
		# Jumping to endif_8789948673040
		j endif_8789948673040
		
		else_8789948673040:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_22 = address of allocated object Int
		
		lw $t0, 0($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 88($sp)
		j end_assign
		not_is_Bool_or_Int:
		# continue = internal_22
		lw $t0, 0($sp)
		sw $t0, 88($sp)
		end_assign:
		
		lw $t0, 88($sp)
		lw $t1, 0($t0)
		la $t2, type_Main
		la $t3, type_Bool
		beq $t1, $t2, is_Bool_or_Int
		beq $t1, $t3, is_Bool_or_Int
		j not_is_Bool_or_Int
		is_Bool_or_Int:
		lw $t4, 8($t0)
		lw $t5, 28($sp)
		j end_assign
		not_is_Bool_or_Int:
		# internal_15 = continue
		lw $t0, 88($sp)
		sw $t0, 28($sp)
		end_assign:
		
		# Jumping to endif_8789948673040
		j endif_8789948673040
		
		endif_8789948673040:
		
		# Jumping to while_start_8789948673046
		j while_start_8789948673046
		
		while_end_8789948673046:
		
		# Jumping to while_start_8789948673058
		j while_start_8789948673058
		
		while_end_8789948673058:
		
		# Loading return value in $v1
		lw $v1, 92($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 92
		
		jr $ra
		
	main:
		# Reserving space for local variables
		addi $sp, $sp, -8
		
		# Allocating Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 4($sp) # internal_0 = address of allocated object Main
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function___init___at_Main
		jal function___init___at_Main
		lw $ra, 4($sp)
		sw $v1, 12($sp) # internal_0 = result of function___init___at_Main
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function_main_at_Main
		jal function_main_at_Main
		lw $ra, 4($sp)
		sw $v1, 8($sp) # internal_1 = result of function_main_at_Main
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Exit program
		li $v0, 10
		syscall
		
		